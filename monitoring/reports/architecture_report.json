{
  "summary": {
    "total_files": 1600,
    "working_files": 1194,
    "stub_files": 2,
    "broken_files": 0,
    "empty_files": 6
  },
  "structure": {
    "core": [
      "analyze_and_fix_e999_errors.py",
      "analyze_missing_imports.py",
      "analyze_top_files.py",
      "apply_enhanced_cli_compatibility.py",
      "architecture_analysis.py",
      "check_syntax.py",
      "comprehensive_fix.py",
      "comprehensive_stub_fixer.py",
      "comprehensive_syntax_cleanup.py",
      "comprehensive_syntax_fixer.py",
      "core\\advanced_drift_shell_integration.py",
      "core\\advanced_mathematical_core.py",
      "core\\advanced_test_harness.py",
      "core\\ai_integration_bridge.py",
      "core\\altitude_adjustment_math.py",
      "core\\altitude_generator.py",
      "core\\analysis_engine.py",
      "core\\anomaly_filter_comprehensive.py",
      "core\\api_bridge_manager.py",
      "core\\api_gateway.py",
      "core\\asset_substitution_matrix.py",
      "core\\auto_scaler.py",
      "core\\backtest_injector.py",
      "core\\bare_except_handling_fixes.py",
      "core\\basket_entropy_allocator.py",
      "core\\basket_log_controller.py",
      "core\\basket_swapper.py",
      "core\\basket_swap_logic.py",
      "core\\basket_swap_overlay_router.py",
      "core\\basket_tensor_feedback.py",
      "core\\behavior_pattern_tracker.py",
      "core\\best_practices_enforcer.py",
      "core\\bitcoin_mining_analyzer.py",
      "core\\bitmap_engine.py",
      "core\\bit_operations.py",
      "core\\bit_phase_engine.py",
      "core\\bit_resolution_engine.py",
      "core\\bit_sequencer.py",
      "core\\block_wave_transform.py",
      "core\\braid_fractal.py",
      "core\\braid_pattern_engine.py",
      "core\\btc_data_processor.py",
      "core\\btc_investment_ratio_controller.py",
      "core\\btc_processor_controller.py",
      "core\\btc_processor_ui.py",
      "core\\btc_tick_matrix_initializer.py",
      "core\\btc_usdc_router_relay.py",
      "core\\btc_vector_aggregator.py",
      "core\\btc_vector_processor.py",
      "core\\bus_core.py",
      "core\\bus_events.py",
      "core\\capital_controls.py",
      "core\\ccxt_execution_manager.py",
      "core\\ccxt_profit_vectorizer.py",
      "core\\checksum_verifier.py",
      "core\\cluster_mapper.py",
      "core\\coldbase_bridge.py",
      "core\\collapse_confidence.py",
      "core\\collapse_engine.py",
      "core\\component_registry.py",
      "core\\compute_ghost_route.py",
      "core\\conditional_glyph_feedback_loop.py",
      "core\\config.py",
      "core\\config_utils.py",
      "core\\constants.py",
      "core\\constraints.py",
      "core\\cooldown_manager.py",
      "core\\core_loop_manager.py",
      "core\\create_anomaly_filter.py",
      "core\\critical_error_handler.py",
      "core\\cursor_engine.py",
      "core\\cyclic_core.py",
      "core\\dashboard_integration.py",
      "core\\data_feed_manager.py",
      "core\\data_integration_layer.py",
      "core\\data_provider.py",
      "core\\demo_backtest_runner.py",
      "core\\demo_connectivity_audit.py",
      "core\\demo_entry_simulator.py",
      "core\\demo_integration_system.py",
      "core\\demo_memory_core.py",
      "core\\demo_runner.py",
      "core\\demo_state_injector.py",
      "core\\demo_trading_system.py",
      "core\\deterministic_value_engine.py",
      "core\\dlt_waveform_engine.py",
      "core\\dormant_engine.py",
      "core\\drift_compensator.py",
      "core\\drift_exit_detector.py",
      "core\\drift_phase_monitor.py",
      "core\\drift_shell_engine.py",
      "core\\dual_state_tracker.py",
      "core\\echo_snapshot.py",
      "core\\edge_vector_field.py",
      "core\\enhanced_btc_integration_bridge.py",
      "core\\enhanced_fractal_core.py",
      "core\\enhanced_gpu_hash_processor.py",
      "core\\enhanced_hooks.py",
      "core\\enhanced_risk_manager.py",
      "core\\enhanced_tesseract_processor.py",
      "core\\enhanced_thermal_aware_btc_processor.py",
      "core\\enhanced_thermal_hash_processor.py",
      "core\\enhanced_windows_cli_compatibility.py",
      "core\\entropy_api_layer.py",
      "core\\entropy_bridge.py",
      "core\\entropy_engine.py",
      "core\\entropy_flattener.py",
      "core\\entropy_tracker.py",
      "core\\entropy_validator.py",
      "core\\entry_exit_vector.py",
      "core\\entry_exit_vector_analyzer.py",
      "core\\entry_gate.py",
      "core\\environment_manager.py",
      "core\\error_handler.py",
      "core\\error_handling_pipeline.py",
      "core\\error_sanitizer.py",
      "core\\event_impact_mapper.py",
      "core\\event_matrix_integration_bridge.py",
      "core\\evolution_engine.py",
      "core\\exchange_plumbing.py",
      "core\\exec_packet.py",
      "core\\export_vector_snapshot.py",
      "core\\fallback_logic_router.py",
      "core\\fault_bus.py",
      "core\\ferris_rde_core.py",
      "core\\ferris_wheel_scheduler.py",
      "core\\filters.py",
      "core\\flask_network_coordinator.py",
      "core\\flux_compensator.py",
      "core\\fractal_core.py",
      "core\\function_patterns.py",
      "core\\future_corridor_engine.py",
      "core\\future_hooks.py",
      "core\\gan_anomaly_filter.py",
      "core\\gan_filter.py",
      "core\\genesis_core.py",
      "core\\ghost_architecture_btc_profit_handoff.py",
      "core\\ghost_conditionals.py",
      "core\\ghost_data_recovery.py",
      "core\\ghost_decay.py",
      "core\\ghost_hash_decoder.py",
      "core\\ghost_memory.py",
      "core\\ghost_memory_router.py",
      "core\\ghost_meta_layer_engine.py",
      "core\\ghost_news_glyph_map.py",
      "core\\ghost_news_vectorizer.py",
      "core\\ghost_phase_integrator.py",
      "core\\ghost_pipeline.py",
      "core\\ghost_profit_tracker.py",
      "core\\ghost_router.py",
      "core\\ghost_shadow_tracker.py",
      "core\\ghost_signal.py",
      "core\\ghost_signal_types.py",
      "core\\ghost_strategy_handler.py",
      "core\\ghost_strategy_integration.py",
      "core\\ghost_strategy_integrator.py",
      "core\\ghost_strategy_matrix.py",
      "core\\ghost_swap_vector.py",
      "core\\ghost_trigger.py",
      "core\\glyph_hysteresis.py",
      "core\\glyph_math_core.py",
      "core\\glyph_news_parser.py",
      "core\\glyph_phase_anchor.py",
      "core\\glyph_vector_executor.py",
      "core\\gpt_command_layer.py",
      "core\\gpt_command_layer_simple.py",
      "core\\gpu_flash_engine.py",
      "core\\gpu_metrics.py",
      "core\\gpu_offload_manager.py",
      "core\\hardware_self_identifier.py",
      "core\\hash_affinity_vault.py",
      "core\\hash_confidence_evaluator.py",
      "core\\hash_phase_switch.py",
      "core\\hash_profit_matrix.py",
      "core\\hash_recollection.py",
      "core\\hash_registry.py",
      "core\\hash_registry_core.py",
      "core\\hash_registry_manager.py",
      "core\\hash_registry_storage.py",
      "core\\hash_repair_engine.py",
      "core\\hash_tick_synchronizer.py",
      "core\\hash_trigger_engine.py",
      "core\\hash_trigger_mapper.py",
      "core\\high_frequency_btc_trading_processor.py",
      "core\\historical_ledger_manager.py",
      "core\\hooks.py",
      "core\\hybrid_optimization_manager.py",
      "core\\import_resolver.py",
      "core\\inject_demo_ledger.py",
      "core\\integrated_alif_aleph_system.py",
      "core\\integrated_pathway_test_suite.py",
      "core\\integrated_profit_correlation_system.py",
      "core\\integration_orchestrator.py",
      "core\\integration_test.py",
      "core\\klein_bottle_integrator.py",
      "core\\lantern_hash_echo.py",
      "core\\lantern_news_intelligence_bridge.py",
      "core\\lantern_trigger.py",
      "core\\lantern_trigger_validator.py",
      "core\\lantern_vector_memory.py",
      "core\\lattice_wave_math.py",
      "core\\line_render_engine.py",
      "core\\lockout_matrix.py",
      "core\\long_horizon_simulation.py",
      "core\\magic_number_optimization_engine.py",
      "core\\main.py",
      "core\\main_orcestrator.py",
      "core\\master_orchestrator.py",
      "core\\mathematical_integration_validator.py",
      "core\\mathematical_optimization_bridge.py",
      "core\\mathematical_pipeline_validator.py",
      "core\\mathematical_pipeline_validator_simple.py",
      "core\\mathematical_validation_suite.py",
      "core\\mathlib.py",
      "core\\mathlib_v2.py",
      "core\\mathlib_v3.py",
      "core\\mathlib_v4.py",
      "core\\math_core.py",
      "core\\matrix_allocator.py",
      "core\\matrix_basket_loader.py",
      "core\\matrix_fault_resolver.py",
      "core\\matrix_mapper.py",
      "core\\matrix_overlay.py",
      "core\\matrix_overlay_backup.py",
      "core\\matrix_overlay_engine.py",
      "core\\memory_agent.py",
      "core\\memory_agent_ghost_meta_engine.py",
      "core\\memory_allocation_manager.py",
      "core\\memory_drift_corrector.py",
      "core\\memory_map.py",
      "core\\memory_timing_orchestrator.py",
      "core\\meta_layer_ghost_bridge.py",
      "core\\model_predictor.py",
      "core\\mode_manager.py",
      "core\\multi_bit_btc_processor.py",
      "core\\ncco_manager.py",
      "core\\news_api_endpoints.py",
      "core\\news_intelligence_engine.py",
      "core\\news_lantern_integration_api.py",
      "core\\news_lantern_mathematical_integration.py",
      "core\\news_profit_api_endpoints.py",
      "core\\news_profit_mathematical_bridge.py",
      "core\\news_quant_field.py",
      "core\\news_sentiment_interpreter.py",
      "core\\observer_solution.py",
      "core\\ops_observability.py",
      "core\\optimization_engine.py",
      "core\\optimized_constants_wrapper.py",
      "core\\orbital_profit_navigator.py",
      "core\\oscillator_fallback.py",
      "core\\pattern_match_display.py",
      "core\\pattern_utils.py",
      "core\\performance_monitor.py",
      "core\\persistent_state_manager.py",
      "core\\phantom_entry_logic.py",
      "core\\phantom_exit_logic.py",
      "core\\phantom_lag_model.py",
      "core\\phantom_memory.py",
      "core\\phantom_price_vector_synchronizer.py",
      "core\\phantom_profit_tracker.py",
      "core\\phase_entropy_matcher.py",
      "core\\phase_gate_controller.py",
      "core\\phase_handler.py",
      "core\\pipeline_management_system.py",
      "core\\plot_sign_engine.py",
      "core\\pod_management.py",
      "core\\pool_volume_translator.py",
      "core\\portfolio_router.py",
      "core\\portfolio_substitution_matrix.py",
      "core\\post_failure_recovery_intelligence_loop.py",
      "core\\practical_visual_controller.py",
      "core\\precision_performance.py",
      "core\\profit_bridge_orchestrator.py",
      "core\\profit_cycle_allocator.py",
      "core\\profit_echo_velocity_driver.py",
      "core\\profit_feedback_loop.py",
      "core\\profit_navigation_engine.py",
      "core\\profit_navigator.py",
      "core\\profit_projection.py",
      "core\\profit_protection.py",
      "core\\profit_router.py",
      "core\\profit_routing_engine.py",
      "core\\profit_sweep_allocator.py",
      "core\\profit_tensor.py",
      "core\\profit_trajectory_coprocessor.py",
      "core\\profit_vector_reconciler.py",
      "core\\prophet_connector.py",
      "core\\psi_cache.py",
      "core\\quantization_profile.py",
      "core\\quantum_antipole_engine.py",
      "core\\quantum_btc_intelligence_core.py",
      "core\\quantum_cellular_risk_monitor.py",
      "core\\quantum_drift_shell_engine.py",
      "core\\quantum_mathematical_pathway_validator.py",
      "core\\react_dashboard_integration.py",
      "core\\real_trading_integration.py",
      "core\\recursive_profit.py",
      "core\\recursive_strategy_router.py",
      "core\\regulatory_compliance.py",
      "core\\render_math_utils.py",
      "core\\resonance_gate_logic.py",
      "core\\resource_sequencer.py",
      "core\\riddle_gemm.py",
      "core\\risk_engine.py",
      "core\\risk_guard.py",
      "core\\risk_indexer.py",
      "core\\risk_manager.py",
      "core\\risk_monitor.py",
      "core\\rittle_gemm.py",
      "core\\route_verification_classifier.py",
      "core\\schwabot_dashboard.py",
      "core\\schwabot_integration_orchestrator.py",
      "core\\schwabot_unified_interface_system.py",
      "core\\schwafit_core.py",
      "core\\secure_api_manager.py",
      "core\\sequencer_engine.py",
      "core\\settings_controller.py",
      "core\\settings_manager.py",
      "core\\sfsss_router.py",
      "core\\sfsss_strategy_bundler.py",
      "core\\shell_memory_evolution_fixes.py",
      "core\\shell_portal_mapper.py",
      "core\\shift_profit_engine.py",
      "core\\simple_import_test.py",
      "core\\simplified_api.py",
      "core\\simplified_btc_integration.py",
      "core\\simulate_trade.py",
      "core\\snapshot_logger.py",
      "core\\spectral_state.py",
      "core\\spectral_transform.py",
      "core\\state_tracker.py",
      "core\\state_validation_router.py",
      "core\\strange_loop_detector.py",
      "core\\strategic_dormancy.py",
      "core\\strategy_config.py",
      "core\\strategy_entropy_switcher.py",
      "core\\strategy_execution_mapper.py",
      "core\\strategy_loader.py",
      "core\\strategy_logic.py",
      "core\\strategy_loop_executor.py",
      "core\\strategy_manager.py",
      "core\\strategy_mapper.py",
      "core\\strategy_sustainment_validator.py",
      "core\\sustainment_gan_integration_demo.py",
      "core\\sustainment_integration_hooks.py",
      "core\\sustainment_principles.py",
      "core\\sustainment_underlay_controller.py",
      "core\\systematic_binding_fixer.py",
      "core\\system_api_server.py",
      "core\\system_clock_sequencer.py",
      "core\\system_constants.py",
      "core\\system_constants_example.py",
      "core\\system_integration_orchestrator.py",
      "core\\system_monitor.py",
      "core\\system_orchestrator.py",
      "core\\temporal_execution_correction_layer.py",
      "core\\tensor_harness_matrix.py",
      "core\\tensor_matcher.py",
      "core\\tensor_path_router.py",
      "core\\tensor_router.py",
      "core\\tensor_score_utils.py",
      "core\\tensor_visualization_controller.py",
      "core\\tesseract_processor.py",
      "core\\tesseract_visualizer.py",
      "core\\test_complete_system_functionality.py",
      "core\\test_distributed_system.py",
      "core\\test_enhanced_fractal_functionality.py",
      "core\\test_enhanced_systems_functionality.py",
      "core\\test_integration.py",
      "core\\test_medium_risk_phase_ii.py",
      "core\\test_recursive_profit_engine_functionality.py",
      "core\\test_simple_enhanced_functionality.py",
      "core\\thermal_boundary_manager.py",
      "core\\thermal_integration_demo.py",
      "core\\thermal_map_allocator.py",
      "core\\thermal_performance_tracker.py",
      "core\\thermal_shift.py",
      "core\\thermal_system_integration.py",
      "core\\thermal_visual_integration.py",
      "core\\thermal_zone_manager.py",
      "core\\thermal_zone_manager_mock.py",
      "core\\tick_backlog_router.py",
      "core\\tick_cycle_validator.py",
      "core\\tick_feed_harness.py",
      "core\\tick_hash_interpreter.py",
      "core\\tick_hash_processor.py",
      "core\\tick_management_system.py",
      "core\\tick_processor.py",
      "core\\tick_resonance_engine.py",
      "core\\time_entropy_edge_case.py",
      "core\\timing_manager.py",
      "core\\todo_validation_fixes.py",
      "core\\trade_executor.py",
      "core\\trade_tensor_router.py",
      "core\\trajectory_sphere.py",
      "core\\triplet_matcher.py",
      "core\\type_binding_system.py",
      "core\\type_defs.py",
      "core\\type_enforcer.py",
      "core\\type_patterns.py",
      "core\\typing_schemas.py",
      "core\\ufs_echo_logger.py",
      "core\\ufs_registry.py",
      "core\\ui_bridge_integration_manager.py",
      "core\\ui_integration_bridge.py",
      "core\\ui_state_bridge.py",
      "core\\ump_pipeline.py",
      "core\\unified_api_coordinator.py",
      "core\\unified_confidence_matrix.py",
      "core\\unified_integration_layer.py",
      "core\\unified_mathematical_trading_controller.py",
      "core\\unified_mathematics_config.py",
      "core\\unified_math_system.py",
      "core\\unified_observability_tensor.py",
      "core\\unified_schwabot_integration.py",
      "core\\unified_signal_metrics.py",
      "core\\unified_visual_controller.py",
      "core\\unified_visual_synthesis_controller.py",
      "core\\universal_schwabot_client.py",
      "core\\usdc_position_manager.py",
      "core\\validation_manager.py",
      "core\\vault_balance_regulator.py",
      "core\\vault_router.py",
      "core\\vector_matcher.py",
      "core\\vector_state_mapper.py",
      "core\\vector_validator.py",
      "core\\vecu_core.py",
      "core\\visual_integration_bridge.py",
      "core\\voltage_lane_mapper.py",
      "core\\volume_tick_router.py",
      "core\\wallet_echo_monitor.py",
      "core\\wall_builder_anomaly_handler.py",
      "core\\zbe_position_tracker.py",
      "core\\zpe_core.py",
      "core\\zpe_core_matrix.py",
      "core\\zpe_hybrid_mode_selector.py",
      "core\\zpe_integration.py",
      "core\\zpe_rotational_engine.py",
      "core\\__init__.py",
      "core\\antipole\\tesseract_bridge.py",
      "core\\antipole\\vector.py",
      "core\\antipole\\zbe_controller.py",
      "core\\antipole\\__init__.py",
      "core\\config\\api_config.py",
      "core\\config\\defaults.py",
      "core\\config\\logging_config.py",
      "core\\config\\manager.py",
      "core\\config\\unifier.py",
      "core\\config\\validator.py",
      "core\\config\\__init__.py",
      "core\\data\\data_provider.py",
      "core\\data\\provider.py",
      "core\\exchange_apis\\base_api.py",
      "core\\exchange_apis\\coinbase_api.py",
      "core\\exchange_apis\\__init__.py",
      "core\\ghost\\ghost_conditionals.py",
      "core\\ghost\\ghost_news_vectorizer.py",
      "core\\ghost\\ghost_phase_integrator.py",
      "core\\ghost\\__init__.py",
      "core\\glyph\\conditional_feedback_loop.py",
      "core\\glyph\\recursive_glyph_mapper.py",
      "core\\glyph\\__init__.py",
      "core\\lantern\\lexicon_engine.py",
      "core\\lantern\\profit_story_engine.py",
      "core\\lantern\\story_parser.py",
      "core\\lantern\\trigger.py",
      "core\\lantern\\vector_memory.py",
      "core\\lantern\\word_fitness_tracker.py",
      "core\\lantern\\__init__.py",
      "core\\logic\\swap_decision.py",
      "core\\math\\complete_system_integration_validator.py",
      "core\\math\\integration_validator.py",
      "core\\math\\tensor_algebra.py",
      "core\\matrix\\fault_resolver.py",
      "core\\matrix\\strategy_matrix.py",
      "core\\matrix\\__init__.py",
      "core\\memory_stack\\ai_command_sequencer.py",
      "core\\memory_stack\\command_density_analyzer.py",
      "core\\memory_stack\\execution_validator.py",
      "core\\memory_stack\\memory_hash_rotator.py",
      "core\\memory_stack\\memory_key_allocator.py",
      "core\\memory_stack\\trust_feedback_updater.py",
      "core\\phantom\\entry_logic.py",
      "core\\phantom\\exit_logic.py",
      "core\\phantom\\price_vector_synchronizer.py",
      "core\\phantom\\__init__.py",
      "core\\phase_engine\\basket_phase_map.py",
      "core\\phase_engine\\basket_phase_map_backup.py",
      "core\\phase_engine\\data_provider.py",
      "core\\phase_engine\\phase_loader.py",
      "core\\phase_engine\\phase_logger.py",
      "core\\phase_engine\\phase_map.py",
      "core\\phase_engine\\phase_metrics_engine.py",
      "core\\phase_engine\\sha_mapper.py",
      "core\\phase_engine\\swap_controller.py",
      "core\\phase_engine\\__init__.py",
      "core\\profit\\cycle_allocator.py",
      "core\\profit\\__init__.py",
      "core\\recursive_engine\\integrator.py",
      "core\\recursive_engine\\math_functions.py",
      "core\\recursive_engine\\primary_loop.py",
      "core\\recursive_engine\\profit_memory_vault.py",
      "core\\recursive_engine\\recursive_strategy_handler.py",
      "core\\recursive_engine\\signal_processor.py",
      "core\\recursive_engine\\vault_reentry_pipeline.py",
      "core\\recursive_engine\\__init__.py",
      "core\\secr\\adaptive_icap.py",
      "core\\secr\\allocator.py",
      "core\\secr\\coordinator.py",
      "core\\secr\\failure_logger.py",
      "core\\secr\\injector.py",
      "core\\secr\\resolver_matrix.py",
      "core\\secr\\watchdog.py",
      "core\\secr\\__init__.py",
      "core\\tests\\test_antipole_integration.py",
      "core\\tests\\test_apcf_functionality.py",
      "core\\tests\\test_config_functionality.py",
      "core\\tests\\test_config_loading_functionality.py",
      "core\\tests\\test_enhanced_tesseract_processor_functionality.py",
      "core\\tests\\test_gpu_offload_functionality.py",
      "core\\tests\\test_mathlib_functionality.py",
      "core\\tests\\test_schwafit_core_functionality.py",
      "core\\tests\\test_strategy_loader_functionality.py",
      "core\\tests\\test_zygote_propagation_engine_functionality.py",
      "core\\tests\\test_zygot_shell_functionality.py",
      "core\\trading_models\\containers.py",
      "core\\trading_models\\enums.py",
      "core\\trading_models\\__init__.py",
      "core\\utils\\cli_handler.py",
      "core\\utils\\math_utils.py",
      "core\\utils\\rate_limiter.py",
      "core\\utils\\windows_cli_compatibility.py",
      "core\\utils\\yaml_config_loader.py",
      "core\\utils\\__init__.py",
      "core\\config\\tesseract\\config_loader.py",
      "core\\math\\tensor_algebra\\entropy_engine.py",
      "core\\math\\tensor_algebra\\profit_engine.py",
      "core\\math\\tensor_algebra\\tensor_engine.py",
      "core\\math\\tensor_algebra\\unified_tensor_algebra.py",
      "core\\math\\tensor_algebra\\__init__.py",
      "count_real_errors.py",
      "debug_imports.py",
      "demo_cli_compatibility.py",
      "demo_complete_practical_system.py",
      "enhanced_fitness_oracle.py",
      "enhanced_phase_risk_manager.py",
      "filter_real_errors.py",
      "fix_all_stub_syntax_errors.py",
      "fix_common_errors.py",
      "fix_core_e999_errors.py",
      "fix_core_final_syntax.py",
      "fix_core_flake8.py",
      "fix_core_indentation_final.py",
      "fix_core_init_comprehensive.py",
      "fix_core_syntax_errors.py",
      "fix_critical_errors.py",
      "fix_e128_precise.py",
      "fix_e305_blank_lines.py",
      "fix_e999_critical_syntax.py",
      "fix_e999_final.py",
      "fix_e999_line_by_line.py",
      "fix_e999_precise.py",
      "fix_f811_redefinitions.py",
      "fix_f821_undefined_names.py",
      "fix_final_tools_errors.py",
      "fix_flake8_comprehensive.py",
      "fix_future_annotations_placement.py",
      "fix_hash_vectors.py",
      "fix_import_after_try_pattern.py",
      "fix_import_paths.py",
      "fix_indentation.py",
      "fix_remaining_critical_errors.py",
      "fix_remaining_e999_errors.py",
      "fix_remaining_syntax_errors.py",
      "fix_systematic_errors.py",
      "fix_tools_errors.py",
      "fix_uros_indentation.py",
      "fractal_command_dispatcher.py",
      "fractal_containment_lock.py",
      "ghost_strategy_integration_demo.py",
      "hash_trigger_system_summary.py",
      "installer.py",
      "integrate_enhanced_phase_risk.py",
      "launch_comprehensive_architecture_fix.py",
      "master_syntax_fixer.py",
      "pipeline_integration_manager.py",
      "quantum_drift_shell_engine.py",
      "refactor_cli_output.py",
      "run_schwabot.py",
      "run_type_enforcer.py",
      "schwabot\\instruction_listener.py",
      "schwabot\\main.py",
      "schwabot\\ufs_app.py",
      "schwabot\\__init__.py",
      "schwabot\\ai_oracles\\fitness_oracle.py",
      "schwabot\\ai_oracles\\profit_oracle.py",
      "schwabot\\ai_oracles\\reigime_oracle.py",
      "schwabot\\core\\access_controller.py",
      "schwabot\\core\\access_validator.py",
      "schwabot\\core\\action_selector.py",
      "schwabot\\core\\adapter_manager.py",
      "schwabot\\core\\adaptive_trainer.py",
      "schwabot\\core\\aleph_unitizer.py",
      "schwabot\\core\\alert_dispatcher.py",
      "schwabot\\core\\alert_manager.py",
      "schwabot\\core\\algorithm_optimizer.py",
      "schwabot\\core\\analysis_engine.py",
      "schwabot\\core\\api_documenter.py",
      "schwabot\\core\\api_integrator.py",
      "schwabot\\core\\archive_creator.py",
      "schwabot\\core\\archive_extractor.py",
      "schwabot\\core\\archive_manager.py",
      "schwabot\\core\\archive_validator.py",
      "schwabot\\core\\audit_logger.py",
      "schwabot\\core\\audit_manager.py",
      "schwabot\\core\\audit_reporter.py",
      "schwabot\\core\\audit_trail.py",
      "schwabot\\core\\authorization_manager.py",
      "schwabot\\core\\auth_manager.py",
      "schwabot\\core\\backup_creator.py",
      "schwabot\\core\\backup_manager.py",
      "schwabot\\core\\backup_restorer.py",
      "schwabot\\core\\backup_validator.py",
      "schwabot\\core\\bootstrap.py",
      "schwabot\\core\\btc_tick_matrix_initializer.py",
      "schwabot\\core\\cache_invalidator.py",
      "schwabot\\core\\cache_manager.py",
      "schwabot\\core\\cache_optimizer.py",
      "schwabot\\core\\cache_store.py",
      "schwabot\\core\\choice_optimizer.py",
      "schwabot\\core\\chunk_mapper.py",
      "schwabot\\core\\chunk_router.py",
      "schwabot\\core\\cleanup_handler.py",
      "schwabot\\core\\cli_matrix_visualizer.py",
      "schwabot\\core\\common.py",
      "schwabot\\core\\communication_handler.py",
      "schwabot\\core\\complexity_analyzer.py",
      "schwabot\\core\\complex_number_handler.py",
      "schwabot\\core\\compliance_monitor.py",
      "schwabot\\core\\component_connector.py",
      "schwabot\\core\\config.py",
      "schwabot\\core\\config_manager.py",
      "schwabot\\core\\connection_manager.py",
      "schwabot\\core\\connection_pool.py",
      "schwabot\\core\\consistency_checker.py",
      "schwabot\\core\\constants.py",
      "schwabot\\core\\context_retriever.py",
      "schwabot\\core\\convergence_analyzer.py",
      "schwabot\\core\\correlation_finder.py",
      "schwabot\\core\\cron_handler.py",
      "schwabot\\core\\database_manager.py",
      "schwabot\\core\\data_aggregator.py",
      "schwabot\\core\\data_exporter.py",
      "schwabot\\core\\data_importer.py",
      "schwabot\\core\\data_migrator.py",
      "schwabot\\core\\data_processor.py",
      "schwabot\\core\\data_transformer.py",
      "schwabot\\core\\data_validator.py",
      "schwabot\\core\\decision_engine.py",
      "schwabot\\core\\demo_backtrace_pipeline.py",
      "schwabot\\core\\diagnostics_manager.py",
      "schwabot\\core\\disaster_recovery.py",
      "schwabot\\core\\dlt_waveform_engine.py",
      "schwabot\\core\\doc_generator.py",
      "schwabot\\core\\drem_controller.py",
      "schwabot\\core\\drem_router.py",
      "schwabot\\core\\drem_strategy.py",
      "schwabot\\core\\edos_processor.py",
      "schwabot\\core\\efficiency_calculator.py",
      "schwabot\\core\\email_sender.py",
      "schwabot\\core\\empty.py",
      "schwabot\\core\\encryption_handler.py",
      "schwabot\\core\\enhanced_tesseract_processor.py",
      "schwabot\\core\\entropy_calculator.py",
      "schwabot\\core\\environment_setup.py",
      "schwabot\\core\\event_logger.py",
      "schwabot\\core\\example_creator.py",
      "schwabot\\core\\experience_storer.py",
      "schwabot\\core\\experimental.py",
      "schwabot\\core\\export_manager.py",
      "schwabot\\core\\extension_interface.py",
      "schwabot\\core\\extension_loader.py",
      "schwabot\\core\\extension_manager.py",
      "schwabot\\core\\extension_registry.py",
      "schwabot\\core\\external_handler.py",
      "schwabot\\core\\feedback_processor.py",
      "schwabot\\core\\fix_critical_issues.py",
      "schwabot\\core\\flow_director.py",
      "schwabot\\core\\forecast_generator.py",
      "schwabot\\core\\format_adapter.py",
      "schwabot\\core\\fractal_generator.py",
      "schwabot\\core\\gpu_offload_manager.py",
      "schwabot\\core\\grant_handler.py",
      "schwabot\\core\\health_checker.py",
      "schwabot\\core\\helpers.py",
      "schwabot\\core\\http_handler.py",
      "schwabot\\core\\import_manager.py",
      "schwabot\\core\\improvement_analyzer.py",
      "schwabot\\core\\initializer.py",
      "schwabot\\core\\integral_calculator.py",
      "schwabot\\core\\integration_manager.py",
      "schwabot\\core\\integrity_verifier.py",
      "schwabot\\core\\interface_adapter.py",
      "schwabot\\core\\interface_manager.py",
      "schwabot\\core\\job_controller.py",
      "schwabot\\core\\job_scheduler.py",
      "schwabot\\core\\knowledge_accumulator.py",
      "schwabot\\core\\launcher.py",
      "schwabot\\core\\learning_engine.py",
      "schwabot\\core\\legacy_support.py",
      "schwabot\\core\\log_manager.py",
      "schwabot\\core\\maintenance_manager.py",
      "schwabot\\core\\mathlib.py",
      "schwabot\\core\\matrix_synthesizer.py",
      "schwabot\\core\\memory_manager.py",
      "schwabot\\core\\message_dispatcher.py",
      "schwabot\\core\\message_processor.py",
      "schwabot\\core\\migration_manager.py",
      "schwabot\\core\\migration_validator.py",
      "schwabot\\core\\model_predictor.py",
      "schwabot\\core\\module_coordinator.py",
      "schwabot\\core\\monitoring_agent.py",
      "schwabot\\core\\multi_bit_btc_processor.py",
      "schwabot\\core\\network_manager.py",
      "schwabot\\core\\nonlinear_optimizer.py",
      "schwabot\\core\\notification_manager.py",
      "schwabot\\core\\optimization_engine.py",
      "schwabot\\core\\optimization_runner.py",
      "schwabot\\core\\orchestrator.py",
      "schwabot\\core\\outcome_estimator.py",
      "schwabot\\core\\parameter_loader.py",
      "schwabot\\core\\pattern_recognizer.py",
      "schwabot\\core\\performance_monitor.py",
      "schwabot\\core\\permission_checker.py",
      "schwabot\\core\\permission_validator.py",
      "schwabot\\core\\pipeline_manager.py",
      "schwabot\\core\\placeholder.py",
      "schwabot\\core\\plugin_interface.py",
      "schwabot\\core\\plugin_loader.py",
      "schwabot\\core\\plugin_manager.py",
      "schwabot\\core\\plugin_registry.py",
      "schwabot\\core\\post_failure_recovery_intelligence_loop.py",
      "schwabot\\core\\prediction_engine.py",
      "schwabot\\core\\process_supervisor.py",
      "schwabot\\core\\profit_routing_engine.py",
      "schwabot\\core\\protocol_adapter.py",
      "schwabot\\core\\protocol_handler.py",
      "schwabot\\core\\protocol_manager.py",
      "schwabot\\core\\quality_assessor.py",
      "schwabot\\core\\quantum_entangler.py",
      "schwabot\\core\\quantum_mathlib.py",
      "schwabot\\core\\query_executor.py",
      "schwabot\\core\\qutrit_processor.py",
      "schwabot\\core\\recall_optimizer.py",
      "schwabot\\core\\recovery_manager.py",
      "schwabot\\core\\recursive_market_oracle.py",
      "schwabot\\core\\report_manager.py",
      "schwabot\\core\\request_processor.py",
      "schwabot\\core\\response_builder.py",
      "schwabot\\core\\response_evaluator.py",
      "schwabot\\core\\rights_manager.py",
      "schwabot\\core\\risk_manager.py",
      "schwabot\\core\\role_manager.py",
      "schwabot\\core\\scalar_laws.py",
      "schwabot\\core\\scheduler_manager.py",
      "schwabot\\core\\schema_migrator.py",
      "schwabot\\core\\schwafit_core.py",
      "schwabot\\core\\security_manager.py",
      "schwabot\\core\\sequence_manager.py",
      "schwabot\\core\\service_connector.py",
      "schwabot\\core\\session_manager.py",
      "schwabot\\core\\settings_handler.py",
      "schwabot\\core\\signal_router.py",
      "schwabot\\core\\skill_developer.py",
      "schwabot\\core\\socket_handler.py",
      "schwabot\\core\\stage_executor.py",
      "schwabot\\core\\startup.py",
      "schwabot\\core\\state_recovery.py",
      "schwabot\\core\\statistical_analyzer.py",
      "schwabot\\core\\statistics_collector.py",
      "schwabot\\core\\strategy_config.py",
      "schwabot\\core\\strategy_executor.py",
      "schwabot\\core\\strategy_manager.py",
      "schwabot\\core\\summary_generator.py",
      "schwabot\\core\\system_analyzer.py",
      "schwabot\\core\\system_integrator.py",
      "schwabot\\core\\system_restorer.py",
      "schwabot\\core\\task_dispatcher.py",
      "schwabot\\core\\task_scheduler.py",
      "schwabot\\core\\temporal_execution_correction_layer.py",
      "schwabot\\core\\tensor_manipulator.py",
      "schwabot\\core\\test_fixtures.py",
      "schwabot\\core\\test_runner.py",
      "schwabot\\core\\test_suite.py",
      "schwabot\\core\\test_utilities.py",
      "schwabot\\core\\token_handler.py",
      "schwabot\\core\\topology_analyzer.py",
      "schwabot\\core\\transaction_handler.py",
      "schwabot\\core\\trend_analyzer.py",
      "schwabot\\core\\tutorial_builder.py",
      "schwabot\\core\\user_authenticator.py",
      "schwabot\\core\\utilities.py",
      "schwabot\\core\\validation_engine.py",
      "schwabot\\core\\vector_space_analyzer.py",
      "schwabot\\core\\visualization.py",
      "schwabot\\core\\visual_reporter.py",
      "schwabot\\core\\web_server.py",
      "schwabot\\core\\__init__.py",
      "schwabot\\mathlib\\line_render_engine.py",
      "schwabot\\mathlib\\matrix_fault_resolver.py",
      "schwabot\\tools\\fix_w292_stubs.py",
      "schwabot\\core\\config\\defaults.py",
      "schwabot\\core\\config\\__init__.py",
      "schwabot\\core\\tests\\test_schwafit_core_functionality.py",
      "schwabot\\init\\omni_shell\\lotus_mesh_diagram.py",
      "schwabot\\init\\omni_shell\\lotus_omni_mesh.py",
      "schwabot\\init\\omni_shell\\lotus_tick_hash_feed.py",
      "schwabot\\init\\omni_shell\\main_event_loop.py",
      "schwabot\\init\\omni_shell\\mesh_to_shell_sync.py",
      "schwabot_integration.py",
      "schwabot_system_init.py",
      "schwabot_unified_system.py",
      "selective_syntax_fixer.py",
      "setup.py",
      "simple_cli_refactor.py",
      "simple_stub_fixer.py",
      "system_validation.py",
      "system_validation_comprehensive.py",
      "targeted_stub_fixer.py",
      "time_lattice_fork.py",
      "validate_components.py",
      "visual_fallbacks.py"
    ],
    "api": [],
    "math": [
      "execute_mathematical_cleanup.py",
      "fix_mathlib_syntax.py",
      "mathlib\\matrix_fault_resolver.py",
      "mathlib\\memkey_sync.py",
      "mathlib\\persistent_homology.py",
      "mathlib\\quantum_strategy.py",
      "mathlib\\test_dcc_sync_functionality.py",
      "mathlib\\test_gpu_flash_engine_functionality.py",
      "mathlib\\test_hash_intelligence_debug_functionality.py",
      "mathlib\\test_matrix_fault_resolver_functionality.py",
      "mathlib\\test_memkey_sync_functionality.py",
      "mathlib\\__init__.py",
      "mathlib.py",
      "refactor_math_logic.py",
      "schwabot_unified_math.py",
      "test_mathematical_integration.py",
      "test_mathematical_trading_system_integration.py"
    ],
    "trading": [
      "test_multi_bit_btc_processor.py",
      "test_simple_multi_bit_btc.py"
    ],
    "ui": [
      "build_packages.py",
      "quick_test.py",
      "ui\\schwabot_dashboard.py"
    ],
    "utils": [
      "utils\\file_integrity_checker.py",
      "utils\\fractal_injection.py",
      "utils\\hash_validator.py",
      "utils\\logging_setup.py",
      "utils\\safe_print.py"
    ],
    "tests": [
      "comprehensive_system_test.py",
      "simple_test.py",
      "system_integration_test.py",
      "tests\\recursive_awareness_benchmark.py",
      "tests\\run_missing_definitions_validation.py",
      "tests\\test_antipole_state_export_validation_verification.py",
      "tests\\test_api_price_entry_feedback.py",
      "tests\\test_backlog_test_loop_validator.py",
      "tests\\test_basket_phase_map_functionality.py",
      "tests\\test_btc_processor_functionality.py",
      "tests\\test_ccxt_integration.py",
      "tests\\test_cluster_mapper_functionality.py",
      "tests\\test_config_loader_cwd_functionality.py",
      "tests\\test_config_loading_functionality.py",
      "tests\\test_cooldown_manager_functionality.py",
      "tests\\test_core_engines.py",
      "tests\\test_dashboard_integration.py",
      "tests\\test_dlt_waveform_module_function_validation_verification.py",
      "tests\\test_drift_shell_engine_functionality.py",
      "tests\\test_enhanced_fractal_functionality.py",
      "tests\\test_enhanced_hooks_functionality.py",
      "tests\\test_enhanced_sustainment_framework_functionality.py",
      "tests\\test_entry_exit_sequence_integrity.py",
      "tests\\test_fallback_trade_controller.py",
      "tests\\test_fault_bus_functionality.py",
      "tests\\test_fractal_config_functionality.py",
      "tests\\test_fractal_integration.py",
      "tests\\test_fractal_sync.py",
      "tests\\test_future_corridor_engine_functionality.py",
      "tests\\test_gpu_flash_engine_functionality.py",
      "tests\\test_gpu_sustainment_operations_validation_verification.py",
      "tests\\test_hash_recollection_functionality.py",
      "tests\\test_hash_recollection_system_functionality.py",
      "tests\\test_legacy_backlog_hydrator.py",
      "tests\\test_lexicon_engine_functionality.py",
      "tests\\test_mathematical_implementation_completeness_functionality.py",
      "tests\\test_mathematical_integration.py",
      "tests\\test_mathlib_functionality.py",
      "tests\\test_matrix_mapping_validation.py",
      "tests\\test_news_intelligence_system_functionality.py",
      "tests\\test_phase_map_entry_and_transition_functionality.py",
      "tests\\test_phase_metrics_engine_functionality.py",
      "tests\\test_plot_sign_engine_functionality.py",
      "tests\\test_production_readiness_functionality.py",
      "tests\\test_profit_cycle_navigator_functionality.py",
      "tests\\test_profit_routing_engine.py",
      "tests\\test_profit_vector_calibration.py",
      "tests\\test_quantum_visualizer_functionality.py",
      "tests\\test_recursive_profit_functionality.py",
      "tests\\test_registry.py",
      "tests\\test_resource_sequencer_functionality.py",
      "tests\\test_risk_manager_functionality.py",
      "tests\\test_schwabot_integration.py",
      "tests\\test_secr_system_functionality.py",
      "tests\\test_sfsss_strategy_bundler_functionality.py",
      "tests\\test_sfs_trigger_positioning.py",
      "tests\\test_shift_profit_engine_functionality.py",
      "tests\\test_strategy_sustainment_validator_functionality.py",
      "tests\\test_sustainment_principles_functionality.py",
      "tests\\test_system_validation_framework_verification.py",
      "tests\\test_tesseract_visualizer_functionality.py",
      "tests\\test_tick_hold_logic.py",
      "tests\\test_timing_manager_functionality.py",
      "tests\\test_trade_chain_timeline_replay.py",
      "tests\\test_ufs_echo_logger_functionality.py",
      "tests\\test_validate_config_cli_functionality.py",
      "tests\\test_vault_router_functionality.py",
      "tests\\test_visualization_functionality.py",
      "tests\\test_visual_core_integration.py",
      "tests\\test_word_fitness_tracker_functionality.py",
      "tests\\__init__.py",
      "test_bulletproof_cli_compatibility.py",
      "test_comprehensive_integration.py",
      "test_dlt_matrix_profit_integration.py",
      "test_enhanced_system.py",
      "test_ghost_standalone.py",
      "test_hash_registry_integration.py",
      "test_hash_trigger_integration.py",
      "test_low_risk_integration.py",
      "test_medium_risk_phase2.py",
      "test_real_integration.py",
      "test_simple.py"
    ],
    "config": [
      "config\\config_utils.py",
      "config\\cooldown_config.py",
      "config\\io_utils.py",
      "config\\mathematical_framework_config.py",
      "config\\matrix_response_schema.py",
      "config\\risk_config.py",
      "config\\schwabot_config.py",
      "config\\__init__.py",
      "config\\schemas\\quantization.py",
      "config\\schemas\\__init__.py",
      "settings\\demo_integration_system.py",
      "settings\\launch_demo_system.py",
      "settings\\matrix_allocator.py",
      "settings\\settings_controller.py",
      "settings\\vector_validator.py"
    ],
    "other": [
      "agents\\llm_agent.py",
      "aleph_core\\batch_integration.py",
      "aleph_core\\detonation_sequencer.py",
      "aleph_core\\entropy_analyzer.py",
      "aleph_core\\paradox_visualizer.py",
      "aleph_core\\pattern_matcher.py",
      "aleph_core\\smart_money_analyzer.py",
      "aleph_core\\strategy_replayer.py",
      "aleph_core\\strategy_replayer_upgraded.py",
      "aleph_core\\tesseract.py",
      "aleph_core\\Test_Pattern_Hook.py",
      "aleph_core\\unitizer.py",
      "aleph_core\\__init__.py",
      "cleanup_backup\\bit_phase_engine.py",
      "cleanup_backup\\dlt_waveform_engine.py",
      "cleanup_backup\\fallback_logic_router.py",
      "cleanup_backup\\gpu_offload_manager.py",
      "cleanup_backup\\hash_registry_manager.py",
      "cleanup_backup\\matrix_mapper.py",
      "cleanup_backup\\meta_layer_ghost_bridge.py",
      "cleanup_backup\\phantom_lag_model.py",
      "cleanup_backup\\phase_entropy_matcher.py",
      "cleanup_backup\\profit_cycle_allocator.py",
      "cleanup_backup\\run_schwabot.py",
      "cleanup_backup\\system_validation.py",
      "cleanup_backup\\tensor_harness_matrix.py",
      "cleanup_backup\\tensor_router.py",
      "cleanup_backup\\validate_components.py",
      "cleanup_backup\\voltage_lane_mapper.py",
      "cleanup_backup\\core\\advanced_drift_shell_integration.py",
      "cleanup_backup\\core\\advanced_mathematical_core.py",
      "cleanup_backup\\core\\advanced_test_harness.py",
      "cleanup_backup\\core\\ai_integration_bridge.py",
      "cleanup_backup\\core\\altitude_adjustment_math.py",
      "cleanup_backup\\core\\altitude_generator.py",
      "cleanup_backup\\core\\anomaly_filter_comprehensive.py",
      "cleanup_backup\\core\\api_bridge_manager.py",
      "cleanup_backup\\core\\api_endpoints.py",
      "cleanup_backup\\core\\api_gateway.py",
      "cleanup_backup\\core\\asset_substitution_matrix.py",
      "cleanup_backup\\core\\auto_scaler.py",
      "cleanup_backup\\core\\backtest_injector.py",
      "cleanup_backup\\core\\bare_except_handling_fixes.py",
      "cleanup_backup\\core\\basket_entropy_allocator.py",
      "cleanup_backup\\core\\basket_log_controller.py",
      "cleanup_backup\\core\\basket_swapper.py",
      "cleanup_backup\\core\\basket_swap_logic.py",
      "cleanup_backup\\core\\basket_swap_overlay_router.py",
      "cleanup_backup\\core\\basket_tensor_feedback.py",
      "cleanup_backup\\core\\behavior_pattern_tracker.py",
      "cleanup_backup\\core\\best_practices_enforcer.py",
      "cleanup_backup\\core\\bitcoin_mining_analyzer.py",
      "cleanup_backup\\core\\bitmap_engine.py",
      "cleanup_backup\\core\\bit_operations.py",
      "cleanup_backup\\core\\bit_phase_engine.py",
      "cleanup_backup\\core\\bit_resolution_engine.py",
      "cleanup_backup\\core\\bit_sequencer.py",
      "cleanup_backup\\core\\block_wave_transform.py",
      "cleanup_backup\\core\\braid_fractal.py",
      "cleanup_backup\\core\\braid_pattern_engine.py",
      "cleanup_backup\\core\\btc_data_processor.py",
      "cleanup_backup\\core\\btc_investment_ratio_controller.py",
      "cleanup_backup\\core\\btc_processor_controller.py",
      "cleanup_backup\\core\\btc_processor_ui.py",
      "cleanup_backup\\core\\btc_usdc_router_relay.py",
      "cleanup_backup\\core\\btc_vector_aggregator.py",
      "cleanup_backup\\core\\bus_core.py",
      "cleanup_backup\\core\\bus_events.py",
      "cleanup_backup\\core\\capital_controls.py",
      "cleanup_backup\\core\\ccxt_execution_manager.py",
      "cleanup_backup\\core\\ccxt_profit_vectorizer.py",
      "cleanup_backup\\core\\checksum_verifier.py",
      "cleanup_backup\\core\\cluster_mapper.py",
      "cleanup_backup\\core\\coldbase_bridge.py",
      "cleanup_backup\\core\\collapse_confidence.py",
      "cleanup_backup\\core\\collapse_engine.py",
      "cleanup_backup\\core\\compute_ghost_route.py",
      "cleanup_backup\\core\\conditional_glyph_feedback_loop.py",
      "cleanup_backup\\core\\config.py",
      "cleanup_backup\\core\\config_utils.py",
      "cleanup_backup\\core\\constants.py",
      "cleanup_backup\\core\\cooldown_manager.py",
      "cleanup_backup\\core\\core_loop_manager.py",
      "cleanup_backup\\core\\critical_error_handler.py",
      "cleanup_backup\\core\\cursor_engine.py",
      "cleanup_backup\\core\\cursor_math_integration.py",
      "cleanup_backup\\core\\cyclic_core.py",
      "cleanup_backup\\core\\dashboard_integration.py",
      "cleanup_backup\\core\\data_integration_layer.py",
      "cleanup_backup\\core\\data_provider.py",
      "cleanup_backup\\core\\demo_backtest_runner.py",
      "cleanup_backup\\core\\demo_entry_simulator.py",
      "cleanup_backup\\core\\demo_integration_system.py",
      "cleanup_backup\\core\\demo_memory_core.py",
      "cleanup_backup\\core\\demo_runner.py",
      "cleanup_backup\\core\\demo_state_injector.py",
      "cleanup_backup\\core\\demo_trading_system.py",
      "cleanup_backup\\core\\deterministic_value_engine.py",
      "cleanup_backup\\core\\dlt_waveform_engine.py",
      "cleanup_backup\\core\\dormant_engine.py",
      "cleanup_backup\\core\\drift_compensator.py",
      "cleanup_backup\\core\\drift_exit_detector.py",
      "cleanup_backup\\core\\drift_phase_monitor.py",
      "cleanup_backup\\core\\drift_shell_engine.py",
      "cleanup_backup\\core\\dual_state_tracker.py",
      "cleanup_backup\\core\\echo_snapshot.py",
      "cleanup_backup\\core\\edge_vector_field.py",
      "cleanup_backup\\core\\enhanced_btc_integration_bridge.py",
      "cleanup_backup\\core\\enhanced_fractal_core.py",
      "cleanup_backup\\core\\enhanced_gpu_hash_processor.py",
      "cleanup_backup\\core\\enhanced_hooks.py",
      "cleanup_backup\\core\\enhanced_risk_manager.py",
      "cleanup_backup\\core\\enhanced_tesseract_processor.py",
      "cleanup_backup\\core\\enhanced_thermal_aware_btc_processor.py",
      "cleanup_backup\\core\\enhanced_thermal_hash_processor.py",
      "cleanup_backup\\core\\enhanced_windows_cli_compatibility.py",
      "cleanup_backup\\core\\entropy_api_layer.py",
      "cleanup_backup\\core\\entropy_bridge.py",
      "cleanup_backup\\core\\entropy_engine.py",
      "cleanup_backup\\core\\entropy_flattener.py",
      "cleanup_backup\\core\\entropy_tracker.py",
      "cleanup_backup\\core\\entropy_validator.py",
      "cleanup_backup\\core\\entry_exit_vector.py",
      "cleanup_backup\\core\\entry_exit_vector_analyzer.py",
      "cleanup_backup\\core\\entry_gate.py",
      "cleanup_backup\\core\\environment_manager.py",
      "cleanup_backup\\core\\error_handler.py",
      "cleanup_backup\\core\\error_handling_pipeline.py",
      "cleanup_backup\\core\\error_sanitizer.py",
      "cleanup_backup\\core\\event_impact_mapper.py",
      "cleanup_backup\\core\\event_matrix_integration_bridge.py",
      "cleanup_backup\\core\\evolution_engine.py",
      "cleanup_backup\\core\\exchange_plumbing.py",
      "cleanup_backup\\core\\exec_packet.py",
      "cleanup_backup\\core\\export_vector_snapshot.py",
      "cleanup_backup\\core\\fallback_logic_router.py",
      "cleanup_backup\\core\\fault_bus.py",
      "cleanup_backup\\core\\ferris_rde_core.py",
      "cleanup_backup\\core\\ferris_wheel_scheduler.py",
      "cleanup_backup\\core\\filters.py",
      "cleanup_backup\\core\\flask_network_coordinator.py",
      "cleanup_backup\\core\\flux_compensator.py",
      "cleanup_backup\\core\\fractal_core.py",
      "cleanup_backup\\core\\function_patterns.py",
      "cleanup_backup\\core\\future_corridor_engine.py",
      "cleanup_backup\\core\\future_hooks.py",
      "cleanup_backup\\core\\gan_anomaly_filter.py",
      "cleanup_backup\\core\\gan_filter.py",
      "cleanup_backup\\core\\genesis_core.py",
      "cleanup_backup\\core\\ghost_architecture_btc_profit_handoff.py",
      "cleanup_backup\\core\\ghost_conditionals.py",
      "cleanup_backup\\core\\ghost_data_recovery.py",
      "cleanup_backup\\core\\ghost_decay.py",
      "cleanup_backup\\core\\ghost_hash_decoder.py",
      "cleanup_backup\\core\\ghost_memory.py",
      "cleanup_backup\\core\\ghost_memory_router.py",
      "cleanup_backup\\core\\ghost_meta_layer_engine.py",
      "cleanup_backup\\core\\ghost_news_glyph_map.py",
      "cleanup_backup\\core\\ghost_news_vectorizer.py",
      "cleanup_backup\\core\\ghost_phase_integrator.py",
      "cleanup_backup\\core\\ghost_pipeline.py",
      "cleanup_backup\\core\\ghost_profit_tracker.py",
      "cleanup_backup\\core\\ghost_router.py",
      "cleanup_backup\\core\\ghost_shadow_tracker.py",
      "cleanup_backup\\core\\ghost_strategy_handler.py",
      "cleanup_backup\\core\\ghost_strategy_integrator.py",
      "cleanup_backup\\core\\ghost_strategy_matrix.py",
      "cleanup_backup\\core\\ghost_swap_vector.py",
      "cleanup_backup\\core\\ghost_trigger.py",
      "cleanup_backup\\core\\glyph_hysteresis.py",
      "cleanup_backup\\core\\glyph_math_core.py",
      "cleanup_backup\\core\\glyph_news_parser.py",
      "cleanup_backup\\core\\glyph_phase_anchor.py",
      "cleanup_backup\\core\\glyph_vector_executor.py",
      "cleanup_backup\\core\\gpt_command_layer.py",
      "cleanup_backup\\core\\gpt_command_layer_simple.py",
      "cleanup_backup\\core\\gpu_flash_engine.py",
      "cleanup_backup\\core\\gpu_metrics.py",
      "cleanup_backup\\core\\gpu_offload_manager.py",
      "cleanup_backup\\core\\hardware_self_identifier.py",
      "cleanup_backup\\core\\hash_affinity_vault.py",
      "cleanup_backup\\core\\hash_confidence_evaluator.py",
      "cleanup_backup\\core\\hash_phase_switch.py",
      "cleanup_backup\\core\\hash_profit_matrix.py",
      "cleanup_backup\\core\\hash_recollection.py",
      "cleanup_backup\\core\\hash_registry.py",
      "cleanup_backup\\core\\hash_registry_manager.py",
      "cleanup_backup\\core\\hash_repair_engine.py",
      "cleanup_backup\\core\\hash_tick_synchronizer.py",
      "cleanup_backup\\core\\hash_trigger_engine.py",
      "cleanup_backup\\core\\high_frequency_btc_trading_processor.py",
      "cleanup_backup\\core\\historical_ledger_manager.py",
      "cleanup_backup\\core\\hooks.py",
      "cleanup_backup\\core\\hybrid_optimization_manager.py",
      "cleanup_backup\\core\\import_resolver.py",
      "cleanup_backup\\core\\inject_demo_ledger.py",
      "cleanup_backup\\core\\integrated_alif_aleph_system.py",
      "cleanup_backup\\core\\integrated_pathway_test_suite.py",
      "cleanup_backup\\core\\integrated_profit_correlation_system.py",
      "cleanup_backup\\core\\integration_orchestrator.py",
      "cleanup_backup\\core\\integration_test.py",
      "cleanup_backup\\core\\klein_bottle_integrator.py",
      "cleanup_backup\\core\\lantern_hash_echo.py",
      "cleanup_backup\\core\\lantern_news_intelligence_bridge.py",
      "cleanup_backup\\core\\lantern_trigger.py",
      "cleanup_backup\\core\\lantern_trigger_validator.py",
      "cleanup_backup\\core\\lantern_vector_memory.py",
      "cleanup_backup\\core\\lattice_wave_math.py",
      "cleanup_backup\\core\\line_render_engine.py",
      "cleanup_backup\\core\\lockout_matrix.py",
      "cleanup_backup\\core\\long_horizon_simulation.py",
      "cleanup_backup\\core\\magic_number_optimization_engine.py",
      "cleanup_backup\\core\\main.py",
      "cleanup_backup\\core\\main_orcestrator.py",
      "cleanup_backup\\core\\master_orchestrator.py",
      "cleanup_backup\\core\\mathematical_integration_validator.py",
      "cleanup_backup\\core\\mathematical_optimization_bridge.py",
      "cleanup_backup\\core\\mathematical_pipeline_validator.py",
      "cleanup_backup\\core\\mathematical_pipeline_validator_simple.py",
      "cleanup_backup\\core\\mathlib.py",
      "cleanup_backup\\core\\mathlib_v2.py",
      "cleanup_backup\\core\\mathlib_v3.py",
      "cleanup_backup\\core\\math_core.py",
      "cleanup_backup\\core\\matrix_allocator.py",
      "cleanup_backup\\core\\matrix_basket_loader.py",
      "cleanup_backup\\core\\matrix_fault_resolver.py",
      "cleanup_backup\\core\\matrix_mapper.py",
      "cleanup_backup\\core\\matrix_overlay.py",
      "cleanup_backup\\core\\matrix_overlay_backup.py",
      "cleanup_backup\\core\\matrix_overlay_engine.py",
      "cleanup_backup\\core\\memory_agent.py",
      "cleanup_backup\\core\\memory_agent_ghost_meta_engine.py",
      "cleanup_backup\\core\\memory_allocation_manager.py",
      "cleanup_backup\\core\\memory_drift_corrector.py",
      "cleanup_backup\\core\\memory_map.py",
      "cleanup_backup\\core\\memory_timing_orchestrator.py",
      "cleanup_backup\\core\\meta_layer_ghost_bridge.py",
      "cleanup_backup\\core\\mode_manager.py",
      "cleanup_backup\\core\\multi_bit_btc_processor.py",
      "cleanup_backup\\core\\ncco_manager.py",
      "cleanup_backup\\core\\news_api_endpoints.py",
      "cleanup_backup\\core\\news_intelligence_engine.py",
      "cleanup_backup\\core\\news_lantern_integration_api.py",
      "cleanup_backup\\core\\news_lantern_mathematical_integration.py",
      "cleanup_backup\\core\\news_profit_api_endpoints.py",
      "cleanup_backup\\core\\news_profit_mathematical_bridge.py",
      "cleanup_backup\\core\\news_quant_field.py",
      "cleanup_backup\\core\\news_sentiment_interpreter.py",
      "cleanup_backup\\core\\ops_observability.py",
      "cleanup_backup\\core\\optimization_engine.py",
      "cleanup_backup\\core\\optimized_constants_wrapper.py",
      "cleanup_backup\\core\\orbital_profit_navigator.py",
      "cleanup_backup\\core\\oscillator_fallback.py",
      "cleanup_backup\\core\\pattern_match_display.py",
      "cleanup_backup\\core\\pattern_utils.py",
      "cleanup_backup\\core\\persistent_state_manager.py",
      "cleanup_backup\\core\\phantom_entry_logic.py",
      "cleanup_backup\\core\\phantom_exit_logic.py",
      "cleanup_backup\\core\\phantom_lag_model.py",
      "cleanup_backup\\core\\phantom_memory.py",
      "cleanup_backup\\core\\phantom_price_vector_synchronizer.py",
      "cleanup_backup\\core\\phantom_profit_tracker.py",
      "cleanup_backup\\core\\phase_entropy_matcher.py",
      "cleanup_backup\\core\\phase_gate_controller.py",
      "cleanup_backup\\core\\phase_handler.py",
      "cleanup_backup\\core\\pipeline_management_system.py",
      "cleanup_backup\\core\\plot_sign_engine.py",
      "cleanup_backup\\core\\pod_management.py",
      "cleanup_backup\\core\\pool_volume_translator.py",
      "cleanup_backup\\core\\portfolio_router.py",
      "cleanup_backup\\core\\portfolio_substitution_matrix.py",
      "cleanup_backup\\core\\post_failure_recovery_intelligence_loop.py",
      "cleanup_backup\\core\\practical_visual_controller.py",
      "cleanup_backup\\core\\precision_performance.py",
      "cleanup_backup\\core\\profit_cycle_allocator.py",
      "cleanup_backup\\core\\profit_echo_velocity_driver.py",
      "cleanup_backup\\core\\profit_feedback_loop.py",
      "cleanup_backup\\core\\profit_navigator.py",
      "cleanup_backup\\core\\profit_projection.py",
      "cleanup_backup\\core\\profit_protection.py",
      "cleanup_backup\\core\\profit_router.py",
      "cleanup_backup\\core\\profit_routing_engine.py",
      "cleanup_backup\\core\\profit_sweep_allocator.py",
      "cleanup_backup\\core\\profit_tensor.py",
      "cleanup_backup\\core\\profit_trajectory_coprocessor.py",
      "cleanup_backup\\core\\profit_vector_reconciler.py",
      "cleanup_backup\\core\\prophet_connector.py",
      "cleanup_backup\\core\\psi_cache.py",
      "cleanup_backup\\core\\quantization_profile.py",
      "cleanup_backup\\core\\quantum_antipole_engine.py",
      "cleanup_backup\\core\\quantum_btc_intelligence_core.py",
      "cleanup_backup\\core\\quantum_cellular_risk_monitor.py",
      "cleanup_backup\\core\\quantum_drift_shell_engine.py",
      "cleanup_backup\\core\\quantum_mathematical_pathway_validator.py",
      "cleanup_backup\\core\\react_dashboard_integration.py",
      "cleanup_backup\\core\\recursive_profit.py",
      "cleanup_backup\\core\\recursive_strategy_router.py",
      "cleanup_backup\\core\\regulatory_compliance.py",
      "cleanup_backup\\core\\render_math_utils.py",
      "cleanup_backup\\core\\resonance_gate_logic.py",
      "cleanup_backup\\core\\resource_sequencer.py",
      "cleanup_backup\\core\\riddle_gemm.py",
      "cleanup_backup\\core\\risk_engine.py",
      "cleanup_backup\\core\\risk_guard.py",
      "cleanup_backup\\core\\risk_indexer.py",
      "cleanup_backup\\core\\risk_manager.py",
      "cleanup_backup\\core\\risk_monitor.py",
      "cleanup_backup\\core\\rittle_gemm.py",
      "cleanup_backup\\core\\route_verification_classifier.py",
      "cleanup_backup\\core\\schwabot_dashboard.py",
      "cleanup_backup\\core\\schwabot_integration_orchestrator.py",
      "cleanup_backup\\core\\schwabot_unified_interface_system.py",
      "cleanup_backup\\core\\schwafit_core.py",
      "cleanup_backup\\core\\secure_api_manager.py",
      "cleanup_backup\\core\\sequencer_engine.py",
      "cleanup_backup\\core\\settings_controller.py",
      "cleanup_backup\\core\\settings_manager.py",
      "cleanup_backup\\core\\sfsss_router.py",
      "cleanup_backup\\core\\sfsss_strategy_bundler.py",
      "cleanup_backup\\core\\shell_memory_evolution_fixes.py",
      "cleanup_backup\\core\\shell_portal_mapper.py",
      "cleanup_backup\\core\\shift_profit_engine.py",
      "cleanup_backup\\core\\simplified_api.py",
      "cleanup_backup\\core\\simplified_btc_integration.py",
      "cleanup_backup\\core\\simulate_trade.py",
      "cleanup_backup\\core\\snapshot_logger.py",
      "cleanup_backup\\core\\spectral_state.py",
      "cleanup_backup\\core\\spectral_transform.py",
      "cleanup_backup\\core\\state_tracker.py",
      "cleanup_backup\\core\\state_validation_router.py",
      "cleanup_backup\\core\\strange_loop_detector.py",
      "cleanup_backup\\core\\strategic_dormancy.py",
      "cleanup_backup\\core\\strategy_config.py",
      "cleanup_backup\\core\\strategy_entropy_switcher.py",
      "cleanup_backup\\core\\strategy_execution_mapper.py",
      "cleanup_backup\\core\\strategy_loader.py",
      "cleanup_backup\\core\\strategy_logic.py",
      "cleanup_backup\\core\\strategy_loop_executor.py",
      "cleanup_backup\\core\\strategy_mapper.py",
      "cleanup_backup\\core\\strategy_sustainment_validator.py",
      "cleanup_backup\\core\\sustainment_gan_integration_demo.py",
      "cleanup_backup\\core\\sustainment_integration_hooks.py",
      "cleanup_backup\\core\\sustainment_principles.py",
      "cleanup_backup\\core\\sustainment_underlay_controller.py",
      "cleanup_backup\\core\\system_clock_sequencer.py",
      "cleanup_backup\\core\\system_constants.py",
      "cleanup_backup\\core\\system_constants_example.py",
      "cleanup_backup\\core\\system_integration_orchestrator.py",
      "cleanup_backup\\core\\system_monitor.py",
      "cleanup_backup\\core\\system_orchestrator.py",
      "cleanup_backup\\core\\temporal_execution_correction_layer.py",
      "cleanup_backup\\core\\tensor_harness_matrix.py",
      "cleanup_backup\\core\\tensor_matcher.py",
      "cleanup_backup\\core\\tensor_path_router.py",
      "cleanup_backup\\core\\tensor_router.py",
      "cleanup_backup\\core\\tensor_score_utils.py",
      "cleanup_backup\\core\\tensor_visualization_controller.py",
      "cleanup_backup\\core\\tesseract_processor.py",
      "cleanup_backup\\core\\tesseract_visualizer.py",
      "cleanup_backup\\core\\test_complete_system_functionality.py",
      "cleanup_backup\\core\\test_distributed_system.py",
      "cleanup_backup\\core\\test_enhanced_fractal_functionality.py",
      "cleanup_backup\\core\\test_enhanced_systems_functionality.py",
      "cleanup_backup\\core\\test_integration.py",
      "cleanup_backup\\core\\test_recursive_profit_engine_functionality.py",
      "cleanup_backup\\core\\test_simple_enhanced_functionality.py",
      "cleanup_backup\\core\\thermal_boundary_manager.py",
      "cleanup_backup\\core\\thermal_integration_demo.py",
      "cleanup_backup\\core\\thermal_map_allocator.py",
      "cleanup_backup\\core\\thermal_performance_tracker.py",
      "cleanup_backup\\core\\thermal_shift.py",
      "cleanup_backup\\core\\thermal_system_integration.py",
      "cleanup_backup\\core\\thermal_visual_integration.py",
      "cleanup_backup\\core\\thermal_zone_manager.py",
      "cleanup_backup\\core\\thermal_zone_manager_mock.py",
      "cleanup_backup\\core\\tick_backlog_router.py",
      "cleanup_backup\\core\\tick_cycle_validator.py",
      "cleanup_backup\\core\\tick_feed_harness.py",
      "cleanup_backup\\core\\tick_hash_interpreter.py",
      "cleanup_backup\\core\\tick_hash_processor.py",
      "cleanup_backup\\core\\tick_management_system.py",
      "cleanup_backup\\core\\tick_processor.py",
      "cleanup_backup\\core\\tick_resonance_engine.py",
      "cleanup_backup\\core\\time_entropy_edge_case.py",
      "cleanup_backup\\core\\timing_manager.py",
      "cleanup_backup\\core\\todo_validation_fixes.py",
      "cleanup_backup\\core\\trade_tensor_router.py",
      "cleanup_backup\\core\\trajectory_sphere.py",
      "cleanup_backup\\core\\triplet_matcher.py",
      "cleanup_backup\\core\\type_defs.py",
      "cleanup_backup\\core\\type_enforcer.py",
      "cleanup_backup\\core\\type_patterns.py",
      "cleanup_backup\\core\\typing_schemas.py",
      "cleanup_backup\\core\\ufs_echo_logger.py",
      "cleanup_backup\\core\\ufs_registry.py",
      "cleanup_backup\\core\\ui_integration_bridge.py",
      "cleanup_backup\\core\\ui_state_bridge.py",
      "cleanup_backup\\core\\ump_pipeline.py",
      "cleanup_backup\\core\\unified_api_coordinator.py",
      "cleanup_backup\\core\\unified_confidence_matrix.py",
      "cleanup_backup\\core\\unified_integration_layer.py",
      "cleanup_backup\\core\\unified_mathematical_trading_controller.py",
      "cleanup_backup\\core\\unified_mathematics_config.py",
      "cleanup_backup\\core\\unified_observability_tensor.py",
      "cleanup_backup\\core\\unified_schwabot_integration.py",
      "cleanup_backup\\core\\unified_signal_metrics.py",
      "cleanup_backup\\core\\unified_visual_controller.py",
      "cleanup_backup\\core\\unified_visual_synthesis_controller.py",
      "cleanup_backup\\core\\universal_schwabot_client.py",
      "cleanup_backup\\core\\usdc_position_manager.py",
      "cleanup_backup\\core\\validation_manager.py",
      "cleanup_backup\\core\\vault_balance_regulator.py",
      "cleanup_backup\\core\\vault_router.py",
      "cleanup_backup\\core\\vector_matcher.py",
      "cleanup_backup\\core\\vector_state_mapper.py",
      "cleanup_backup\\core\\vector_validator.py",
      "cleanup_backup\\core\\vecu_core.py",
      "cleanup_backup\\core\\visual_integration_bridge.py",
      "cleanup_backup\\core\\voltage_lane_mapper.py",
      "cleanup_backup\\core\\volume_tick_router.py",
      "cleanup_backup\\core\\wallet_echo_monitor.py",
      "cleanup_backup\\core\\wall_builder_anomaly_handler.py",
      "cleanup_backup\\core\\zbe_position_tracker.py",
      "cleanup_backup\\core\\zpe_core.py",
      "cleanup_backup\\core\\zpe_core_matrix.py",
      "cleanup_backup\\core\\zpe_hybrid_mode_selector.py",
      "cleanup_backup\\core\\zpe_integration.py",
      "cleanup_backup\\core\\zpe_rotational_engine.py",
      "cleanup_backup\\core\\__init__.py",
      "cleanup_backup\\core\\antipole\\tesseract_bridge.py",
      "cleanup_backup\\core\\antipole\\vector.py",
      "cleanup_backup\\core\\antipole\\zbe_controller.py",
      "cleanup_backup\\core\\antipole\\__init__.py",
      "cleanup_backup\\core\\config\\defaults.py",
      "cleanup_backup\\core\\config\\logging_config.py",
      "cleanup_backup\\core\\config\\manager.py",
      "cleanup_backup\\core\\config\\unifier.py",
      "cleanup_backup\\core\\config\\validator.py",
      "cleanup_backup\\core\\config\\__init__.py",
      "cleanup_backup\\core\\data\\data_provider.py",
      "cleanup_backup\\core\\data\\provider.py",
      "cleanup_backup\\core\\exchange_apis\\base_api.py",
      "cleanup_backup\\core\\exchange_apis\\coinbase_api.py",
      "cleanup_backup\\core\\exchange_apis\\__init__.py",
      "cleanup_backup\\core\\ghost\\ghost_conditionals.py",
      "cleanup_backup\\core\\ghost\\ghost_news_vectorizer.py",
      "cleanup_backup\\core\\ghost\\ghost_phase_integrator.py",
      "cleanup_backup\\core\\ghost\\__init__.py",
      "cleanup_backup\\core\\glyph\\conditional_feedback_loop.py",
      "cleanup_backup\\core\\glyph\\recursive_glyph_mapper.py",
      "cleanup_backup\\core\\glyph\\__init__.py",
      "cleanup_backup\\core\\lantern\\lexicon_engine.py",
      "cleanup_backup\\core\\lantern\\profit_story_engine.py",
      "cleanup_backup\\core\\lantern\\story_parser.py",
      "cleanup_backup\\core\\lantern\\trigger.py",
      "cleanup_backup\\core\\lantern\\vector_memory.py",
      "cleanup_backup\\core\\lantern\\word_fitness_tracker.py",
      "cleanup_backup\\core\\lantern\\__init__.py",
      "cleanup_backup\\core\\logic\\swap_decision.py",
      "cleanup_backup\\core\\math\\complete_system_integration_validator.py",
      "cleanup_backup\\core\\math\\integration_validator.py",
      "cleanup_backup\\core\\math\\tensor_algebra.py",
      "cleanup_backup\\core\\matrix\\fault_resolver.py",
      "cleanup_backup\\core\\matrix\\strategy_matrix.py",
      "cleanup_backup\\core\\matrix\\__init__.py",
      "cleanup_backup\\core\\memory_stack\\ai_command_sequencer.py",
      "cleanup_backup\\core\\memory_stack\\command_density_analyzer.py",
      "cleanup_backup\\core\\memory_stack\\execution_validator.py",
      "cleanup_backup\\core\\memory_stack\\memory_hash_rotator.py",
      "cleanup_backup\\core\\memory_stack\\memory_key_allocator.py",
      "cleanup_backup\\core\\memory_stack\\trust_feedback_updater.py",
      "cleanup_backup\\core\\phantom\\entry_logic.py",
      "cleanup_backup\\core\\phantom\\exit_logic.py",
      "cleanup_backup\\core\\phantom\\price_vector_synchronizer.py",
      "cleanup_backup\\core\\phantom\\__init__.py",
      "cleanup_backup\\core\\phase_engine\\basket_phase_map.py",
      "cleanup_backup\\core\\phase_engine\\basket_phase_map_backup.py",
      "cleanup_backup\\core\\phase_engine\\data_provider.py",
      "cleanup_backup\\core\\phase_engine\\phase_loader.py",
      "cleanup_backup\\core\\phase_engine\\phase_logger.py",
      "cleanup_backup\\core\\phase_engine\\phase_map.py",
      "cleanup_backup\\core\\phase_engine\\phase_metrics_engine.py",
      "cleanup_backup\\core\\phase_engine\\sha_mapper.py",
      "cleanup_backup\\core\\phase_engine\\swap_controller.py",
      "cleanup_backup\\core\\phase_engine\\__init__.py",
      "cleanup_backup\\core\\profit\\cycle_allocator.py",
      "cleanup_backup\\core\\profit\\__init__.py",
      "cleanup_backup\\core\\recursive_engine\\integrator.py",
      "cleanup_backup\\core\\recursive_engine\\math_functions.py",
      "cleanup_backup\\core\\recursive_engine\\primary_loop.py",
      "cleanup_backup\\core\\recursive_engine\\profit_memory_vault.py",
      "cleanup_backup\\core\\recursive_engine\\recursive_strategy_handler.py",
      "cleanup_backup\\core\\recursive_engine\\signal_processor.py",
      "cleanup_backup\\core\\recursive_engine\\vault_reentry_pipeline.py",
      "cleanup_backup\\core\\recursive_engine\\__init__.py",
      "cleanup_backup\\core\\secr\\adaptive_icap.py",
      "cleanup_backup\\core\\secr\\allocator.py",
      "cleanup_backup\\core\\secr\\coordinator.py",
      "cleanup_backup\\core\\secr\\failure_logger.py",
      "cleanup_backup\\core\\secr\\injector.py",
      "cleanup_backup\\core\\secr\\resolver_matrix.py",
      "cleanup_backup\\core\\secr\\watchdog.py",
      "cleanup_backup\\core\\secr\\__init__.py",
      "cleanup_backup\\core\\tests\\test_antipole_integration.py",
      "cleanup_backup\\core\\tests\\test_apcf_functionality.py",
      "cleanup_backup\\core\\tests\\test_config_functionality.py",
      "cleanup_backup\\core\\tests\\test_config_loading_functionality.py",
      "cleanup_backup\\core\\tests\\test_enhanced_tesseract_processor_functionality.py",
      "cleanup_backup\\core\\tests\\test_gpu_offload_functionality.py",
      "cleanup_backup\\core\\tests\\test_mathlib_functionality.py",
      "cleanup_backup\\core\\tests\\test_schwafit_core_functionality.py",
      "cleanup_backup\\core\\tests\\test_strategy_loader_functionality.py",
      "cleanup_backup\\core\\tests\\test_zygote_propagation_engine_functionality.py",
      "cleanup_backup\\core\\tests\\test_zygot_shell_functionality.py",
      "cleanup_backup\\core\\trading_models\\containers.py",
      "cleanup_backup\\core\\trading_models\\enums.py",
      "cleanup_backup\\core\\trading_models\\__init__.py",
      "cleanup_backup\\core\\utils\\cli_handler.py",
      "cleanup_backup\\core\\utils\\math_utils.py",
      "cleanup_backup\\core\\utils\\rate_limiter.py",
      "cleanup_backup\\core\\utils\\windows_cli_compatibility.py",
      "cleanup_backup\\core\\utils\\yaml_config_loader.py",
      "cleanup_backup\\core\\utils\\__init__.py",
      "cleanup_backup\\core\\config\\tesseract\\config_loader.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\bit_phase_engine.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\bit_resolution_engine.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\dlt_waveform_engine.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\entropy_validator.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\fallback_logic_router.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\hash_registry.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\hash_registry_manager.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\matrix_mapper.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\meta_layer_ghost_bridge.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\phantom_lag_model.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\profit_cycle_allocator.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\profit_routing_engine.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\tensor_matcher.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\tensor_score_utils.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\matrix_fault_resolver.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\memkey_sync.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\persistent_homology.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\quantum_strategy.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_dcc_sync_functionality.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_gpu_flash_engine_functionality.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_hash_intelligence_debug_functionality.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_matrix_fault_resolver_functionality.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_memkey_sync_functionality.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\__init__.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\math\\complete_system_integration_validator.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\math\\integration_validator.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\math\\tensor_algebra.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\bit_phase_engine.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\bit_resolution_engine.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\dlt_waveform_engine.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\entropy_validator.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\fallback_logic_router.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\hash_registry.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\hash_registry_manager.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\matrix_mapper.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\meta_layer_ghost_bridge.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\phantom_lag_model.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\profit_cycle_allocator.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\profit_routing_engine.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\tensor_matcher.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\tensor_score_utils.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\matrix_fault_resolver.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\memkey_sync.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\persistent_homology.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\quantum_strategy.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_dcc_sync_functionality.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_gpu_flash_engine_functionality.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_hash_intelligence_debug_functionality.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_matrix_fault_resolver_functionality.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_memkey_sync_functionality.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\__init__.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\math\\complete_system_integration_validator.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\math\\integration_validator.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\math\\tensor_algebra.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\bit_phase_engine.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\bit_resolution_engine.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\dlt_waveform_engine.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\entropy_validator.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\fallback_logic_router.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\hash_registry.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\hash_registry_manager.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\matrix_mapper.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\meta_layer_ghost_bridge.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\phantom_lag_model.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\profit_cycle_allocator.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\profit_routing_engine.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\tensor_matcher.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\tensor_score_utils.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\matrix_fault_resolver.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\memkey_sync.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\persistent_homology.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\quantum_strategy.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_dcc_sync_functionality.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_gpu_flash_engine_functionality.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_hash_intelligence_debug_functionality.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_matrix_fault_resolver_functionality.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_memkey_sync_functionality.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\__init__.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\math\\complete_system_integration_validator.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\math\\integration_validator.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\math\\tensor_algebra.py",
      "demo\\demo_launcher.py",
      "demo\\demo_logic_flow.py",
      "demo\\demo_trade_sequence.py",
      "engine\\strategy_logic.py",
      "engine\\__init__.py",
      "examples\\btc_mining_analysis_demo.py",
      "examples\\btc_processor_control_demo.py",
      "examples\\ccxt_trading_demo.py",
      "examples\\enhanced_hooks_usage.py",
      "examples\\enhanced_system_demo.py",
      "examples\\hash_recollection_demo.py",
      "examples\\integrated_system_demo.py",
      "examples\\lantern_news_integration_demo.py",
      "examples\\mathlib_demo.py",
      "examples\\quantum_btc_intelligence_demo.py",
      "examples\\tesseract_visualization_example.py",
      "examples\\unified_visual_demo.py",
      "examples\\unified_visual_synthesis_demo.py",
      "init\\__init__.py",
      "models\\enums.py",
      "models\\schemas.py",
      "ncco_core\\harmony_memory.py",
      "ncco_core\\ncco_scorer.py",
      "ncco_core\\__init__.py",
      "ncco_core\\tests\\test_ferris_rde_functionality.py",
      "ncco_core\\tests\\test_rde_core_functionality.py",
      "ncco_core\\tests\\test_rde_visuals_functionality.py",
      "newmath\\entropy_calc.py",
      "newmath\\hash_vectors.py",
      "newmath\\matrix_utils.py",
      "newmath\\profit_math.py",
      "newmath\\render_engine.py",
      "newmath\\tensor_ops.py",
      "newmath\\validation.py",
      "newmath\\__init__.py",
      "runtime\\validator.py",
      "tools\\comprehensive_mathematical_integration.py",
      "tools\\consciousness_fusion_test.py",
      "tools\\uros_v1_integration_test.py"
    ]
  },
  "file_analyses": {
    "analyze_and_fix_e999_errors.py": {
      "file": "analyze_and_fix_e999_errors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "analyze_missing_imports.py": {
      "file": "analyze_missing_imports.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "SyntaxError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "analyze_top_files.py": {
      "status": "syntax_error",
      "file": "analyze_top_files.py",
      "error": "Syntax error - cannot parse"
    },
    "apply_enhanced_cli_compatibility.py": {
      "status": "syntax_error",
      "file": "apply_enhanced_cli_compatibility.py",
      "error": "Syntax error - cannot parse"
    },
    "architecture_analysis.py": {
      "file": "architecture_analysis.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "FIXME:",
        "pass",
        "raise NotImplementedError",
        "return None",
        "return 0",
        "return []",
        "return {}",
        "def stub_",
        "class Stub",
        "placeholder",
        "dummy"
      ],
      "error_indicators": [
        "ImportError",
        "ModuleNotFoundError",
        "NameError",
        "AttributeError",
        "TypeError",
        "SyntaxError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "app.run()",
        "flask",
        "requests",
        "ccxt",
        "numpy",
        "pandas"
      ]
    },
    "check_syntax.py": {
      "file": "check_syntax.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "comprehensive_fix.py": {
      "file": "comprehensive_fix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "comprehensive_stub_fixer.py": {
      "file": "comprehensive_stub_fixer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "ccxt"
      ]
    },
    "comprehensive_syntax_cleanup.py": {
      "file": "comprehensive_syntax_cleanup.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "comprehensive_syntax_fixer.py": {
      "file": "comprehensive_syntax_fixer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "core\\advanced_drift_shell_integration.py": {
      "status": "syntax_error",
      "file": "core\\advanced_drift_shell_integration.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\advanced_mathematical_core.py": {
      "status": "syntax_error",
      "file": "core\\advanced_mathematical_core.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\advanced_test_harness.py": {
      "status": "syntax_error",
      "file": "core\\advanced_test_harness.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ai_integration_bridge.py": {
      "status": "syntax_error",
      "file": "core\\ai_integration_bridge.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\altitude_adjustment_math.py": {
      "status": "syntax_error",
      "file": "core\\altitude_adjustment_math.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\altitude_generator.py": {
      "status": "syntax_error",
      "file": "core\\altitude_generator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\analysis_engine.py": {
      "file": "core\\analysis_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "numpy"
      ]
    },
    "core\\anomaly_filter_comprehensive.py": {
      "status": "syntax_error",
      "file": "core\\anomaly_filter_comprehensive.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\api_bridge_manager.py": {
      "status": "syntax_error",
      "file": "core\\api_bridge_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\api_gateway.py": {
      "status": "syntax_error",
      "file": "core\\api_gateway.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\asset_substitution_matrix.py": {
      "status": "syntax_error",
      "file": "core\\asset_substitution_matrix.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\auto_scaler.py": {
      "status": "syntax_error",
      "file": "core\\auto_scaler.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\backtest_injector.py": {
      "status": "syntax_error",
      "file": "core\\backtest_injector.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\bare_except_handling_fixes.py": {
      "file": "core\\bare_except_handling_fixes.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\basket_entropy_allocator.py": {
      "file": "core\\basket_entropy_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\basket_log_controller.py": {
      "file": "core\\basket_log_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\basket_swapper.py": {
      "file": "core\\basket_swapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\basket_swap_logic.py": {
      "file": "core\\basket_swap_logic.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\basket_swap_overlay_router.py": {
      "file": "core\\basket_swap_overlay_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\basket_tensor_feedback.py": {
      "file": "core\\basket_tensor_feedback.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\behavior_pattern_tracker.py": {
      "file": "core\\behavior_pattern_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\best_practices_enforcer.py": {
      "status": "syntax_error",
      "file": "core\\best_practices_enforcer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\bitcoin_mining_analyzer.py": {
      "status": "syntax_error",
      "file": "core\\bitcoin_mining_analyzer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\bitmap_engine.py": {
      "status": "syntax_error",
      "file": "core\\bitmap_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\bit_operations.py": {
      "status": "syntax_error",
      "file": "core\\bit_operations.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\bit_phase_engine.py": {
      "status": "syntax_error",
      "file": "core\\bit_phase_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\bit_resolution_engine.py": {
      "status": "syntax_error",
      "file": "core\\bit_resolution_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\bit_sequencer.py": {
      "status": "syntax_error",
      "file": "core\\bit_sequencer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\block_wave_transform.py": {
      "status": "syntax_error",
      "file": "core\\block_wave_transform.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\braid_fractal.py": {
      "status": "syntax_error",
      "file": "core\\braid_fractal.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\braid_pattern_engine.py": {
      "status": "syntax_error",
      "file": "core\\braid_pattern_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\btc_data_processor.py": {
      "status": "syntax_error",
      "file": "core\\btc_data_processor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\btc_investment_ratio_controller.py": {
      "status": "syntax_error",
      "file": "core\\btc_investment_ratio_controller.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\btc_processor_controller.py": {
      "status": "syntax_error",
      "file": "core\\btc_processor_controller.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\btc_processor_ui.py": {
      "file": "core\\btc_processor_ui.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\btc_tick_matrix_initializer.py": {
      "file": "core\\btc_tick_matrix_initializer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "numpy"
      ]
    },
    "core\\btc_usdc_router_relay.py": {
      "status": "syntax_error",
      "file": "core\\btc_usdc_router_relay.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\btc_vector_aggregator.py": {
      "status": "syntax_error",
      "file": "core\\btc_vector_aggregator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\btc_vector_processor.py": {
      "status": "syntax_error",
      "file": "core\\btc_vector_processor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\bus_core.py": {
      "status": "syntax_error",
      "file": "core\\bus_core.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\bus_events.py": {
      "status": "syntax_error",
      "file": "core\\bus_events.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\capital_controls.py": {
      "status": "syntax_error",
      "file": "core\\capital_controls.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ccxt_execution_manager.py": {
      "status": "syntax_error",
      "file": "core\\ccxt_execution_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ccxt_profit_vectorizer.py": {
      "status": "syntax_error",
      "file": "core\\ccxt_profit_vectorizer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\checksum_verifier.py": {
      "status": "syntax_error",
      "file": "core\\checksum_verifier.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\cluster_mapper.py": {
      "status": "syntax_error",
      "file": "core\\cluster_mapper.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\coldbase_bridge.py": {
      "status": "syntax_error",
      "file": "core\\coldbase_bridge.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\collapse_confidence.py": {
      "status": "syntax_error",
      "file": "core\\collapse_confidence.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\collapse_engine.py": {
      "status": "syntax_error",
      "file": "core\\collapse_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\component_registry.py": {
      "status": "syntax_error",
      "file": "core\\component_registry.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\compute_ghost_route.py": {
      "file": "core\\compute_ghost_route.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from "
      ]
    },
    "core\\conditional_glyph_feedback_loop.py": {
      "status": "syntax_error",
      "file": "core\\conditional_glyph_feedback_loop.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\config.py": {
      "status": "syntax_error",
      "file": "core\\config.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\config_utils.py": {
      "file": "core\\config_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\constants.py": {
      "status": "syntax_error",
      "file": "core\\constants.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\constraints.py": {
      "status": "syntax_error",
      "file": "core\\constraints.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\cooldown_manager.py": {
      "file": "core\\cooldown_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\core_loop_manager.py": {
      "status": "syntax_error",
      "file": "core\\core_loop_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\create_anomaly_filter.py": {
      "status": "syntax_error",
      "file": "core\\create_anomaly_filter.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\critical_error_handler.py": {
      "file": "core\\critical_error_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\cursor_engine.py": {
      "file": "core\\cursor_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\cyclic_core.py": {
      "file": "core\\cyclic_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\dashboard_integration.py": {
      "status": "syntax_error",
      "file": "core\\dashboard_integration.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\data_feed_manager.py": {
      "status": "syntax_error",
      "file": "core\\data_feed_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\data_integration_layer.py": {
      "status": "syntax_error",
      "file": "core\\data_integration_layer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\data_provider.py": {
      "status": "syntax_error",
      "file": "core\\data_provider.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\demo_backtest_runner.py": {
      "status": "syntax_error",
      "file": "core\\demo_backtest_runner.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\demo_connectivity_audit.py": {
      "status": "syntax_error",
      "file": "core\\demo_connectivity_audit.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\demo_entry_simulator.py": {
      "status": "syntax_error",
      "file": "core\\demo_entry_simulator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\demo_integration_system.py": {
      "status": "syntax_error",
      "file": "core\\demo_integration_system.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\demo_memory_core.py": {
      "status": "syntax_error",
      "file": "core\\demo_memory_core.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\demo_runner.py": {
      "status": "syntax_error",
      "file": "core\\demo_runner.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\demo_state_injector.py": {
      "status": "syntax_error",
      "file": "core\\demo_state_injector.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\demo_trading_system.py": {
      "status": "syntax_error",
      "file": "core\\demo_trading_system.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\deterministic_value_engine.py": {
      "status": "syntax_error",
      "file": "core\\deterministic_value_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\dlt_waveform_engine.py": {
      "status": "syntax_error",
      "file": "core\\dlt_waveform_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\dormant_engine.py": {
      "status": "syntax_error",
      "file": "core\\dormant_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\drift_compensator.py": {
      "status": "syntax_error",
      "file": "core\\drift_compensator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\drift_exit_detector.py": {
      "file": "core\\drift_exit_detector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\drift_phase_monitor.py": {
      "status": "syntax_error",
      "file": "core\\drift_phase_monitor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\drift_shell_engine.py": {
      "status": "syntax_error",
      "file": "core\\drift_shell_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\dual_state_tracker.py": {
      "status": "syntax_error",
      "file": "core\\dual_state_tracker.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\echo_snapshot.py": {
      "status": "syntax_error",
      "file": "core\\echo_snapshot.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\edge_vector_field.py": {
      "status": "syntax_error",
      "file": "core\\edge_vector_field.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\enhanced_btc_integration_bridge.py": {
      "file": "core\\enhanced_btc_integration_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\enhanced_fractal_core.py": {
      "status": "syntax_error",
      "file": "core\\enhanced_fractal_core.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\enhanced_gpu_hash_processor.py": {
      "file": "core\\enhanced_gpu_hash_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\enhanced_hooks.py": {
      "file": "core\\enhanced_hooks.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\enhanced_risk_manager.py": {
      "status": "syntax_error",
      "file": "core\\enhanced_risk_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\enhanced_tesseract_processor.py": {
      "file": "core\\enhanced_tesseract_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\enhanced_thermal_aware_btc_processor.py": {
      "file": "core\\enhanced_thermal_aware_btc_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\enhanced_thermal_hash_processor.py": {
      "status": "syntax_error",
      "file": "core\\enhanced_thermal_hash_processor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\enhanced_windows_cli_compatibility.py": {
      "status": "syntax_error",
      "file": "core\\enhanced_windows_cli_compatibility.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\entropy_api_layer.py": {
      "status": "syntax_error",
      "file": "core\\entropy_api_layer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\entropy_bridge.py": {
      "status": "syntax_error",
      "file": "core\\entropy_bridge.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\entropy_engine.py": {
      "status": "syntax_error",
      "file": "core\\entropy_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\entropy_flattener.py": {
      "status": "syntax_error",
      "file": "core\\entropy_flattener.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\entropy_tracker.py": {
      "file": "core\\entropy_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\entropy_validator.py": {
      "status": "syntax_error",
      "file": "core\\entropy_validator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\entry_exit_vector.py": {
      "status": "syntax_error",
      "file": "core\\entry_exit_vector.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\entry_exit_vector_analyzer.py": {
      "status": "syntax_error",
      "file": "core\\entry_exit_vector_analyzer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\entry_gate.py": {
      "status": "syntax_error",
      "file": "core\\entry_gate.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\environment_manager.py": {
      "status": "syntax_error",
      "file": "core\\environment_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\error_handler.py": {
      "status": "syntax_error",
      "file": "core\\error_handler.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\error_handling_pipeline.py": {
      "status": "syntax_error",
      "file": "core\\error_handling_pipeline.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\error_sanitizer.py": {
      "status": "syntax_error",
      "file": "core\\error_sanitizer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\event_impact_mapper.py": {
      "status": "syntax_error",
      "file": "core\\event_impact_mapper.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\event_matrix_integration_bridge.py": {
      "status": "syntax_error",
      "file": "core\\event_matrix_integration_bridge.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\evolution_engine.py": {
      "status": "syntax_error",
      "file": "core\\evolution_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\exchange_plumbing.py": {
      "status": "syntax_error",
      "file": "core\\exchange_plumbing.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\exec_packet.py": {
      "status": "syntax_error",
      "file": "core\\exec_packet.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\export_vector_snapshot.py": {
      "status": "syntax_error",
      "file": "core\\export_vector_snapshot.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\fallback_logic_router.py": {
      "status": "syntax_error",
      "file": "core\\fallback_logic_router.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\fault_bus.py": {
      "status": "syntax_error",
      "file": "core\\fault_bus.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ferris_rde_core.py": {
      "status": "syntax_error",
      "file": "core\\ferris_rde_core.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ferris_wheel_scheduler.py": {
      "status": "syntax_error",
      "file": "core\\ferris_wheel_scheduler.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\filters.py": {
      "status": "syntax_error",
      "file": "core\\filters.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\flask_network_coordinator.py": {
      "status": "syntax_error",
      "file": "core\\flask_network_coordinator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\flux_compensator.py": {
      "status": "syntax_error",
      "file": "core\\flux_compensator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\fractal_core.py": {
      "status": "syntax_error",
      "file": "core\\fractal_core.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\function_patterns.py": {
      "file": "core\\function_patterns.py",
      "status": "stub",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": []
    },
    "core\\future_corridor_engine.py": {
      "status": "syntax_error",
      "file": "core\\future_corridor_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\future_hooks.py": {
      "status": "syntax_error",
      "file": "core\\future_hooks.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\gan_anomaly_filter.py": {
      "status": "syntax_error",
      "file": "core\\gan_anomaly_filter.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\gan_filter.py": {
      "status": "syntax_error",
      "file": "core\\gan_filter.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\genesis_core.py": {
      "file": "core\\genesis_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\ghost_architecture_btc_profit_handoff.py": {
      "status": "syntax_error",
      "file": "core\\ghost_architecture_btc_profit_handoff.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_conditionals.py": {
      "file": "core\\ghost_conditionals.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "core\\ghost_data_recovery.py": {
      "file": "core\\ghost_data_recovery.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\ghost_decay.py": {
      "file": "core\\ghost_decay.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\ghost_hash_decoder.py": {
      "file": "core\\ghost_hash_decoder.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\ghost_memory.py": {
      "status": "syntax_error",
      "file": "core\\ghost_memory.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_memory_router.py": {
      "status": "syntax_error",
      "file": "core\\ghost_memory_router.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_meta_layer_engine.py": {
      "file": "core\\ghost_meta_layer_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\ghost_news_glyph_map.py": {
      "status": "syntax_error",
      "file": "core\\ghost_news_glyph_map.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_news_vectorizer.py": {
      "status": "syntax_error",
      "file": "core\\ghost_news_vectorizer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_phase_integrator.py": {
      "status": "syntax_error",
      "file": "core\\ghost_phase_integrator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_pipeline.py": {
      "status": "syntax_error",
      "file": "core\\ghost_pipeline.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_profit_tracker.py": {
      "status": "syntax_error",
      "file": "core\\ghost_profit_tracker.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_router.py": {
      "status": "syntax_error",
      "file": "core\\ghost_router.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_shadow_tracker.py": {
      "file": "core\\ghost_shadow_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\ghost_signal.py": {
      "status": "syntax_error",
      "file": "core\\ghost_signal.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_signal_types.py": {
      "status": "syntax_error",
      "file": "core\\ghost_signal_types.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_strategy_handler.py": {
      "status": "syntax_error",
      "file": "core\\ghost_strategy_handler.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_strategy_integration.py": {
      "status": "syntax_error",
      "file": "core\\ghost_strategy_integration.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_strategy_integrator.py": {
      "status": "syntax_error",
      "file": "core\\ghost_strategy_integrator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_strategy_matrix.py": {
      "status": "syntax_error",
      "file": "core\\ghost_strategy_matrix.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_swap_vector.py": {
      "status": "syntax_error",
      "file": "core\\ghost_swap_vector.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost_trigger.py": {
      "status": "syntax_error",
      "file": "core\\ghost_trigger.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\glyph_hysteresis.py": {
      "status": "syntax_error",
      "file": "core\\glyph_hysteresis.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\glyph_math_core.py": {
      "status": "syntax_error",
      "file": "core\\glyph_math_core.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\glyph_news_parser.py": {
      "file": "core\\glyph_news_parser.py",
      "status": "empty",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": []
    },
    "core\\glyph_phase_anchor.py": {
      "status": "syntax_error",
      "file": "core\\glyph_phase_anchor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\glyph_vector_executor.py": {
      "status": "syntax_error",
      "file": "core\\glyph_vector_executor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\gpt_command_layer.py": {
      "status": "syntax_error",
      "file": "core\\gpt_command_layer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\gpt_command_layer_simple.py": {
      "status": "syntax_error",
      "file": "core\\gpt_command_layer_simple.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\gpu_flash_engine.py": {
      "status": "syntax_error",
      "file": "core\\gpu_flash_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\gpu_metrics.py": {
      "file": "core\\gpu_metrics.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\gpu_offload_manager.py": {
      "status": "syntax_error",
      "file": "core\\gpu_offload_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\hardware_self_identifier.py": {
      "status": "syntax_error",
      "file": "core\\hardware_self_identifier.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\hash_affinity_vault.py": {
      "file": "core\\hash_affinity_vault.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\hash_confidence_evaluator.py": {
      "status": "syntax_error",
      "file": "core\\hash_confidence_evaluator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\hash_phase_switch.py": {
      "status": "syntax_error",
      "file": "core\\hash_phase_switch.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\hash_profit_matrix.py": {
      "file": "core\\hash_profit_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\hash_recollection.py": {
      "status": "syntax_error",
      "file": "core\\hash_recollection.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\hash_registry.py": {
      "status": "syntax_error",
      "file": "core\\hash_registry.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\hash_registry_core.py": {
      "status": "syntax_error",
      "file": "core\\hash_registry_core.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\hash_registry_manager.py": {
      "status": "syntax_error",
      "file": "core\\hash_registry_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\hash_registry_storage.py": {
      "status": "syntax_error",
      "file": "core\\hash_registry_storage.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\hash_repair_engine.py": {
      "status": "syntax_error",
      "file": "core\\hash_repair_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\hash_tick_synchronizer.py": {
      "status": "syntax_error",
      "file": "core\\hash_tick_synchronizer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\hash_trigger_engine.py": {
      "status": "syntax_error",
      "file": "core\\hash_trigger_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\hash_trigger_mapper.py": {
      "status": "syntax_error",
      "file": "core\\hash_trigger_mapper.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\high_frequency_btc_trading_processor.py": {
      "file": "core\\high_frequency_btc_trading_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\historical_ledger_manager.py": {
      "file": "core\\historical_ledger_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\hooks.py": {
      "file": "core\\hooks.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\hybrid_optimization_manager.py": {
      "file": "core\\hybrid_optimization_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\import_resolver.py": {
      "status": "syntax_error",
      "file": "core\\import_resolver.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\inject_demo_ledger.py": {
      "status": "syntax_error",
      "file": "core\\inject_demo_ledger.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\integrated_alif_aleph_system.py": {
      "status": "syntax_error",
      "file": "core\\integrated_alif_aleph_system.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\integrated_pathway_test_suite.py": {
      "file": "core\\integrated_pathway_test_suite.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\integrated_profit_correlation_system.py": {
      "file": "core\\integrated_profit_correlation_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\integration_orchestrator.py": {
      "status": "syntax_error",
      "file": "core\\integration_orchestrator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\integration_test.py": {
      "status": "syntax_error",
      "file": "core\\integration_test.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\klein_bottle_integrator.py": {
      "file": "core\\klein_bottle_integrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\lantern_hash_echo.py": {
      "status": "syntax_error",
      "file": "core\\lantern_hash_echo.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\lantern_news_intelligence_bridge.py": {
      "status": "syntax_error",
      "file": "core\\lantern_news_intelligence_bridge.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\lantern_trigger.py": {
      "file": "core\\lantern_trigger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "core\\lantern_trigger_validator.py": {
      "status": "syntax_error",
      "file": "core\\lantern_trigger_validator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\lantern_vector_memory.py": {
      "status": "syntax_error",
      "file": "core\\lantern_vector_memory.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\lattice_wave_math.py": {
      "status": "syntax_error",
      "file": "core\\lattice_wave_math.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\line_render_engine.py": {
      "status": "syntax_error",
      "file": "core\\line_render_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\lockout_matrix.py": {
      "file": "core\\lockout_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\long_horizon_simulation.py": {
      "status": "syntax_error",
      "file": "core\\long_horizon_simulation.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\magic_number_optimization_engine.py": {
      "file": "core\\magic_number_optimization_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\main.py": {
      "status": "syntax_error",
      "file": "core\\main.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\main_orcestrator.py": {
      "status": "syntax_error",
      "file": "core\\main_orcestrator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\master_orchestrator.py": {
      "status": "syntax_error",
      "file": "core\\master_orchestrator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\mathematical_integration_validator.py": {
      "status": "syntax_error",
      "file": "core\\mathematical_integration_validator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\mathematical_optimization_bridge.py": {
      "status": "syntax_error",
      "file": "core\\mathematical_optimization_bridge.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\mathematical_pipeline_validator.py": {
      "status": "syntax_error",
      "file": "core\\mathematical_pipeline_validator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\mathematical_pipeline_validator_simple.py": {
      "status": "syntax_error",
      "file": "core\\mathematical_pipeline_validator_simple.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\mathematical_validation_suite.py": {
      "status": "syntax_error",
      "file": "core\\mathematical_validation_suite.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\mathlib.py": {
      "status": "syntax_error",
      "file": "core\\mathlib.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\mathlib_v2.py": {
      "status": "syntax_error",
      "file": "core\\mathlib_v2.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\mathlib_v3.py": {
      "status": "syntax_error",
      "file": "core\\mathlib_v3.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\mathlib_v4.py": {
      "status": "syntax_error",
      "file": "core\\mathlib_v4.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\math_core.py": {
      "status": "syntax_error",
      "file": "core\\math_core.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\matrix_allocator.py": {
      "status": "syntax_error",
      "file": "core\\matrix_allocator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\matrix_basket_loader.py": {
      "status": "syntax_error",
      "file": "core\\matrix_basket_loader.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\matrix_fault_resolver.py": {
      "status": "syntax_error",
      "file": "core\\matrix_fault_resolver.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\matrix_mapper.py": {
      "status": "syntax_error",
      "file": "core\\matrix_mapper.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\matrix_overlay.py": {
      "file": "core\\matrix_overlay.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\matrix_overlay_backup.py": {
      "file": "core\\matrix_overlay_backup.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\matrix_overlay_engine.py": {
      "file": "core\\matrix_overlay_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\memory_agent.py": {
      "file": "core\\memory_agent.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\memory_agent_ghost_meta_engine.py": {
      "status": "syntax_error",
      "file": "core\\memory_agent_ghost_meta_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\memory_allocation_manager.py": {
      "status": "syntax_error",
      "file": "core\\memory_allocation_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\memory_drift_corrector.py": {
      "status": "syntax_error",
      "file": "core\\memory_drift_corrector.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\memory_map.py": {
      "file": "core\\memory_map.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\memory_timing_orchestrator.py": {
      "file": "core\\memory_timing_orchestrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\meta_layer_ghost_bridge.py": {
      "status": "syntax_error",
      "file": "core\\meta_layer_ghost_bridge.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\model_predictor.py": {
      "status": "syntax_error",
      "file": "core\\model_predictor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\mode_manager.py": {
      "status": "syntax_error",
      "file": "core\\mode_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\multi_bit_btc_processor.py": {
      "status": "syntax_error",
      "file": "core\\multi_bit_btc_processor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ncco_manager.py": {
      "status": "syntax_error",
      "file": "core\\ncco_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\news_api_endpoints.py": {
      "file": "core\\news_api_endpoints.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\news_intelligence_engine.py": {
      "file": "core\\news_intelligence_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\news_lantern_integration_api.py": {
      "file": "core\\news_lantern_integration_api.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\news_lantern_mathematical_integration.py": {
      "file": "core\\news_lantern_mathematical_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\news_profit_api_endpoints.py": {
      "file": "core\\news_profit_api_endpoints.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\news_profit_mathematical_bridge.py": {
      "file": "core\\news_profit_mathematical_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\news_quant_field.py": {
      "status": "syntax_error",
      "file": "core\\news_quant_field.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\news_sentiment_interpreter.py": {
      "status": "syntax_error",
      "file": "core\\news_sentiment_interpreter.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\observer_solution.py": {
      "status": "syntax_error",
      "file": "core\\observer_solution.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ops_observability.py": {
      "status": "syntax_error",
      "file": "core\\ops_observability.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\optimization_engine.py": {
      "status": "syntax_error",
      "file": "core\\optimization_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\optimized_constants_wrapper.py": {
      "file": "core\\optimized_constants_wrapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\orbital_profit_navigator.py": {
      "file": "core\\orbital_profit_navigator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\oscillator_fallback.py": {
      "status": "syntax_error",
      "file": "core\\oscillator_fallback.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\pattern_match_display.py": {
      "file": "core\\pattern_match_display.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\pattern_utils.py": {
      "file": "core\\pattern_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\performance_monitor.py": {
      "file": "core\\performance_monitor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "numpy"
      ]
    },
    "core\\persistent_state_manager.py": {
      "status": "syntax_error",
      "file": "core\\persistent_state_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phantom_entry_logic.py": {
      "status": "syntax_error",
      "file": "core\\phantom_entry_logic.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phantom_exit_logic.py": {
      "status": "syntax_error",
      "file": "core\\phantom_exit_logic.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phantom_lag_model.py": {
      "status": "syntax_error",
      "file": "core\\phantom_lag_model.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phantom_memory.py": {
      "status": "syntax_error",
      "file": "core\\phantom_memory.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phantom_price_vector_synchronizer.py": {
      "status": "syntax_error",
      "file": "core\\phantom_price_vector_synchronizer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phantom_profit_tracker.py": {
      "status": "syntax_error",
      "file": "core\\phantom_profit_tracker.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phase_entropy_matcher.py": {
      "status": "syntax_error",
      "file": "core\\phase_entropy_matcher.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phase_gate_controller.py": {
      "file": "core\\phase_gate_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\phase_handler.py": {
      "file": "core\\phase_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\pipeline_management_system.py": {
      "file": "core\\pipeline_management_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\plot_sign_engine.py": {
      "file": "core\\plot_sign_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\pod_management.py": {
      "file": "core\\pod_management.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\pool_volume_translator.py": {
      "status": "syntax_error",
      "file": "core\\pool_volume_translator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\portfolio_router.py": {
      "status": "syntax_error",
      "file": "core\\portfolio_router.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\portfolio_substitution_matrix.py": {
      "status": "syntax_error",
      "file": "core\\portfolio_substitution_matrix.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\post_failure_recovery_intelligence_loop.py": {
      "status": "syntax_error",
      "file": "core\\post_failure_recovery_intelligence_loop.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\practical_visual_controller.py": {
      "file": "core\\practical_visual_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\precision_performance.py": {
      "status": "syntax_error",
      "file": "core\\precision_performance.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\profit_bridge_orchestrator.py": {
      "status": "syntax_error",
      "file": "core\\profit_bridge_orchestrator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\profit_cycle_allocator.py": {
      "status": "syntax_error",
      "file": "core\\profit_cycle_allocator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\profit_echo_velocity_driver.py": {
      "status": "syntax_error",
      "file": "core\\profit_echo_velocity_driver.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\profit_feedback_loop.py": {
      "status": "syntax_error",
      "file": "core\\profit_feedback_loop.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\profit_navigation_engine.py": {
      "status": "syntax_error",
      "file": "core\\profit_navigation_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\profit_navigator.py": {
      "file": "core\\profit_navigator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\profit_projection.py": {
      "file": "core\\profit_projection.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\profit_protection.py": {
      "file": "core\\profit_protection.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\profit_router.py": {
      "status": "syntax_error",
      "file": "core\\profit_router.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\profit_routing_engine.py": {
      "status": "syntax_error",
      "file": "core\\profit_routing_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\profit_sweep_allocator.py": {
      "file": "core\\profit_sweep_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\profit_tensor.py": {
      "file": "core\\profit_tensor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\profit_trajectory_coprocessor.py": {
      "file": "core\\profit_trajectory_coprocessor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\profit_vector_reconciler.py": {
      "status": "syntax_error",
      "file": "core\\profit_vector_reconciler.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\prophet_connector.py": {
      "status": "syntax_error",
      "file": "core\\prophet_connector.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\psi_cache.py": {
      "file": "core\\psi_cache.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\quantization_profile.py": {
      "file": "core\\quantization_profile.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\quantum_antipole_engine.py": {
      "file": "core\\quantum_antipole_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\quantum_btc_intelligence_core.py": {
      "status": "syntax_error",
      "file": "core\\quantum_btc_intelligence_core.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\quantum_cellular_risk_monitor.py": {
      "file": "core\\quantum_cellular_risk_monitor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\quantum_drift_shell_engine.py": {
      "status": "syntax_error",
      "file": "core\\quantum_drift_shell_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\quantum_mathematical_pathway_validator.py": {
      "file": "core\\quantum_mathematical_pathway_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\react_dashboard_integration.py": {
      "file": "core\\react_dashboard_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\real_trading_integration.py": {
      "status": "syntax_error",
      "file": "core\\real_trading_integration.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\recursive_profit.py": {
      "file": "core\\recursive_profit.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\recursive_strategy_router.py": {
      "status": "syntax_error",
      "file": "core\\recursive_strategy_router.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\regulatory_compliance.py": {
      "status": "syntax_error",
      "file": "core\\regulatory_compliance.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\render_math_utils.py": {
      "file": "core\\render_math_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\resonance_gate_logic.py": {
      "status": "syntax_error",
      "file": "core\\resonance_gate_logic.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\resource_sequencer.py": {
      "file": "core\\resource_sequencer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\riddle_gemm.py": {
      "status": "syntax_error",
      "file": "core\\riddle_gemm.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\risk_engine.py": {
      "file": "core\\risk_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\risk_guard.py": {
      "status": "syntax_error",
      "file": "core\\risk_guard.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\risk_indexer.py": {
      "file": "core\\risk_indexer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\risk_manager.py": {
      "status": "syntax_error",
      "file": "core\\risk_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\risk_monitor.py": {
      "status": "syntax_error",
      "file": "core\\risk_monitor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\rittle_gemm.py": {
      "status": "syntax_error",
      "file": "core\\rittle_gemm.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\route_verification_classifier.py": {
      "status": "syntax_error",
      "file": "core\\route_verification_classifier.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\schwabot_dashboard.py": {
      "file": "core\\schwabot_dashboard.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\schwabot_integration_orchestrator.py": {
      "status": "syntax_error",
      "file": "core\\schwabot_integration_orchestrator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\schwabot_unified_interface_system.py": {
      "status": "syntax_error",
      "file": "core\\schwabot_unified_interface_system.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\schwafit_core.py": {
      "file": "core\\schwafit_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\secure_api_manager.py": {
      "status": "syntax_error",
      "file": "core\\secure_api_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\sequencer_engine.py": {
      "file": "core\\sequencer_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\settings_controller.py": {
      "status": "syntax_error",
      "file": "core\\settings_controller.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\settings_manager.py": {
      "status": "syntax_error",
      "file": "core\\settings_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\sfsss_router.py": {
      "file": "core\\sfsss_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\sfsss_strategy_bundler.py": {
      "file": "core\\sfsss_strategy_bundler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\shell_memory_evolution_fixes.py": {
      "file": "core\\shell_memory_evolution_fixes.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\shell_portal_mapper.py": {
      "file": "core\\shell_portal_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\shift_profit_engine.py": {
      "file": "core\\shift_profit_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\simple_import_test.py": {
      "status": "syntax_error",
      "file": "core\\simple_import_test.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\simplified_api.py": {
      "file": "core\\simplified_api.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\simplified_btc_integration.py": {
      "status": "syntax_error",
      "file": "core\\simplified_btc_integration.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\simulate_trade.py": {
      "status": "syntax_error",
      "file": "core\\simulate_trade.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\snapshot_logger.py": {
      "file": "core\\snapshot_logger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\spectral_state.py": {
      "file": "core\\spectral_state.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\spectral_transform.py": {
      "status": "syntax_error",
      "file": "core\\spectral_transform.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\state_tracker.py": {
      "status": "syntax_error",
      "file": "core\\state_tracker.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\state_validation_router.py": {
      "status": "syntax_error",
      "file": "core\\state_validation_router.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\strange_loop_detector.py": {
      "file": "core\\strange_loop_detector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\strategic_dormancy.py": {
      "file": "core\\strategic_dormancy.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\strategy_config.py": {
      "file": "core\\strategy_config.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\strategy_entropy_switcher.py": {
      "status": "syntax_error",
      "file": "core\\strategy_entropy_switcher.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\strategy_execution_mapper.py": {
      "file": "core\\strategy_execution_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\strategy_loader.py": {
      "status": "syntax_error",
      "file": "core\\strategy_loader.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\strategy_logic.py": {
      "status": "syntax_error",
      "file": "core\\strategy_logic.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\strategy_loop_executor.py": {
      "file": "core\\strategy_loop_executor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\strategy_manager.py": {
      "status": "syntax_error",
      "file": "core\\strategy_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\strategy_mapper.py": {
      "status": "syntax_error",
      "file": "core\\strategy_mapper.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\strategy_sustainment_validator.py": {
      "file": "core\\strategy_sustainment_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\sustainment_gan_integration_demo.py": {
      "file": "core\\sustainment_gan_integration_demo.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\sustainment_integration_hooks.py": {
      "file": "core\\sustainment_integration_hooks.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\sustainment_principles.py": {
      "file": "core\\sustainment_principles.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\sustainment_underlay_controller.py": {
      "file": "core\\sustainment_underlay_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\systematic_binding_fixer.py": {
      "status": "syntax_error",
      "file": "core\\systematic_binding_fixer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\system_api_server.py": {
      "status": "syntax_error",
      "file": "core\\system_api_server.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\system_clock_sequencer.py": {
      "file": "core\\system_clock_sequencer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\system_constants.py": {
      "file": "core\\system_constants.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\system_constants_example.py": {
      "file": "core\\system_constants_example.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\system_integration_orchestrator.py": {
      "status": "syntax_error",
      "file": "core\\system_integration_orchestrator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\system_monitor.py": {
      "status": "syntax_error",
      "file": "core\\system_monitor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\system_orchestrator.py": {
      "file": "core\\system_orchestrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\temporal_execution_correction_layer.py": {
      "status": "syntax_error",
      "file": "core\\temporal_execution_correction_layer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\tensor_harness_matrix.py": {
      "status": "syntax_error",
      "file": "core\\tensor_harness_matrix.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\tensor_matcher.py": {
      "status": "syntax_error",
      "file": "core\\tensor_matcher.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\tensor_path_router.py": {
      "status": "syntax_error",
      "file": "core\\tensor_path_router.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\tensor_router.py": {
      "status": "syntax_error",
      "file": "core\\tensor_router.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\tensor_score_utils.py": {
      "status": "syntax_error",
      "file": "core\\tensor_score_utils.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\tensor_visualization_controller.py": {
      "file": "core\\tensor_visualization_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tesseract_processor.py": {
      "file": "core\\tesseract_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tesseract_visualizer.py": {
      "file": "core\\tesseract_visualizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\test_complete_system_functionality.py": {
      "file": "core\\test_complete_system_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\test_distributed_system.py": {
      "status": "syntax_error",
      "file": "core\\test_distributed_system.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\test_enhanced_fractal_functionality.py": {
      "file": "core\\test_enhanced_fractal_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\test_enhanced_systems_functionality.py": {
      "file": "core\\test_enhanced_systems_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\test_integration.py": {
      "status": "syntax_error",
      "file": "core\\test_integration.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\test_medium_risk_phase_ii.py": {
      "status": "syntax_error",
      "file": "core\\test_medium_risk_phase_ii.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\test_recursive_profit_engine_functionality.py": {
      "file": "core\\test_recursive_profit_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\test_simple_enhanced_functionality.py": {
      "file": "core\\test_simple_enhanced_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\thermal_boundary_manager.py": {
      "status": "syntax_error",
      "file": "core\\thermal_boundary_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\thermal_integration_demo.py": {
      "file": "core\\thermal_integration_demo.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\thermal_map_allocator.py": {
      "status": "syntax_error",
      "file": "core\\thermal_map_allocator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\thermal_performance_tracker.py": {
      "file": "core\\thermal_performance_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\thermal_shift.py": {
      "status": "syntax_error",
      "file": "core\\thermal_shift.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\thermal_system_integration.py": {
      "file": "core\\thermal_system_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\thermal_visual_integration.py": {
      "file": "core\\thermal_visual_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\thermal_zone_manager.py": {
      "status": "syntax_error",
      "file": "core\\thermal_zone_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\thermal_zone_manager_mock.py": {
      "file": "core\\thermal_zone_manager_mock.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tick_backlog_router.py": {
      "status": "syntax_error",
      "file": "core\\tick_backlog_router.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\tick_cycle_validator.py": {
      "status": "syntax_error",
      "file": "core\\tick_cycle_validator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\tick_feed_harness.py": {
      "status": "syntax_error",
      "file": "core\\tick_feed_harness.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\tick_hash_interpreter.py": {
      "status": "syntax_error",
      "file": "core\\tick_hash_interpreter.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\tick_hash_processor.py": {
      "status": "syntax_error",
      "file": "core\\tick_hash_processor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\tick_management_system.py": {
      "file": "core\\tick_management_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tick_processor.py": {
      "status": "syntax_error",
      "file": "core\\tick_processor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\tick_resonance_engine.py": {
      "status": "syntax_error",
      "file": "core\\tick_resonance_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\time_entropy_edge_case.py": {
      "file": "core\\time_entropy_edge_case.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\timing_manager.py": {
      "file": "core\\timing_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\todo_validation_fixes.py": {
      "status": "syntax_error",
      "file": "core\\todo_validation_fixes.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\trade_executor.py": {
      "status": "syntax_error",
      "file": "core\\trade_executor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\trade_tensor_router.py": {
      "file": "core\\trade_tensor_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\trajectory_sphere.py": {
      "status": "syntax_error",
      "file": "core\\trajectory_sphere.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\triplet_matcher.py": {
      "status": "syntax_error",
      "file": "core\\triplet_matcher.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\type_binding_system.py": {
      "status": "syntax_error",
      "file": "core\\type_binding_system.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\type_defs.py": {
      "status": "syntax_error",
      "file": "core\\type_defs.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\type_enforcer.py": {
      "status": "syntax_error",
      "file": "core\\type_enforcer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\type_patterns.py": {
      "file": "core\\type_patterns.py",
      "status": "empty",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": []
    },
    "core\\typing_schemas.py": {
      "status": "syntax_error",
      "file": "core\\typing_schemas.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ufs_echo_logger.py": {
      "file": "core\\ufs_echo_logger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\ufs_registry.py": {
      "file": "core\\ufs_registry.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\ui_bridge_integration_manager.py": {
      "status": "syntax_error",
      "file": "core\\ui_bridge_integration_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ui_integration_bridge.py": {
      "status": "syntax_error",
      "file": "core\\ui_integration_bridge.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ui_state_bridge.py": {
      "status": "syntax_error",
      "file": "core\\ui_state_bridge.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ump_pipeline.py": {
      "file": "core\\ump_pipeline.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\unified_api_coordinator.py": {
      "status": "syntax_error",
      "file": "core\\unified_api_coordinator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\unified_confidence_matrix.py": {
      "status": "syntax_error",
      "file": "core\\unified_confidence_matrix.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\unified_integration_layer.py": {
      "status": "syntax_error",
      "file": "core\\unified_integration_layer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\unified_mathematical_trading_controller.py": {
      "status": "syntax_error",
      "file": "core\\unified_mathematical_trading_controller.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\unified_mathematics_config.py": {
      "status": "syntax_error",
      "file": "core\\unified_mathematics_config.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\unified_math_system.py": {
      "status": "syntax_error",
      "file": "core\\unified_math_system.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\unified_observability_tensor.py": {
      "file": "core\\unified_observability_tensor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\unified_schwabot_integration.py": {
      "status": "syntax_error",
      "file": "core\\unified_schwabot_integration.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\unified_signal_metrics.py": {
      "status": "syntax_error",
      "file": "core\\unified_signal_metrics.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\unified_visual_controller.py": {
      "file": "core\\unified_visual_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\unified_visual_synthesis_controller.py": {
      "file": "core\\unified_visual_synthesis_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\universal_schwabot_client.py": {
      "status": "syntax_error",
      "file": "core\\universal_schwabot_client.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\usdc_position_manager.py": {
      "status": "syntax_error",
      "file": "core\\usdc_position_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\validation_manager.py": {
      "file": "core\\validation_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\vault_balance_regulator.py": {
      "status": "syntax_error",
      "file": "core\\vault_balance_regulator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\vault_router.py": {
      "file": "core\\vault_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\vector_matcher.py": {
      "file": "core\\vector_matcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\vector_state_mapper.py": {
      "status": "syntax_error",
      "file": "core\\vector_state_mapper.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\vector_validator.py": {
      "status": "syntax_error",
      "file": "core\\vector_validator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\vecu_core.py": {
      "status": "syntax_error",
      "file": "core\\vecu_core.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\visual_integration_bridge.py": {
      "status": "syntax_error",
      "file": "core\\visual_integration_bridge.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\voltage_lane_mapper.py": {
      "status": "syntax_error",
      "file": "core\\voltage_lane_mapper.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\volume_tick_router.py": {
      "status": "syntax_error",
      "file": "core\\volume_tick_router.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\wallet_echo_monitor.py": {
      "status": "syntax_error",
      "file": "core\\wallet_echo_monitor.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\wall_builder_anomaly_handler.py": {
      "status": "syntax_error",
      "file": "core\\wall_builder_anomaly_handler.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\zbe_position_tracker.py": {
      "status": "syntax_error",
      "file": "core\\zbe_position_tracker.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\zpe_core.py": {
      "status": "syntax_error",
      "file": "core\\zpe_core.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\zpe_core_matrix.py": {
      "status": "syntax_error",
      "file": "core\\zpe_core_matrix.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\zpe_hybrid_mode_selector.py": {
      "status": "syntax_error",
      "file": "core\\zpe_hybrid_mode_selector.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\zpe_integration.py": {
      "status": "syntax_error",
      "file": "core\\zpe_integration.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\zpe_rotational_engine.py": {
      "status": "syntax_error",
      "file": "core\\zpe_rotational_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\__init__.py": {
      "file": "core\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "core\\antipole\\tesseract_bridge.py": {
      "file": "core\\antipole\\tesseract_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\antipole\\vector.py": {
      "file": "core\\antipole\\vector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\antipole\\zbe_controller.py": {
      "file": "core\\antipole\\zbe_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\antipole\\__init__.py": {
      "file": "core\\antipole\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\config\\api_config.py": {
      "status": "syntax_error",
      "file": "core\\config\\api_config.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\config\\defaults.py": {
      "file": "core\\config\\defaults.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\config\\logging_config.py": {
      "file": "core\\config\\logging_config.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\config\\manager.py": {
      "file": "core\\config\\manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\config\\unifier.py": {
      "file": "core\\config\\unifier.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\config\\validator.py": {
      "file": "core\\config\\validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\config\\__init__.py": {
      "file": "core\\config\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\data\\data_provider.py": {
      "file": "core\\data\\data_provider.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\data\\provider.py": {
      "file": "core\\data\\provider.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\exchange_apis\\base_api.py": {
      "status": "syntax_error",
      "file": "core\\exchange_apis\\base_api.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\exchange_apis\\coinbase_api.py": {
      "status": "syntax_error",
      "file": "core\\exchange_apis\\coinbase_api.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\exchange_apis\\__init__.py": {
      "file": "core\\exchange_apis\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "core\\ghost\\ghost_conditionals.py": {
      "status": "syntax_error",
      "file": "core\\ghost\\ghost_conditionals.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost\\ghost_news_vectorizer.py": {
      "status": "syntax_error",
      "file": "core\\ghost\\ghost_news_vectorizer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost\\ghost_phase_integrator.py": {
      "status": "syntax_error",
      "file": "core\\ghost\\ghost_phase_integrator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\ghost\\__init__.py": {
      "file": "core\\ghost\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "core\\glyph\\conditional_feedback_loop.py": {
      "file": "core\\glyph\\conditional_feedback_loop.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "core\\glyph\\recursive_glyph_mapper.py": {
      "status": "syntax_error",
      "file": "core\\glyph\\recursive_glyph_mapper.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\glyph\\__init__.py": {
      "file": "core\\glyph\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "core\\lantern\\lexicon_engine.py": {
      "file": "core\\lantern\\lexicon_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\lantern\\profit_story_engine.py": {
      "file": "core\\lantern\\profit_story_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\lantern\\story_parser.py": {
      "file": "core\\lantern\\story_parser.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\lantern\\trigger.py": {
      "file": "core\\lantern\\trigger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "core\\lantern\\vector_memory.py": {
      "status": "syntax_error",
      "file": "core\\lantern\\vector_memory.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\lantern\\word_fitness_tracker.py": {
      "file": "core\\lantern\\word_fitness_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\lantern\\__init__.py": {
      "file": "core\\lantern\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "core\\logic\\swap_decision.py": {
      "file": "core\\logic\\swap_decision.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\math\\complete_system_integration_validator.py": {
      "status": "syntax_error",
      "file": "core\\math\\complete_system_integration_validator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\math\\integration_validator.py": {
      "status": "syntax_error",
      "file": "core\\math\\integration_validator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\math\\tensor_algebra.py": {
      "status": "syntax_error",
      "file": "core\\math\\tensor_algebra.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\matrix\\fault_resolver.py": {
      "status": "syntax_error",
      "file": "core\\matrix\\fault_resolver.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\matrix\\strategy_matrix.py": {
      "status": "syntax_error",
      "file": "core\\matrix\\strategy_matrix.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\matrix\\__init__.py": {
      "file": "core\\matrix\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "core\\memory_stack\\ai_command_sequencer.py": {
      "status": "syntax_error",
      "file": "core\\memory_stack\\ai_command_sequencer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\memory_stack\\command_density_analyzer.py": {
      "status": "syntax_error",
      "file": "core\\memory_stack\\command_density_analyzer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\memory_stack\\execution_validator.py": {
      "status": "syntax_error",
      "file": "core\\memory_stack\\execution_validator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\memory_stack\\memory_hash_rotator.py": {
      "status": "syntax_error",
      "file": "core\\memory_stack\\memory_hash_rotator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\memory_stack\\memory_key_allocator.py": {
      "status": "syntax_error",
      "file": "core\\memory_stack\\memory_key_allocator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\memory_stack\\trust_feedback_updater.py": {
      "status": "syntax_error",
      "file": "core\\memory_stack\\trust_feedback_updater.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phantom\\entry_logic.py": {
      "status": "syntax_error",
      "file": "core\\phantom\\entry_logic.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phantom\\exit_logic.py": {
      "status": "syntax_error",
      "file": "core\\phantom\\exit_logic.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phantom\\price_vector_synchronizer.py": {
      "status": "syntax_error",
      "file": "core\\phantom\\price_vector_synchronizer.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phantom\\__init__.py": {
      "file": "core\\phantom\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "core\\phase_engine\\basket_phase_map.py": {
      "status": "syntax_error",
      "file": "core\\phase_engine\\basket_phase_map.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phase_engine\\basket_phase_map_backup.py": {
      "file": "core\\phase_engine\\basket_phase_map_backup.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\phase_engine\\data_provider.py": {
      "file": "core\\phase_engine\\data_provider.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\phase_engine\\phase_loader.py": {
      "status": "syntax_error",
      "file": "core\\phase_engine\\phase_loader.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phase_engine\\phase_logger.py": {
      "status": "syntax_error",
      "file": "core\\phase_engine\\phase_logger.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phase_engine\\phase_map.py": {
      "status": "syntax_error",
      "file": "core\\phase_engine\\phase_map.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phase_engine\\phase_metrics_engine.py": {
      "status": "syntax_error",
      "file": "core\\phase_engine\\phase_metrics_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phase_engine\\sha_mapper.py": {
      "status": "syntax_error",
      "file": "core\\phase_engine\\sha_mapper.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phase_engine\\swap_controller.py": {
      "status": "syntax_error",
      "file": "core\\phase_engine\\swap_controller.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\phase_engine\\__init__.py": {
      "status": "syntax_error",
      "file": "core\\phase_engine\\__init__.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\profit\\cycle_allocator.py": {
      "status": "syntax_error",
      "file": "core\\profit\\cycle_allocator.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\profit\\__init__.py": {
      "file": "core\\profit\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "core\\recursive_engine\\integrator.py": {
      "file": "core\\recursive_engine\\integrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\recursive_engine\\math_functions.py": {
      "file": "core\\recursive_engine\\math_functions.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\recursive_engine\\primary_loop.py": {
      "file": "core\\recursive_engine\\primary_loop.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\recursive_engine\\profit_memory_vault.py": {
      "file": "core\\recursive_engine\\profit_memory_vault.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\recursive_engine\\recursive_strategy_handler.py": {
      "file": "core\\recursive_engine\\recursive_strategy_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\recursive_engine\\signal_processor.py": {
      "file": "core\\recursive_engine\\signal_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\recursive_engine\\vault_reentry_pipeline.py": {
      "file": "core\\recursive_engine\\vault_reentry_pipeline.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\recursive_engine\\__init__.py": {
      "file": "core\\recursive_engine\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\secr\\adaptive_icap.py": {
      "file": "core\\secr\\adaptive_icap.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\secr\\allocator.py": {
      "file": "core\\secr\\allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\secr\\coordinator.py": {
      "file": "core\\secr\\coordinator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\secr\\failure_logger.py": {
      "file": "core\\secr\\failure_logger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\secr\\injector.py": {
      "file": "core\\secr\\injector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\secr\\resolver_matrix.py": {
      "file": "core\\secr\\resolver_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\secr\\watchdog.py": {
      "file": "core\\secr\\watchdog.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\secr\\__init__.py": {
      "file": "core\\secr\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tests\\test_antipole_integration.py": {
      "file": "core\\tests\\test_antipole_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tests\\test_apcf_functionality.py": {
      "file": "core\\tests\\test_apcf_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tests\\test_config_functionality.py": {
      "file": "core\\tests\\test_config_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tests\\test_config_loading_functionality.py": {
      "file": "core\\tests\\test_config_loading_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tests\\test_enhanced_tesseract_processor_functionality.py": {
      "file": "core\\tests\\test_enhanced_tesseract_processor_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tests\\test_gpu_offload_functionality.py": {
      "file": "core\\tests\\test_gpu_offload_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tests\\test_mathlib_functionality.py": {
      "file": "core\\tests\\test_mathlib_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tests\\test_schwafit_core_functionality.py": {
      "file": "core\\tests\\test_schwafit_core_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tests\\test_strategy_loader_functionality.py": {
      "file": "core\\tests\\test_strategy_loader_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tests\\test_zygote_propagation_engine_functionality.py": {
      "file": "core\\tests\\test_zygote_propagation_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\tests\\test_zygot_shell_functionality.py": {
      "file": "core\\tests\\test_zygot_shell_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\trading_models\\containers.py": {
      "status": "syntax_error",
      "file": "core\\trading_models\\containers.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\trading_models\\enums.py": {
      "file": "core\\trading_models\\enums.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "class ",
        "import ",
        "from "
      ]
    },
    "core\\trading_models\\__init__.py": {
      "file": "core\\trading_models\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "core\\utils\\cli_handler.py": {
      "status": "syntax_error",
      "file": "core\\utils\\cli_handler.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\utils\\math_utils.py": {
      "status": "syntax_error",
      "file": "core\\utils\\math_utils.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\utils\\rate_limiter.py": {
      "status": "syntax_error",
      "file": "core\\utils\\rate_limiter.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\utils\\windows_cli_compatibility.py": {
      "status": "syntax_error",
      "file": "core\\utils\\windows_cli_compatibility.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\utils\\yaml_config_loader.py": {
      "status": "syntax_error",
      "file": "core\\utils\\yaml_config_loader.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\utils\\__init__.py": {
      "status": "syntax_error",
      "file": "core\\utils\\__init__.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\config\\tesseract\\config_loader.py": {
      "file": "core\\config\\tesseract\\config_loader.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "core\\math\\tensor_algebra\\entropy_engine.py": {
      "status": "syntax_error",
      "file": "core\\math\\tensor_algebra\\entropy_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\math\\tensor_algebra\\profit_engine.py": {
      "status": "syntax_error",
      "file": "core\\math\\tensor_algebra\\profit_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\math\\tensor_algebra\\tensor_engine.py": {
      "status": "syntax_error",
      "file": "core\\math\\tensor_algebra\\tensor_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\math\\tensor_algebra\\unified_tensor_algebra.py": {
      "status": "syntax_error",
      "file": "core\\math\\tensor_algebra\\unified_tensor_algebra.py",
      "error": "Syntax error - cannot parse"
    },
    "core\\math\\tensor_algebra\\__init__.py": {
      "status": "syntax_error",
      "file": "core\\math\\tensor_algebra\\__init__.py",
      "error": "Syntax error - cannot parse"
    },
    "count_real_errors.py": {
      "status": "syntax_error",
      "file": "count_real_errors.py",
      "error": "Syntax error - cannot parse"
    },
    "debug_imports.py": {
      "file": "debug_imports.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "demo_cli_compatibility.py": {
      "file": "demo_cli_compatibility.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "if __name__"
      ]
    },
    "demo_complete_practical_system.py": {
      "status": "syntax_error",
      "file": "demo_complete_practical_system.py",
      "error": "Syntax error - cannot parse"
    },
    "enhanced_fitness_oracle.py": {
      "file": "enhanced_fitness_oracle.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "placeholder",
        "dummy"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "enhanced_phase_risk_manager.py": {
      "file": "enhanced_phase_risk_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "filter_real_errors.py": {
      "file": "filter_real_errors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "fix_all_stub_syntax_errors.py": {
      "file": "fix_all_stub_syntax_errors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "fix_common_errors.py": {
      "file": "fix_common_errors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "fix_core_e999_errors.py": {
      "file": "fix_core_e999_errors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "fix_core_final_syntax.py": {
      "file": "fix_core_final_syntax.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "return ",
        "if __name__"
      ]
    },
    "fix_core_flake8.py": {
      "status": "syntax_error",
      "file": "fix_core_flake8.py",
      "error": "Syntax error - cannot parse"
    },
    "fix_core_indentation_final.py": {
      "file": "fix_core_indentation_final.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "return ",
        "if __name__"
      ]
    },
    "fix_core_init_comprehensive.py": {
      "file": "fix_core_init_comprehensive.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "if __name__"
      ]
    },
    "fix_core_syntax_errors.py": {
      "file": "fix_core_syntax_errors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "flask",
        "ccxt"
      ]
    },
    "fix_critical_errors.py": {
      "file": "fix_critical_errors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "placeholder"
      ],
      "error_indicators": [
        "ImportError",
        "SyntaxError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "fix_e128_precise.py": {
      "file": "fix_e128_precise.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__"
      ]
    },
    "fix_e305_blank_lines.py": {
      "file": "fix_e305_blank_lines.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "fix_e999_critical_syntax.py": {
      "file": "fix_e999_critical_syntax.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "fix_e999_final.py": {
      "file": "fix_e999_final.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "if __name__",
        "main()"
      ]
    },
    "fix_e999_line_by_line.py": {
      "file": "fix_e999_line_by_line.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "fix_e999_precise.py": {
      "file": "fix_e999_precise.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "fix_f811_redefinitions.py": {
      "file": "fix_f811_redefinitions.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "fix_f821_undefined_names.py": {
      "file": "fix_f821_undefined_names.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "numpy"
      ]
    },
    "fix_final_tools_errors.py": {
      "file": "fix_final_tools_errors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "if __name__"
      ]
    },
    "fix_flake8_comprehensive.py": {
      "status": "syntax_error",
      "file": "fix_flake8_comprehensive.py",
      "error": "Syntax error - cannot parse"
    },
    "fix_future_annotations_placement.py": {
      "status": "syntax_error",
      "file": "fix_future_annotations_placement.py",
      "error": "Syntax error - cannot parse"
    },
    "fix_hash_vectors.py": {
      "file": "fix_hash_vectors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "if __name__"
      ]
    },
    "fix_import_after_try_pattern.py": {
      "file": "fix_import_after_try_pattern.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "fix_import_paths.py": {
      "file": "fix_import_paths.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "fix_indentation.py": {
      "file": "fix_indentation.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "if __name__"
      ]
    },
    "fix_remaining_critical_errors.py": {
      "file": "fix_remaining_critical_errors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError",
        "SyntaxError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "fix_remaining_e999_errors.py": {
      "file": "fix_remaining_e999_errors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "fix_remaining_syntax_errors.py": {
      "file": "fix_remaining_syntax_errors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "fix_systematic_errors.py": {
      "file": "fix_systematic_errors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "fix_tools_errors.py": {
      "file": "fix_tools_errors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "if __name__"
      ]
    },
    "fix_uros_indentation.py": {
      "file": "fix_uros_indentation.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "if __name__"
      ]
    },
    "fractal_command_dispatcher.py": {
      "file": "fractal_command_dispatcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "fractal_containment_lock.py": {
      "file": "fractal_containment_lock.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "ghost_strategy_integration_demo.py": {
      "file": "ghost_strategy_integration_demo.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "hash_trigger_system_summary.py": {
      "file": "hash_trigger_system_summary.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "installer.py": {
      "status": "syntax_error",
      "file": "installer.py",
      "error": "Syntax error - cannot parse"
    },
    "integrate_enhanced_phase_risk.py": {
      "file": "integrate_enhanced_phase_risk.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "launch_comprehensive_architecture_fix.py": {
      "file": "launch_comprehensive_architecture_fix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "master_syntax_fixer.py": {
      "file": "master_syntax_fixer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "pipeline_integration_manager.py": {
      "file": "pipeline_integration_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "quantum_drift_shell_engine.py": {
      "file": "quantum_drift_shell_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "refactor_cli_output.py": {
      "file": "refactor_cli_output.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "run_schwabot.py": {
      "file": "run_schwabot.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "run_type_enforcer.py": {
      "file": "run_type_enforcer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "schwabot\\instruction_listener.py": {
      "file": "schwabot\\instruction_listener.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\main.py": {
      "status": "syntax_error",
      "file": "schwabot\\main.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\ufs_app.py": {
      "file": "schwabot\\ufs_app.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\__init__.py": {
      "status": "syntax_error",
      "file": "schwabot\\__init__.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\ai_oracles\\fitness_oracle.py": {
      "file": "schwabot\\ai_oracles\\fitness_oracle.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\ai_oracles\\profit_oracle.py": {
      "status": "syntax_error",
      "file": "schwabot\\ai_oracles\\profit_oracle.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\ai_oracles\\reigime_oracle.py": {
      "file": "schwabot\\ai_oracles\\reigime_oracle.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\access_controller.py": {
      "file": "schwabot\\core\\access_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\access_validator.py": {
      "file": "schwabot\\core\\access_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\action_selector.py": {
      "file": "schwabot\\core\\action_selector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\adapter_manager.py": {
      "file": "schwabot\\core\\adapter_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\adaptive_trainer.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\adaptive_trainer.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\aleph_unitizer.py": {
      "file": "schwabot\\core\\aleph_unitizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\alert_dispatcher.py": {
      "file": "schwabot\\core\\alert_dispatcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\alert_manager.py": {
      "file": "schwabot\\core\\alert_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\algorithm_optimizer.py": {
      "file": "schwabot\\core\\algorithm_optimizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\analysis_engine.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\analysis_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\api_documenter.py": {
      "file": "schwabot\\core\\api_documenter.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\api_integrator.py": {
      "file": "schwabot\\core\\api_integrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\archive_creator.py": {
      "file": "schwabot\\core\\archive_creator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\archive_extractor.py": {
      "file": "schwabot\\core\\archive_extractor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\archive_manager.py": {
      "file": "schwabot\\core\\archive_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\archive_validator.py": {
      "file": "schwabot\\core\\archive_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\audit_logger.py": {
      "file": "schwabot\\core\\audit_logger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\audit_manager.py": {
      "file": "schwabot\\core\\audit_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\audit_reporter.py": {
      "file": "schwabot\\core\\audit_reporter.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\audit_trail.py": {
      "file": "schwabot\\core\\audit_trail.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\authorization_manager.py": {
      "file": "schwabot\\core\\authorization_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\auth_manager.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\auth_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\backup_creator.py": {
      "file": "schwabot\\core\\backup_creator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\backup_manager.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\backup_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\backup_restorer.py": {
      "file": "schwabot\\core\\backup_restorer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\backup_validator.py": {
      "file": "schwabot\\core\\backup_validator.py",
      "status": "empty",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": []
    },
    "schwabot\\core\\bootstrap.py": {
      "file": "schwabot\\core\\bootstrap.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\btc_tick_matrix_initializer.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\btc_tick_matrix_initializer.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\cache_invalidator.py": {
      "file": "schwabot\\core\\cache_invalidator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\cache_manager.py": {
      "file": "schwabot\\core\\cache_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\cache_optimizer.py": {
      "file": "schwabot\\core\\cache_optimizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\cache_store.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\cache_store.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\choice_optimizer.py": {
      "file": "schwabot\\core\\choice_optimizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\chunk_mapper.py": {
      "file": "schwabot\\core\\chunk_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\chunk_router.py": {
      "file": "schwabot\\core\\chunk_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\cleanup_handler.py": {
      "file": "schwabot\\core\\cleanup_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\cli_matrix_visualizer.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\cli_matrix_visualizer.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\common.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\common.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\communication_handler.py": {
      "file": "schwabot\\core\\communication_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\complexity_analyzer.py": {
      "file": "schwabot\\core\\complexity_analyzer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\complex_number_handler.py": {
      "file": "schwabot\\core\\complex_number_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\compliance_monitor.py": {
      "file": "schwabot\\core\\compliance_monitor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\component_connector.py": {
      "file": "schwabot\\core\\component_connector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\config.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\config.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\config_manager.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\config_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\connection_manager.py": {
      "file": "schwabot\\core\\connection_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\connection_pool.py": {
      "file": "schwabot\\core\\connection_pool.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\consistency_checker.py": {
      "file": "schwabot\\core\\consistency_checker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\constants.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\constants.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\context_retriever.py": {
      "file": "schwabot\\core\\context_retriever.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\convergence_analyzer.py": {
      "file": "schwabot\\core\\convergence_analyzer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\correlation_finder.py": {
      "file": "schwabot\\core\\correlation_finder.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\cron_handler.py": {
      "file": "schwabot\\core\\cron_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\database_manager.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\database_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\data_aggregator.py": {
      "file": "schwabot\\core\\data_aggregator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\data_exporter.py": {
      "file": "schwabot\\core\\data_exporter.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\data_importer.py": {
      "file": "schwabot\\core\\data_importer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\data_migrator.py": {
      "file": "schwabot\\core\\data_migrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\data_processor.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\data_processor.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\data_transformer.py": {
      "file": "schwabot\\core\\data_transformer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\data_validator.py": {
      "file": "schwabot\\core\\data_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\decision_engine.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\decision_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\demo_backtrace_pipeline.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\demo_backtrace_pipeline.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\diagnostics_manager.py": {
      "file": "schwabot\\core\\diagnostics_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\disaster_recovery.py": {
      "file": "schwabot\\core\\disaster_recovery.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\dlt_waveform_engine.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\dlt_waveform_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\doc_generator.py": {
      "file": "schwabot\\core\\doc_generator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\drem_controller.py": {
      "file": "schwabot\\core\\drem_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\drem_router.py": {
      "file": "schwabot\\core\\drem_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\drem_strategy.py": {
      "file": "schwabot\\core\\drem_strategy.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\edos_processor.py": {
      "file": "schwabot\\core\\edos_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\efficiency_calculator.py": {
      "file": "schwabot\\core\\efficiency_calculator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\email_sender.py": {
      "file": "schwabot\\core\\email_sender.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\empty.py": {
      "file": "schwabot\\core\\empty.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\encryption_handler.py": {
      "file": "schwabot\\core\\encryption_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\enhanced_tesseract_processor.py": {
      "file": "schwabot\\core\\enhanced_tesseract_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\entropy_calculator.py": {
      "file": "schwabot\\core\\entropy_calculator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\environment_setup.py": {
      "file": "schwabot\\core\\environment_setup.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\event_logger.py": {
      "file": "schwabot\\core\\event_logger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\example_creator.py": {
      "file": "schwabot\\core\\example_creator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\experience_storer.py": {
      "file": "schwabot\\core\\experience_storer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\experimental.py": {
      "file": "schwabot\\core\\experimental.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\export_manager.py": {
      "file": "schwabot\\core\\export_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\extension_interface.py": {
      "file": "schwabot\\core\\extension_interface.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\extension_loader.py": {
      "file": "schwabot\\core\\extension_loader.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\extension_manager.py": {
      "file": "schwabot\\core\\extension_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\extension_registry.py": {
      "file": "schwabot\\core\\extension_registry.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\external_handler.py": {
      "file": "schwabot\\core\\external_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\feedback_processor.py": {
      "file": "schwabot\\core\\feedback_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\fix_critical_issues.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\fix_critical_issues.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\flow_director.py": {
      "file": "schwabot\\core\\flow_director.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\forecast_generator.py": {
      "file": "schwabot\\core\\forecast_generator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\format_adapter.py": {
      "file": "schwabot\\core\\format_adapter.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\fractal_generator.py": {
      "file": "schwabot\\core\\fractal_generator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\gpu_offload_manager.py": {
      "file": "schwabot\\core\\gpu_offload_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\grant_handler.py": {
      "file": "schwabot\\core\\grant_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\health_checker.py": {
      "file": "schwabot\\core\\health_checker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\helpers.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\helpers.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\http_handler.py": {
      "file": "schwabot\\core\\http_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\import_manager.py": {
      "file": "schwabot\\core\\import_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\improvement_analyzer.py": {
      "file": "schwabot\\core\\improvement_analyzer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\initializer.py": {
      "file": "schwabot\\core\\initializer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\integral_calculator.py": {
      "file": "schwabot\\core\\integral_calculator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\integration_manager.py": {
      "file": "schwabot\\core\\integration_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\integrity_verifier.py": {
      "file": "schwabot\\core\\integrity_verifier.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\interface_adapter.py": {
      "file": "schwabot\\core\\interface_adapter.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\interface_manager.py": {
      "file": "schwabot\\core\\interface_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\job_controller.py": {
      "file": "schwabot\\core\\job_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\job_scheduler.py": {
      "file": "schwabot\\core\\job_scheduler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\knowledge_accumulator.py": {
      "file": "schwabot\\core\\knowledge_accumulator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\launcher.py": {
      "file": "schwabot\\core\\launcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\learning_engine.py": {
      "file": "schwabot\\core\\learning_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\legacy_support.py": {
      "file": "schwabot\\core\\legacy_support.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\log_manager.py": {
      "file": "schwabot\\core\\log_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\maintenance_manager.py": {
      "file": "schwabot\\core\\maintenance_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\mathlib.py": {
      "file": "schwabot\\core\\mathlib.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\matrix_synthesizer.py": {
      "file": "schwabot\\core\\matrix_synthesizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\memory_manager.py": {
      "file": "schwabot\\core\\memory_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\message_dispatcher.py": {
      "file": "schwabot\\core\\message_dispatcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\message_processor.py": {
      "file": "schwabot\\core\\message_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\migration_manager.py": {
      "file": "schwabot\\core\\migration_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\migration_validator.py": {
      "file": "schwabot\\core\\migration_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\model_predictor.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\model_predictor.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\module_coordinator.py": {
      "file": "schwabot\\core\\module_coordinator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\monitoring_agent.py": {
      "file": "schwabot\\core\\monitoring_agent.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\multi_bit_btc_processor.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\multi_bit_btc_processor.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\network_manager.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\network_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\nonlinear_optimizer.py": {
      "file": "schwabot\\core\\nonlinear_optimizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\notification_manager.py": {
      "file": "schwabot\\core\\notification_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\optimization_engine.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\optimization_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\optimization_runner.py": {
      "file": "schwabot\\core\\optimization_runner.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\orchestrator.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\orchestrator.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\outcome_estimator.py": {
      "file": "schwabot\\core\\outcome_estimator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\parameter_loader.py": {
      "file": "schwabot\\core\\parameter_loader.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\pattern_recognizer.py": {
      "file": "schwabot\\core\\pattern_recognizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\performance_monitor.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\performance_monitor.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\permission_checker.py": {
      "file": "schwabot\\core\\permission_checker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\permission_validator.py": {
      "file": "schwabot\\core\\permission_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\pipeline_manager.py": {
      "file": "schwabot\\core\\pipeline_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\placeholder.py": {
      "file": "schwabot\\core\\placeholder.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\plugin_interface.py": {
      "file": "schwabot\\core\\plugin_interface.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\plugin_loader.py": {
      "file": "schwabot\\core\\plugin_loader.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\plugin_manager.py": {
      "file": "schwabot\\core\\plugin_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\plugin_registry.py": {
      "file": "schwabot\\core\\plugin_registry.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\post_failure_recovery_intelligence_loop.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\post_failure_recovery_intelligence_loop.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\prediction_engine.py": {
      "file": "schwabot\\core\\prediction_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\process_supervisor.py": {
      "file": "schwabot\\core\\process_supervisor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\profit_routing_engine.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\profit_routing_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\protocol_adapter.py": {
      "file": "schwabot\\core\\protocol_adapter.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\protocol_handler.py": {
      "file": "schwabot\\core\\protocol_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\protocol_manager.py": {
      "file": "schwabot\\core\\protocol_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\quality_assessor.py": {
      "file": "schwabot\\core\\quality_assessor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\quantum_entangler.py": {
      "file": "schwabot\\core\\quantum_entangler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\quantum_mathlib.py": {
      "file": "schwabot\\core\\quantum_mathlib.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\query_executor.py": {
      "file": "schwabot\\core\\query_executor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\qutrit_processor.py": {
      "file": "schwabot\\core\\qutrit_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\recall_optimizer.py": {
      "file": "schwabot\\core\\recall_optimizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\recovery_manager.py": {
      "file": "schwabot\\core\\recovery_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\recursive_market_oracle.py": {
      "file": "schwabot\\core\\recursive_market_oracle.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\report_manager.py": {
      "file": "schwabot\\core\\report_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\request_processor.py": {
      "file": "schwabot\\core\\request_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\response_builder.py": {
      "file": "schwabot\\core\\response_builder.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\response_evaluator.py": {
      "file": "schwabot\\core\\response_evaluator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\rights_manager.py": {
      "file": "schwabot\\core\\rights_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\risk_manager.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\risk_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\role_manager.py": {
      "file": "schwabot\\core\\role_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\scalar_laws.py": {
      "file": "schwabot\\core\\scalar_laws.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\scheduler_manager.py": {
      "file": "schwabot\\core\\scheduler_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\schema_migrator.py": {
      "file": "schwabot\\core\\schema_migrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\schwafit_core.py": {
      "file": "schwabot\\core\\schwafit_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\security_manager.py": {
      "file": "schwabot\\core\\security_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\sequence_manager.py": {
      "file": "schwabot\\core\\sequence_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\service_connector.py": {
      "file": "schwabot\\core\\service_connector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\session_manager.py": {
      "file": "schwabot\\core\\session_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\settings_handler.py": {
      "file": "schwabot\\core\\settings_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\signal_router.py": {
      "file": "schwabot\\core\\signal_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\skill_developer.py": {
      "file": "schwabot\\core\\skill_developer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\socket_handler.py": {
      "file": "schwabot\\core\\socket_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\stage_executor.py": {
      "file": "schwabot\\core\\stage_executor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\startup.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\startup.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\state_recovery.py": {
      "file": "schwabot\\core\\state_recovery.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\statistical_analyzer.py": {
      "file": "schwabot\\core\\statistical_analyzer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\statistics_collector.py": {
      "file": "schwabot\\core\\statistics_collector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\strategy_config.py": {
      "file": "schwabot\\core\\strategy_config.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\strategy_executor.py": {
      "file": "schwabot\\core\\strategy_executor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\strategy_manager.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\strategy_manager.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\summary_generator.py": {
      "file": "schwabot\\core\\summary_generator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\system_analyzer.py": {
      "file": "schwabot\\core\\system_analyzer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\system_integrator.py": {
      "file": "schwabot\\core\\system_integrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\system_restorer.py": {
      "file": "schwabot\\core\\system_restorer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\task_dispatcher.py": {
      "file": "schwabot\\core\\task_dispatcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\task_scheduler.py": {
      "file": "schwabot\\core\\task_scheduler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\temporal_execution_correction_layer.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\temporal_execution_correction_layer.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\tensor_manipulator.py": {
      "file": "schwabot\\core\\tensor_manipulator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\test_fixtures.py": {
      "file": "schwabot\\core\\test_fixtures.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\test_runner.py": {
      "file": "schwabot\\core\\test_runner.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\test_suite.py": {
      "file": "schwabot\\core\\test_suite.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\test_utilities.py": {
      "file": "schwabot\\core\\test_utilities.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\token_handler.py": {
      "file": "schwabot\\core\\token_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\topology_analyzer.py": {
      "file": "schwabot\\core\\topology_analyzer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\transaction_handler.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\transaction_handler.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\trend_analyzer.py": {
      "file": "schwabot\\core\\trend_analyzer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\tutorial_builder.py": {
      "file": "schwabot\\core\\tutorial_builder.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\user_authenticator.py": {
      "file": "schwabot\\core\\user_authenticator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\utilities.py": {
      "status": "syntax_error",
      "file": "schwabot\\core\\utilities.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\validation_engine.py": {
      "file": "schwabot\\core\\validation_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\vector_space_analyzer.py": {
      "file": "schwabot\\core\\vector_space_analyzer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\visualization.py": {
      "file": "schwabot\\core\\visualization.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\visual_reporter.py": {
      "file": "schwabot\\core\\visual_reporter.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\web_server.py": {
      "file": "schwabot\\core\\web_server.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\__init__.py": {
      "file": "schwabot\\core\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\mathlib\\line_render_engine.py": {
      "status": "syntax_error",
      "file": "schwabot\\mathlib\\line_render_engine.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\mathlib\\matrix_fault_resolver.py": {
      "status": "syntax_error",
      "file": "schwabot\\mathlib\\matrix_fault_resolver.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\tools\\fix_w292_stubs.py": {
      "status": "syntax_error",
      "file": "schwabot\\tools\\fix_w292_stubs.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\core\\config\\defaults.py": {
      "file": "schwabot\\core\\config\\defaults.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\config\\__init__.py": {
      "file": "schwabot\\core\\config\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\core\\tests\\test_schwafit_core_functionality.py": {
      "file": "schwabot\\core\\tests\\test_schwafit_core_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\init\\omni_shell\\lotus_mesh_diagram.py": {
      "status": "syntax_error",
      "file": "schwabot\\init\\omni_shell\\lotus_mesh_diagram.py",
      "error": "Syntax error - cannot parse"
    },
    "schwabot\\init\\omni_shell\\lotus_omni_mesh.py": {
      "file": "schwabot\\init\\omni_shell\\lotus_omni_mesh.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\init\\omni_shell\\lotus_tick_hash_feed.py": {
      "file": "schwabot\\init\\omni_shell\\lotus_tick_hash_feed.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\init\\omni_shell\\main_event_loop.py": {
      "file": "schwabot\\init\\omni_shell\\main_event_loop.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot\\init\\omni_shell\\mesh_to_shell_sync.py": {
      "file": "schwabot\\init\\omni_shell\\mesh_to_shell_sync.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "schwabot_integration.py": {
      "file": "schwabot_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "schwabot_system_init.py": {
      "file": "schwabot_system_init.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "schwabot_unified_system.py": {
      "file": "schwabot_unified_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "selective_syntax_fixer.py": {
      "file": "selective_syntax_fixer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "setup.py": {
      "file": "setup.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "simple_cli_refactor.py": {
      "file": "simple_cli_refactor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "simple_stub_fixer.py": {
      "file": "simple_stub_fixer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "system_validation.py": {
      "file": "system_validation.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "system_validation_comprehensive.py": {
      "file": "system_validation_comprehensive.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError",
        "SyntaxError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests",
        "numpy"
      ]
    },
    "targeted_stub_fixer.py": {
      "file": "targeted_stub_fixer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "ccxt"
      ]
    },
    "time_lattice_fork.py": {
      "file": "time_lattice_fork.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "validate_components.py": {
      "file": "validate_components.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "visual_fallbacks.py": {
      "file": "visual_fallbacks.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "execute_mathematical_cleanup.py": {
      "file": "execute_mathematical_cleanup.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "fix_mathlib_syntax.py": {
      "file": "fix_mathlib_syntax.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "if __name__"
      ]
    },
    "mathlib\\matrix_fault_resolver.py": {
      "file": "mathlib\\matrix_fault_resolver.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "mathlib\\memkey_sync.py": {
      "file": "mathlib\\memkey_sync.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "mathlib\\persistent_homology.py": {
      "file": "mathlib\\persistent_homology.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "mathlib\\quantum_strategy.py": {
      "file": "mathlib\\quantum_strategy.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "mathlib\\test_dcc_sync_functionality.py": {
      "file": "mathlib\\test_dcc_sync_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "mathlib\\test_gpu_flash_engine_functionality.py": {
      "file": "mathlib\\test_gpu_flash_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "mathlib\\test_hash_intelligence_debug_functionality.py": {
      "file": "mathlib\\test_hash_intelligence_debug_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "mathlib\\test_matrix_fault_resolver_functionality.py": {
      "file": "mathlib\\test_matrix_fault_resolver_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "mathlib\\test_memkey_sync_functionality.py": {
      "file": "mathlib\\test_memkey_sync_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "if __name__",
        "main()"
      ]
    },
    "mathlib\\__init__.py": {
      "file": "mathlib\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass",
        "return 0",
        "return []",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "mathlib.py": {
      "status": "syntax_error",
      "file": "mathlib.py",
      "error": "Syntax error - cannot parse"
    },
    "refactor_math_logic.py": {
      "file": "refactor_math_logic.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "schwabot_unified_math.py": {
      "file": "schwabot_unified_math.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "test_mathematical_integration.py": {
      "file": "test_mathematical_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "test_mathematical_trading_system_integration.py": {
      "file": "test_mathematical_trading_system_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "test_multi_bit_btc_processor.py": {
      "file": "test_multi_bit_btc_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "test_simple_multi_bit_btc.py": {
      "file": "test_simple_multi_bit_btc.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "build_packages.py": {
      "file": "build_packages.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "if __name__",
        "main()"
      ]
    },
    "quick_test.py": {
      "status": "syntax_error",
      "file": "quick_test.py",
      "error": "Syntax error - cannot parse"
    },
    "ui\\schwabot_dashboard.py": {
      "file": "ui\\schwabot_dashboard.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "flask"
      ]
    },
    "utils\\file_integrity_checker.py": {
      "file": "utils\\file_integrity_checker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "utils\\fractal_injection.py": {
      "file": "utils\\fractal_injection.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "utils\\hash_validator.py": {
      "file": "utils\\hash_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "utils\\logging_setup.py": {
      "file": "utils\\logging_setup.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "utils\\safe_print.py": {
      "file": "utils\\safe_print.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "if __name__"
      ]
    },
    "comprehensive_system_test.py": {
      "file": "comprehensive_system_test.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "SyntaxError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests",
        "numpy"
      ]
    },
    "simple_test.py": {
      "file": "simple_test.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "system_integration_test.py": {
      "file": "system_integration_test.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\recursive_awareness_benchmark.py": {
      "file": "tests\\recursive_awareness_benchmark.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\run_missing_definitions_validation.py": {
      "file": "tests\\run_missing_definitions_validation.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_antipole_state_export_validation_verification.py": {
      "file": "tests\\test_antipole_state_export_validation_verification.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_api_price_entry_feedback.py": {
      "file": "tests\\test_api_price_entry_feedback.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "requests",
        "ccxt"
      ]
    },
    "tests\\test_backlog_test_loop_validator.py": {
      "file": "tests\\test_backlog_test_loop_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "tests\\test_basket_phase_map_functionality.py": {
      "file": "tests\\test_basket_phase_map_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_btc_processor_functionality.py": {
      "file": "tests\\test_btc_processor_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ImportError",
        "AttributeError",
        "TypeError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_ccxt_integration.py": {
      "file": "tests\\test_ccxt_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()",
        "ccxt"
      ]
    },
    "tests\\test_cluster_mapper_functionality.py": {
      "file": "tests\\test_cluster_mapper_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_config_loader_cwd_functionality.py": {
      "file": "tests\\test_config_loader_cwd_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_config_loading_functionality.py": {
      "file": "tests\\test_config_loading_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_cooldown_manager_functionality.py": {
      "file": "tests\\test_cooldown_manager_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_core_engines.py": {
      "file": "tests\\test_core_engines.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "if __name__"
      ]
    },
    "tests\\test_dashboard_integration.py": {
      "file": "tests\\test_dashboard_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_dlt_waveform_module_function_validation_verification.py": {
      "file": "tests\\test_dlt_waveform_module_function_validation_verification.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_drift_shell_engine_functionality.py": {
      "file": "tests\\test_drift_shell_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_enhanced_fractal_functionality.py": {
      "file": "tests\\test_enhanced_fractal_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_enhanced_hooks_functionality.py": {
      "file": "tests\\test_enhanced_hooks_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_enhanced_sustainment_framework_functionality.py": {
      "file": "tests\\test_enhanced_sustainment_framework_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_entry_exit_sequence_integrity.py": {
      "file": "tests\\test_entry_exit_sequence_integrity.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "tests\\test_fallback_trade_controller.py": {
      "file": "tests\\test_fallback_trade_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "tests\\test_fault_bus_functionality.py": {
      "file": "tests\\test_fault_bus_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_fractal_config_functionality.py": {
      "file": "tests\\test_fractal_config_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_fractal_integration.py": {
      "file": "tests\\test_fractal_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_fractal_sync.py": {
      "file": "tests\\test_fractal_sync.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "if __name__"
      ]
    },
    "tests\\test_future_corridor_engine_functionality.py": {
      "file": "tests\\test_future_corridor_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_gpu_flash_engine_functionality.py": {
      "file": "tests\\test_gpu_flash_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_gpu_sustainment_operations_validation_verification.py": {
      "file": "tests\\test_gpu_sustainment_operations_validation_verification.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_hash_recollection_functionality.py": {
      "file": "tests\\test_hash_recollection_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_hash_recollection_system_functionality.py": {
      "file": "tests\\test_hash_recollection_system_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_legacy_backlog_hydrator.py": {
      "file": "tests\\test_legacy_backlog_hydrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "tests\\test_lexicon_engine_functionality.py": {
      "file": "tests\\test_lexicon_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_mathematical_implementation_completeness_functionality.py": {
      "file": "tests\\test_mathematical_implementation_completeness_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_mathematical_integration.py": {
      "file": "tests\\test_mathematical_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_mathlib_functionality.py": {
      "file": "tests\\test_mathlib_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_matrix_mapping_validation.py": {
      "file": "tests\\test_matrix_mapping_validation.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "tests\\test_news_intelligence_system_functionality.py": {
      "file": "tests\\test_news_intelligence_system_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_phase_map_entry_and_transition_functionality.py": {
      "file": "tests\\test_phase_map_entry_and_transition_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_phase_metrics_engine_functionality.py": {
      "file": "tests\\test_phase_metrics_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_plot_sign_engine_functionality.py": {
      "file": "tests\\test_plot_sign_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_production_readiness_functionality.py": {
      "file": "tests\\test_production_readiness_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_profit_cycle_navigator_functionality.py": {
      "file": "tests\\test_profit_cycle_navigator_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_profit_routing_engine.py": {
      "file": "tests\\test_profit_routing_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "if __name__"
      ]
    },
    "tests\\test_profit_vector_calibration.py": {
      "file": "tests\\test_profit_vector_calibration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "tests\\test_quantum_visualizer_functionality.py": {
      "file": "tests\\test_quantum_visualizer_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_recursive_profit_functionality.py": {
      "file": "tests\\test_recursive_profit_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_registry.py": {
      "file": "tests\\test_registry.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "tests\\test_resource_sequencer_functionality.py": {
      "file": "tests\\test_resource_sequencer_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_risk_manager_functionality.py": {
      "file": "tests\\test_risk_manager_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_schwabot_integration.py": {
      "file": "tests\\test_schwabot_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_secr_system_functionality.py": {
      "file": "tests\\test_secr_system_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_sfsss_strategy_bundler_functionality.py": {
      "file": "tests\\test_sfsss_strategy_bundler_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_sfs_trigger_positioning.py": {
      "file": "tests\\test_sfs_trigger_positioning.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "tests\\test_shift_profit_engine_functionality.py": {
      "file": "tests\\test_shift_profit_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_strategy_sustainment_validator_functionality.py": {
      "file": "tests\\test_strategy_sustainment_validator_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_sustainment_principles_functionality.py": {
      "file": "tests\\test_sustainment_principles_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_system_validation_framework_verification.py": {
      "file": "tests\\test_system_validation_framework_verification.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_tesseract_visualizer_functionality.py": {
      "file": "tests\\test_tesseract_visualizer_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_tick_hold_logic.py": {
      "file": "tests\\test_tick_hold_logic.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "tests\\test_timing_manager_functionality.py": {
      "file": "tests\\test_timing_manager_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_trade_chain_timeline_replay.py": {
      "file": "tests\\test_trade_chain_timeline_replay.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "tests\\test_ufs_echo_logger_functionality.py": {
      "file": "tests\\test_ufs_echo_logger_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_validate_config_cli_functionality.py": {
      "file": "tests\\test_validate_config_cli_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_vault_router_functionality.py": {
      "file": "tests\\test_vault_router_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_visualization_functionality.py": {
      "file": "tests\\test_visualization_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_visual_core_integration.py": {
      "file": "tests\\test_visual_core_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\test_word_fitness_tracker_functionality.py": {
      "file": "tests\\test_word_fitness_tracker_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "tests\\__init__.py": {
      "file": "tests\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "test_bulletproof_cli_compatibility.py": {
      "file": "test_bulletproof_cli_compatibility.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError",
        "AttributeError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "test_comprehensive_integration.py": {
      "file": "test_comprehensive_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "test_dlt_matrix_profit_integration.py": {
      "file": "test_dlt_matrix_profit_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "test_enhanced_system.py": {
      "file": "test_enhanced_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "test_ghost_standalone.py": {
      "file": "test_ghost_standalone.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "test_hash_registry_integration.py": {
      "file": "test_hash_registry_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "test_hash_trigger_integration.py": {
      "file": "test_hash_trigger_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "test_low_risk_integration.py": {
      "file": "test_low_risk_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "test_medium_risk_phase2.py": {
      "file": "test_medium_risk_phase2.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "test_real_integration.py": {
      "file": "test_real_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "test_simple.py": {
      "file": "test_simple.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "config\\config_utils.py": {
      "file": "config\\config_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "config\\cooldown_config.py": {
      "file": "config\\cooldown_config.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "config\\io_utils.py": {
      "file": "config\\io_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "config\\mathematical_framework_config.py": {
      "file": "config\\mathematical_framework_config.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "config\\matrix_response_schema.py": {
      "file": "config\\matrix_response_schema.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "config\\risk_config.py": {
      "file": "config\\risk_config.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "config\\schwabot_config.py": {
      "file": "config\\schwabot_config.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "config\\__init__.py": {
      "file": "config\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "config\\schemas\\quantization.py": {
      "file": "config\\schemas\\quantization.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "config\\schemas\\__init__.py": {
      "file": "config\\schemas\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "settings\\demo_integration_system.py": {
      "file": "settings\\demo_integration_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "settings\\launch_demo_system.py": {
      "file": "settings\\launch_demo_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "if __name__",
        "main()"
      ]
    },
    "settings\\matrix_allocator.py": {
      "file": "settings\\matrix_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "settings\\settings_controller.py": {
      "file": "settings\\settings_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "settings\\vector_validator.py": {
      "file": "settings\\vector_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "numpy"
      ]
    },
    "agents\\llm_agent.py": {
      "file": "agents\\llm_agent.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "aleph_core\\batch_integration.py": {
      "file": "aleph_core\\batch_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "aleph_core\\detonation_sequencer.py": {
      "file": "aleph_core\\detonation_sequencer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "aleph_core\\entropy_analyzer.py": {
      "file": "aleph_core\\entropy_analyzer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "aleph_core\\paradox_visualizer.py": {
      "file": "aleph_core\\paradox_visualizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "aleph_core\\pattern_matcher.py": {
      "file": "aleph_core\\pattern_matcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "aleph_core\\smart_money_analyzer.py": {
      "file": "aleph_core\\smart_money_analyzer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "aleph_core\\strategy_replayer.py": {
      "file": "aleph_core\\strategy_replayer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "aleph_core\\strategy_replayer_upgraded.py": {
      "file": "aleph_core\\strategy_replayer_upgraded.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "aleph_core\\tesseract.py": {
      "file": "aleph_core\\tesseract.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "aleph_core\\Test_Pattern_Hook.py": {
      "file": "aleph_core\\Test_Pattern_Hook.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "aleph_core\\unitizer.py": {
      "file": "aleph_core\\unitizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "aleph_core\\__init__.py": {
      "file": "aleph_core\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\bit_phase_engine.py": {
      "file": "cleanup_backup\\bit_phase_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\dlt_waveform_engine.py": {
      "file": "cleanup_backup\\dlt_waveform_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\fallback_logic_router.py": {
      "file": "cleanup_backup\\fallback_logic_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\gpu_offload_manager.py": {
      "file": "cleanup_backup\\gpu_offload_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\hash_registry_manager.py": {
      "file": "cleanup_backup\\hash_registry_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\matrix_mapper.py": {
      "file": "cleanup_backup\\matrix_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\meta_layer_ghost_bridge.py": {
      "file": "cleanup_backup\\meta_layer_ghost_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\phantom_lag_model.py": {
      "file": "cleanup_backup\\phantom_lag_model.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\phase_entropy_matcher.py": {
      "file": "cleanup_backup\\phase_entropy_matcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\profit_cycle_allocator.py": {
      "file": "cleanup_backup\\profit_cycle_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\run_schwabot.py": {
      "file": "cleanup_backup\\run_schwabot.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\system_validation.py": {
      "file": "cleanup_backup\\system_validation.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\tensor_harness_matrix.py": {
      "file": "cleanup_backup\\tensor_harness_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests"
      ]
    },
    "cleanup_backup\\tensor_router.py": {
      "file": "cleanup_backup\\tensor_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\validate_components.py": {
      "file": "cleanup_backup\\validate_components.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\voltage_lane_mapper.py": {
      "file": "cleanup_backup\\voltage_lane_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests"
      ]
    },
    "cleanup_backup\\core\\advanced_drift_shell_integration.py": {
      "file": "cleanup_backup\\core\\advanced_drift_shell_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\advanced_mathematical_core.py": {
      "file": "cleanup_backup\\core\\advanced_mathematical_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\advanced_test_harness.py": {
      "file": "cleanup_backup\\core\\advanced_test_harness.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\ai_integration_bridge.py": {
      "file": "cleanup_backup\\core\\ai_integration_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "requests"
      ]
    },
    "cleanup_backup\\core\\altitude_adjustment_math.py": {
      "file": "cleanup_backup\\core\\altitude_adjustment_math.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\altitude_generator.py": {
      "file": "cleanup_backup\\core\\altitude_generator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\anomaly_filter_comprehensive.py": {
      "file": "cleanup_backup\\core\\anomaly_filter_comprehensive.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\api_bridge_manager.py": {
      "file": "cleanup_backup\\core\\api_bridge_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests"
      ]
    },
    "cleanup_backup\\core\\api_endpoints.py": {
      "file": "cleanup_backup\\core\\api_endpoints.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\api_gateway.py": {
      "file": "cleanup_backup\\core\\api_gateway.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "requests"
      ]
    },
    "cleanup_backup\\core\\asset_substitution_matrix.py": {
      "file": "cleanup_backup\\core\\asset_substitution_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\auto_scaler.py": {
      "file": "cleanup_backup\\core\\auto_scaler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\backtest_injector.py": {
      "file": "cleanup_backup\\core\\backtest_injector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "pandas"
      ]
    },
    "cleanup_backup\\core\\bare_except_handling_fixes.py": {
      "file": "cleanup_backup\\core\\bare_except_handling_fixes.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\basket_entropy_allocator.py": {
      "file": "cleanup_backup\\core\\basket_entropy_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\basket_log_controller.py": {
      "file": "cleanup_backup\\core\\basket_log_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\basket_swapper.py": {
      "file": "cleanup_backup\\core\\basket_swapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\basket_swap_logic.py": {
      "file": "cleanup_backup\\core\\basket_swap_logic.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\basket_swap_overlay_router.py": {
      "file": "cleanup_backup\\core\\basket_swap_overlay_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\basket_tensor_feedback.py": {
      "file": "cleanup_backup\\core\\basket_tensor_feedback.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\behavior_pattern_tracker.py": {
      "file": "cleanup_backup\\core\\behavior_pattern_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\best_practices_enforcer.py": {
      "file": "cleanup_backup\\core\\best_practices_enforcer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass"
      ],
      "error_indicators": [
        "ImportError",
        "SyntaxError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\bitcoin_mining_analyzer.py": {
      "file": "cleanup_backup\\core\\bitcoin_mining_analyzer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\bitmap_engine.py": {
      "file": "cleanup_backup\\core\\bitmap_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\bit_operations.py": {
      "file": "cleanup_backup\\core\\bit_operations.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\bit_phase_engine.py": {
      "file": "cleanup_backup\\core\\bit_phase_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\bit_resolution_engine.py": {
      "file": "cleanup_backup\\core\\bit_resolution_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\bit_sequencer.py": {
      "file": "cleanup_backup\\core\\bit_sequencer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\block_wave_transform.py": {
      "file": "cleanup_backup\\core\\block_wave_transform.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass"
      ],
      "error_indicators": [
        "ModuleNotFoundError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\braid_fractal.py": {
      "file": "cleanup_backup\\core\\braid_fractal.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\braid_pattern_engine.py": {
      "file": "cleanup_backup\\core\\braid_pattern_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\btc_data_processor.py": {
      "file": "cleanup_backup\\core\\btc_data_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\btc_investment_ratio_controller.py": {
      "file": "cleanup_backup\\core\\btc_investment_ratio_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\btc_processor_controller.py": {
      "file": "cleanup_backup\\core\\btc_processor_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\btc_processor_ui.py": {
      "file": "cleanup_backup\\core\\btc_processor_ui.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\btc_usdc_router_relay.py": {
      "file": "cleanup_backup\\core\\btc_usdc_router_relay.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\btc_vector_aggregator.py": {
      "file": "cleanup_backup\\core\\btc_vector_aggregator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\bus_core.py": {
      "file": "cleanup_backup\\core\\bus_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\bus_events.py": {
      "file": "cleanup_backup\\core\\bus_events.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\capital_controls.py": {
      "file": "cleanup_backup\\core\\capital_controls.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\ccxt_execution_manager.py": {
      "file": "cleanup_backup\\core\\ccxt_execution_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()",
        "ccxt"
      ]
    },
    "cleanup_backup\\core\\ccxt_profit_vectorizer.py": {
      "file": "cleanup_backup\\core\\ccxt_profit_vectorizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()",
        "ccxt"
      ]
    },
    "cleanup_backup\\core\\checksum_verifier.py": {
      "file": "cleanup_backup\\core\\checksum_verifier.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\cluster_mapper.py": {
      "file": "cleanup_backup\\core\\cluster_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\coldbase_bridge.py": {
      "file": "cleanup_backup\\core\\coldbase_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\collapse_confidence.py": {
      "file": "cleanup_backup\\core\\collapse_confidence.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\collapse_engine.py": {
      "file": "cleanup_backup\\core\\collapse_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\compute_ghost_route.py": {
      "file": "cleanup_backup\\core\\compute_ghost_route.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from "
      ]
    },
    "cleanup_backup\\core\\conditional_glyph_feedback_loop.py": {
      "file": "cleanup_backup\\core\\conditional_glyph_feedback_loop.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\config.py": {
      "file": "cleanup_backup\\core\\config.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\config_utils.py": {
      "file": "cleanup_backup\\core\\config_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\constants.py": {
      "file": "cleanup_backup\\core\\constants.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\cooldown_manager.py": {
      "file": "cleanup_backup\\core\\cooldown_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\core_loop_manager.py": {
      "file": "cleanup_backup\\core\\core_loop_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\critical_error_handler.py": {
      "file": "cleanup_backup\\core\\critical_error_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\cursor_engine.py": {
      "file": "cleanup_backup\\core\\cursor_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\cursor_math_integration.py": {
      "file": "cleanup_backup\\core\\cursor_math_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\cyclic_core.py": {
      "file": "cleanup_backup\\core\\cyclic_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\dashboard_integration.py": {
      "file": "cleanup_backup\\core\\dashboard_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\data_integration_layer.py": {
      "file": "cleanup_backup\\core\\data_integration_layer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests",
        "ccxt"
      ]
    },
    "cleanup_backup\\core\\data_provider.py": {
      "file": "cleanup_backup\\core\\data_provider.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\demo_backtest_runner.py": {
      "file": "cleanup_backup\\core\\demo_backtest_runner.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\demo_entry_simulator.py": {
      "file": "cleanup_backup\\core\\demo_entry_simulator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\demo_integration_system.py": {
      "file": "cleanup_backup\\core\\demo_integration_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\demo_memory_core.py": {
      "file": "cleanup_backup\\core\\demo_memory_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\demo_runner.py": {
      "file": "cleanup_backup\\core\\demo_runner.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\demo_state_injector.py": {
      "file": "cleanup_backup\\core\\demo_state_injector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\demo_trading_system.py": {
      "file": "cleanup_backup\\core\\demo_trading_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\deterministic_value_engine.py": {
      "file": "cleanup_backup\\core\\deterministic_value_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\dlt_waveform_engine.py": {
      "file": "cleanup_backup\\core\\dlt_waveform_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\dormant_engine.py": {
      "file": "cleanup_backup\\core\\dormant_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\drift_compensator.py": {
      "file": "cleanup_backup\\core\\drift_compensator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\drift_exit_detector.py": {
      "file": "cleanup_backup\\core\\drift_exit_detector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\drift_phase_monitor.py": {
      "file": "cleanup_backup\\core\\drift_phase_monitor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\drift_shell_engine.py": {
      "file": "cleanup_backup\\core\\drift_shell_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "TypeError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\dual_state_tracker.py": {
      "file": "cleanup_backup\\core\\dual_state_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\echo_snapshot.py": {
      "file": "cleanup_backup\\core\\echo_snapshot.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\edge_vector_field.py": {
      "file": "cleanup_backup\\core\\edge_vector_field.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\enhanced_btc_integration_bridge.py": {
      "file": "cleanup_backup\\core\\enhanced_btc_integration_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\enhanced_fractal_core.py": {
      "file": "cleanup_backup\\core\\enhanced_fractal_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\enhanced_gpu_hash_processor.py": {
      "file": "cleanup_backup\\core\\enhanced_gpu_hash_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\enhanced_hooks.py": {
      "file": "cleanup_backup\\core\\enhanced_hooks.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\enhanced_risk_manager.py": {
      "file": "cleanup_backup\\core\\enhanced_risk_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return []"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\enhanced_tesseract_processor.py": {
      "file": "cleanup_backup\\core\\enhanced_tesseract_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\enhanced_thermal_aware_btc_processor.py": {
      "file": "cleanup_backup\\core\\enhanced_thermal_aware_btc_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\enhanced_thermal_hash_processor.py": {
      "file": "cleanup_backup\\core\\enhanced_thermal_hash_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\enhanced_windows_cli_compatibility.py": {
      "file": "cleanup_backup\\core\\enhanced_windows_cli_compatibility.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\entropy_api_layer.py": {
      "file": "cleanup_backup\\core\\entropy_api_layer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "flask"
      ]
    },
    "cleanup_backup\\core\\entropy_bridge.py": {
      "file": "cleanup_backup\\core\\entropy_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\entropy_engine.py": {
      "file": "cleanup_backup\\core\\entropy_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\entropy_flattener.py": {
      "file": "cleanup_backup\\core\\entropy_flattener.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\entropy_tracker.py": {
      "file": "cleanup_backup\\core\\entropy_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\entropy_validator.py": {
      "file": "cleanup_backup\\core\\entropy_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ModuleNotFoundError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\entry_exit_vector.py": {
      "file": "cleanup_backup\\core\\entry_exit_vector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\entry_exit_vector_analyzer.py": {
      "file": "cleanup_backup\\core\\entry_exit_vector_analyzer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\entry_gate.py": {
      "file": "cleanup_backup\\core\\entry_gate.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "TypeError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\environment_manager.py": {
      "file": "cleanup_backup\\core\\environment_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\error_handler.py": {
      "file": "cleanup_backup\\core\\error_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass",
        "return None"
      ],
      "error_indicators": [
        "ImportError",
        "AttributeError",
        "TypeError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\error_handling_pipeline.py": {
      "file": "cleanup_backup\\core\\error_handling_pipeline.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "TypeError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\error_sanitizer.py": {
      "file": "cleanup_backup\\core\\error_sanitizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return 0"
      ],
      "error_indicators": [
        "ImportError",
        "AttributeError",
        "TypeError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "numpy",
        "pandas"
      ]
    },
    "cleanup_backup\\core\\event_impact_mapper.py": {
      "file": "cleanup_backup\\core\\event_impact_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\event_matrix_integration_bridge.py": {
      "file": "cleanup_backup\\core\\event_matrix_integration_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\evolution_engine.py": {
      "file": "cleanup_backup\\core\\evolution_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\exchange_plumbing.py": {
      "file": "cleanup_backup\\core\\exchange_plumbing.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return []",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "requests",
        "ccxt"
      ]
    },
    "cleanup_backup\\core\\exec_packet.py": {
      "file": "cleanup_backup\\core\\exec_packet.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\export_vector_snapshot.py": {
      "file": "cleanup_backup\\core\\export_vector_snapshot.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\fallback_logic_router.py": {
      "file": "cleanup_backup\\core\\fallback_logic_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\fault_bus.py": {
      "file": "cleanup_backup\\core\\fault_bus.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass",
        "return None",
        "return []",
        "return {}",
        "placeholder",
        "dummy"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\ferris_rde_core.py": {
      "file": "cleanup_backup\\core\\ferris_rde_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\ferris_wheel_scheduler.py": {
      "file": "cleanup_backup\\core\\ferris_wheel_scheduler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\filters.py": {
      "file": "cleanup_backup\\core\\filters.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\flask_network_coordinator.py": {
      "file": "cleanup_backup\\core\\flask_network_coordinator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "flask",
        "requests"
      ]
    },
    "cleanup_backup\\core\\flux_compensator.py": {
      "file": "cleanup_backup\\core\\flux_compensator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\fractal_core.py": {
      "file": "cleanup_backup\\core\\fractal_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\function_patterns.py": {
      "file": "cleanup_backup\\core\\function_patterns.py",
      "status": "stub",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": []
    },
    "cleanup_backup\\core\\future_corridor_engine.py": {
      "file": "cleanup_backup\\core\\future_corridor_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\future_hooks.py": {
      "file": "cleanup_backup\\core\\future_hooks.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\gan_anomaly_filter.py": {
      "file": "cleanup_backup\\core\\gan_anomaly_filter.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\gan_filter.py": {
      "file": "cleanup_backup\\core\\gan_filter.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass",
        "return 0",
        "return {}",
        "placeholder"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\genesis_core.py": {
      "file": "cleanup_backup\\core\\genesis_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\ghost_architecture_btc_profit_handoff.py": {
      "file": "cleanup_backup\\core\\ghost_architecture_btc_profit_handoff.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\ghost_conditionals.py": {
      "file": "cleanup_backup\\core\\ghost_conditionals.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ghost_data_recovery.py": {
      "file": "cleanup_backup\\core\\ghost_data_recovery.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\ghost_decay.py": {
      "file": "cleanup_backup\\core\\ghost_decay.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\ghost_hash_decoder.py": {
      "file": "cleanup_backup\\core\\ghost_hash_decoder.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\ghost_memory.py": {
      "status": "syntax_error",
      "file": "cleanup_backup\\core\\ghost_memory.py",
      "error": "Syntax error - cannot parse"
    },
    "cleanup_backup\\core\\ghost_memory_router.py": {
      "file": "cleanup_backup\\core\\ghost_memory_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ghost_meta_layer_engine.py": {
      "file": "cleanup_backup\\core\\ghost_meta_layer_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\ghost_news_glyph_map.py": {
      "file": "cleanup_backup\\core\\ghost_news_glyph_map.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ghost_news_vectorizer.py": {
      "file": "cleanup_backup\\core\\ghost_news_vectorizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ghost_phase_integrator.py": {
      "file": "cleanup_backup\\core\\ghost_phase_integrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ghost_pipeline.py": {
      "file": "cleanup_backup\\core\\ghost_pipeline.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ghost_profit_tracker.py": {
      "status": "syntax_error",
      "file": "cleanup_backup\\core\\ghost_profit_tracker.py",
      "error": "Syntax error - cannot parse"
    },
    "cleanup_backup\\core\\ghost_router.py": {
      "file": "cleanup_backup\\core\\ghost_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "return 0",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ghost_shadow_tracker.py": {
      "file": "cleanup_backup\\core\\ghost_shadow_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\ghost_strategy_handler.py": {
      "file": "cleanup_backup\\core\\ghost_strategy_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ghost_strategy_integrator.py": {
      "file": "cleanup_backup\\core\\ghost_strategy_integrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "dummy"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ghost_strategy_matrix.py": {
      "file": "cleanup_backup\\core\\ghost_strategy_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ghost_swap_vector.py": {
      "file": "cleanup_backup\\core\\ghost_swap_vector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\ghost_trigger.py": {
      "file": "cleanup_backup\\core\\ghost_trigger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\glyph_hysteresis.py": {
      "file": "cleanup_backup\\core\\glyph_hysteresis.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\glyph_math_core.py": {
      "file": "cleanup_backup\\core\\glyph_math_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\glyph_news_parser.py": {
      "file": "cleanup_backup\\core\\glyph_news_parser.py",
      "status": "empty",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": []
    },
    "cleanup_backup\\core\\glyph_phase_anchor.py": {
      "file": "cleanup_backup\\core\\glyph_phase_anchor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\glyph_vector_executor.py": {
      "file": "cleanup_backup\\core\\glyph_vector_executor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\gpt_command_layer.py": {
      "file": "cleanup_backup\\core\\gpt_command_layer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\gpt_command_layer_simple.py": {
      "file": "cleanup_backup\\core\\gpt_command_layer_simple.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\gpu_flash_engine.py": {
      "file": "cleanup_backup\\core\\gpu_flash_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\gpu_metrics.py": {
      "file": "cleanup_backup\\core\\gpu_metrics.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\gpu_offload_manager.py": {
      "file": "cleanup_backup\\core\\gpu_offload_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\hardware_self_identifier.py": {
      "file": "cleanup_backup\\core\\hardware_self_identifier.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\hash_affinity_vault.py": {
      "file": "cleanup_backup\\core\\hash_affinity_vault.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\hash_confidence_evaluator.py": {
      "file": "cleanup_backup\\core\\hash_confidence_evaluator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\hash_phase_switch.py": {
      "file": "cleanup_backup\\core\\hash_phase_switch.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\hash_profit_matrix.py": {
      "file": "cleanup_backup\\core\\hash_profit_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\hash_recollection.py": {
      "file": "cleanup_backup\\core\\hash_recollection.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\hash_registry.py": {
      "file": "cleanup_backup\\core\\hash_registry.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\hash_registry_manager.py": {
      "file": "cleanup_backup\\core\\hash_registry_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\hash_repair_engine.py": {
      "file": "cleanup_backup\\core\\hash_repair_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\hash_tick_synchronizer.py": {
      "file": "cleanup_backup\\core\\hash_tick_synchronizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\hash_trigger_engine.py": {
      "file": "cleanup_backup\\core\\hash_trigger_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return []",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\high_frequency_btc_trading_processor.py": {
      "file": "cleanup_backup\\core\\high_frequency_btc_trading_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\historical_ledger_manager.py": {
      "file": "cleanup_backup\\core\\historical_ledger_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\hooks.py": {
      "file": "cleanup_backup\\core\\hooks.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\hybrid_optimization_manager.py": {
      "file": "cleanup_backup\\core\\hybrid_optimization_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\import_resolver.py": {
      "file": "cleanup_backup\\core\\import_resolver.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "ccxt"
      ]
    },
    "cleanup_backup\\core\\inject_demo_ledger.py": {
      "file": "cleanup_backup\\core\\inject_demo_ledger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\integrated_alif_aleph_system.py": {
      "file": "cleanup_backup\\core\\integrated_alif_aleph_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\integrated_pathway_test_suite.py": {
      "file": "cleanup_backup\\core\\integrated_pathway_test_suite.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\integrated_profit_correlation_system.py": {
      "file": "cleanup_backup\\core\\integrated_profit_correlation_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\integration_orchestrator.py": {
      "file": "cleanup_backup\\core\\integration_orchestrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "return None"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests"
      ]
    },
    "cleanup_backup\\core\\integration_test.py": {
      "file": "cleanup_backup\\core\\integration_test.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\klein_bottle_integrator.py": {
      "file": "cleanup_backup\\core\\klein_bottle_integrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\lantern_hash_echo.py": {
      "file": "cleanup_backup\\core\\lantern_hash_echo.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\lantern_news_intelligence_bridge.py": {
      "file": "cleanup_backup\\core\\lantern_news_intelligence_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0",
        "return {}",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests"
      ]
    },
    "cleanup_backup\\core\\lantern_trigger.py": {
      "file": "cleanup_backup\\core\\lantern_trigger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\lantern_trigger_validator.py": {
      "file": "cleanup_backup\\core\\lantern_trigger_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\lantern_vector_memory.py": {
      "file": "cleanup_backup\\core\\lantern_vector_memory.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\lattice_wave_math.py": {
      "file": "cleanup_backup\\core\\lattice_wave_math.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\line_render_engine.py": {
      "file": "cleanup_backup\\core\\line_render_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\lockout_matrix.py": {
      "file": "cleanup_backup\\core\\lockout_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\long_horizon_simulation.py": {
      "file": "cleanup_backup\\core\\long_horizon_simulation.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return []",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\magic_number_optimization_engine.py": {
      "file": "cleanup_backup\\core\\magic_number_optimization_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\main.py": {
      "file": "cleanup_backup\\core\\main.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\main_orcestrator.py": {
      "file": "cleanup_backup\\core\\main_orcestrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\master_orchestrator.py": {
      "file": "cleanup_backup\\core\\master_orchestrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\mathematical_integration_validator.py": {
      "file": "cleanup_backup\\core\\mathematical_integration_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\mathematical_optimization_bridge.py": {
      "file": "cleanup_backup\\core\\mathematical_optimization_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\mathematical_pipeline_validator.py": {
      "file": "cleanup_backup\\core\\mathematical_pipeline_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "ccxt"
      ]
    },
    "cleanup_backup\\core\\mathematical_pipeline_validator_simple.py": {
      "file": "cleanup_backup\\core\\mathematical_pipeline_validator_simple.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\mathlib.py": {
      "file": "cleanup_backup\\core\\mathlib.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\mathlib_v2.py": {
      "file": "cleanup_backup\\core\\mathlib_v2.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\mathlib_v3.py": {
      "status": "syntax_error",
      "file": "cleanup_backup\\core\\mathlib_v3.py",
      "error": "Syntax error - cannot parse"
    },
    "cleanup_backup\\core\\math_core.py": {
      "file": "cleanup_backup\\core\\math_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\matrix_allocator.py": {
      "file": "cleanup_backup\\core\\matrix_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\matrix_basket_loader.py": {
      "file": "cleanup_backup\\core\\matrix_basket_loader.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\matrix_fault_resolver.py": {
      "file": "cleanup_backup\\core\\matrix_fault_resolver.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\matrix_mapper.py": {
      "file": "cleanup_backup\\core\\matrix_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\matrix_overlay.py": {
      "file": "cleanup_backup\\core\\matrix_overlay.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\matrix_overlay_backup.py": {
      "file": "cleanup_backup\\core\\matrix_overlay_backup.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\matrix_overlay_engine.py": {
      "file": "cleanup_backup\\core\\matrix_overlay_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\memory_agent.py": {
      "file": "cleanup_backup\\core\\memory_agent.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\memory_agent_ghost_meta_engine.py": {
      "file": "cleanup_backup\\core\\memory_agent_ghost_meta_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\memory_allocation_manager.py": {
      "file": "cleanup_backup\\core\\memory_allocation_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\memory_drift_corrector.py": {
      "file": "cleanup_backup\\core\\memory_drift_corrector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\memory_map.py": {
      "file": "cleanup_backup\\core\\memory_map.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\memory_timing_orchestrator.py": {
      "file": "cleanup_backup\\core\\memory_timing_orchestrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\meta_layer_ghost_bridge.py": {
      "file": "cleanup_backup\\core\\meta_layer_ghost_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\mode_manager.py": {
      "file": "cleanup_backup\\core\\mode_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\multi_bit_btc_processor.py": {
      "file": "cleanup_backup\\core\\multi_bit_btc_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\ncco_manager.py": {
      "file": "cleanup_backup\\core\\ncco_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\news_api_endpoints.py": {
      "file": "cleanup_backup\\core\\news_api_endpoints.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\news_intelligence_engine.py": {
      "file": "cleanup_backup\\core\\news_intelligence_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\news_lantern_integration_api.py": {
      "file": "cleanup_backup\\core\\news_lantern_integration_api.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\news_lantern_mathematical_integration.py": {
      "file": "cleanup_backup\\core\\news_lantern_mathematical_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\news_profit_api_endpoints.py": {
      "file": "cleanup_backup\\core\\news_profit_api_endpoints.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\news_profit_mathematical_bridge.py": {
      "file": "cleanup_backup\\core\\news_profit_mathematical_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\news_quant_field.py": {
      "file": "cleanup_backup\\core\\news_quant_field.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\news_sentiment_interpreter.py": {
      "file": "cleanup_backup\\core\\news_sentiment_interpreter.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ops_observability.py": {
      "status": "syntax_error",
      "file": "cleanup_backup\\core\\ops_observability.py",
      "error": "Syntax error - cannot parse"
    },
    "cleanup_backup\\core\\optimization_engine.py": {
      "file": "cleanup_backup\\core\\optimization_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "requests"
      ]
    },
    "cleanup_backup\\core\\optimized_constants_wrapper.py": {
      "file": "cleanup_backup\\core\\optimized_constants_wrapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\orbital_profit_navigator.py": {
      "file": "cleanup_backup\\core\\orbital_profit_navigator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\oscillator_fallback.py": {
      "file": "cleanup_backup\\core\\oscillator_fallback.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\pattern_match_display.py": {
      "file": "cleanup_backup\\core\\pattern_match_display.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\pattern_utils.py": {
      "file": "cleanup_backup\\core\\pattern_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\persistent_state_manager.py": {
      "file": "cleanup_backup\\core\\persistent_state_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\phantom_entry_logic.py": {
      "file": "cleanup_backup\\core\\phantom_entry_logic.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\phantom_exit_logic.py": {
      "file": "cleanup_backup\\core\\phantom_exit_logic.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\phantom_lag_model.py": {
      "file": "cleanup_backup\\core\\phantom_lag_model.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\phantom_memory.py": {
      "file": "cleanup_backup\\core\\phantom_memory.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\phantom_price_vector_synchronizer.py": {
      "file": "cleanup_backup\\core\\phantom_price_vector_synchronizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\phantom_profit_tracker.py": {
      "file": "cleanup_backup\\core\\phantom_profit_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "cleanup_backup\\core\\phase_entropy_matcher.py": {
      "file": "cleanup_backup\\core\\phase_entropy_matcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\phase_gate_controller.py": {
      "file": "cleanup_backup\\core\\phase_gate_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\phase_handler.py": {
      "file": "cleanup_backup\\core\\phase_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\pipeline_management_system.py": {
      "file": "cleanup_backup\\core\\pipeline_management_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\plot_sign_engine.py": {
      "file": "cleanup_backup\\core\\plot_sign_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\pod_management.py": {
      "file": "cleanup_backup\\core\\pod_management.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\pool_volume_translator.py": {
      "file": "cleanup_backup\\core\\pool_volume_translator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\portfolio_router.py": {
      "file": "cleanup_backup\\core\\portfolio_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\portfolio_substitution_matrix.py": {
      "file": "cleanup_backup\\core\\portfolio_substitution_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\post_failure_recovery_intelligence_loop.py": {
      "file": "cleanup_backup\\core\\post_failure_recovery_intelligence_loop.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\practical_visual_controller.py": {
      "file": "cleanup_backup\\core\\practical_visual_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\precision_performance.py": {
      "file": "cleanup_backup\\core\\precision_performance.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return []",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\profit_cycle_allocator.py": {
      "file": "cleanup_backup\\core\\profit_cycle_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\profit_echo_velocity_driver.py": {
      "file": "cleanup_backup\\core\\profit_echo_velocity_driver.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\profit_feedback_loop.py": {
      "file": "cleanup_backup\\core\\profit_feedback_loop.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\profit_navigator.py": {
      "file": "cleanup_backup\\core\\profit_navigator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\profit_projection.py": {
      "file": "cleanup_backup\\core\\profit_projection.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\profit_protection.py": {
      "file": "cleanup_backup\\core\\profit_protection.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\profit_router.py": {
      "file": "cleanup_backup\\core\\profit_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\profit_routing_engine.py": {
      "file": "cleanup_backup\\core\\profit_routing_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\profit_sweep_allocator.py": {
      "file": "cleanup_backup\\core\\profit_sweep_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\profit_tensor.py": {
      "file": "cleanup_backup\\core\\profit_tensor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\profit_trajectory_coprocessor.py": {
      "file": "cleanup_backup\\core\\profit_trajectory_coprocessor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\profit_vector_reconciler.py": {
      "file": "cleanup_backup\\core\\profit_vector_reconciler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\prophet_connector.py": {
      "file": "cleanup_backup\\core\\prophet_connector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\psi_cache.py": {
      "file": "cleanup_backup\\core\\psi_cache.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\quantization_profile.py": {
      "file": "cleanup_backup\\core\\quantization_profile.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\quantum_antipole_engine.py": {
      "file": "cleanup_backup\\core\\quantum_antipole_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\quantum_btc_intelligence_core.py": {
      "file": "cleanup_backup\\core\\quantum_btc_intelligence_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\quantum_cellular_risk_monitor.py": {
      "file": "cleanup_backup\\core\\quantum_cellular_risk_monitor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\quantum_drift_shell_engine.py": {
      "file": "cleanup_backup\\core\\quantum_drift_shell_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\quantum_mathematical_pathway_validator.py": {
      "file": "cleanup_backup\\core\\quantum_mathematical_pathway_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\react_dashboard_integration.py": {
      "file": "cleanup_backup\\core\\react_dashboard_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\recursive_profit.py": {
      "file": "cleanup_backup\\core\\recursive_profit.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\recursive_strategy_router.py": {
      "file": "cleanup_backup\\core\\recursive_strategy_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\regulatory_compliance.py": {
      "file": "cleanup_backup\\core\\regulatory_compliance.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return 0",
        "return []",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\render_math_utils.py": {
      "file": "cleanup_backup\\core\\render_math_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\resonance_gate_logic.py": {
      "file": "cleanup_backup\\core\\resonance_gate_logic.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\resource_sequencer.py": {
      "file": "cleanup_backup\\core\\resource_sequencer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\riddle_gemm.py": {
      "file": "cleanup_backup\\core\\riddle_gemm.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\risk_engine.py": {
      "file": "cleanup_backup\\core\\risk_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\risk_guard.py": {
      "file": "cleanup_backup\\core\\risk_guard.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\risk_indexer.py": {
      "file": "cleanup_backup\\core\\risk_indexer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\risk_manager.py": {
      "file": "cleanup_backup\\core\\risk_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\risk_monitor.py": {
      "file": "cleanup_backup\\core\\risk_monitor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\rittle_gemm.py": {
      "file": "cleanup_backup\\core\\rittle_gemm.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\route_verification_classifier.py": {
      "file": "cleanup_backup\\core\\route_verification_classifier.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\schwabot_dashboard.py": {
      "file": "cleanup_backup\\core\\schwabot_dashboard.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\schwabot_integration_orchestrator.py": {
      "file": "cleanup_backup\\core\\schwabot_integration_orchestrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass",
        "return None",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\schwabot_unified_interface_system.py": {
      "file": "cleanup_backup\\core\\schwabot_unified_interface_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\schwafit_core.py": {
      "file": "cleanup_backup\\core\\schwafit_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\secure_api_manager.py": {
      "file": "cleanup_backup\\core\\secure_api_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "requests",
        "ccxt"
      ]
    },
    "cleanup_backup\\core\\sequencer_engine.py": {
      "file": "cleanup_backup\\core\\sequencer_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\settings_controller.py": {
      "file": "cleanup_backup\\core\\settings_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\settings_manager.py": {
      "file": "cleanup_backup\\core\\settings_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "requests"
      ]
    },
    "cleanup_backup\\core\\sfsss_router.py": {
      "file": "cleanup_backup\\core\\sfsss_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\sfsss_strategy_bundler.py": {
      "file": "cleanup_backup\\core\\sfsss_strategy_bundler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\shell_memory_evolution_fixes.py": {
      "file": "cleanup_backup\\core\\shell_memory_evolution_fixes.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\shell_portal_mapper.py": {
      "file": "cleanup_backup\\core\\shell_portal_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\shift_profit_engine.py": {
      "file": "cleanup_backup\\core\\shift_profit_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\simplified_api.py": {
      "file": "cleanup_backup\\core\\simplified_api.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\simplified_btc_integration.py": {
      "file": "cleanup_backup\\core\\simplified_btc_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests"
      ]
    },
    "cleanup_backup\\core\\simulate_trade.py": {
      "file": "cleanup_backup\\core\\simulate_trade.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\snapshot_logger.py": {
      "file": "cleanup_backup\\core\\snapshot_logger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\spectral_state.py": {
      "file": "cleanup_backup\\core\\spectral_state.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\spectral_transform.py": {
      "file": "cleanup_backup\\core\\spectral_transform.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\state_tracker.py": {
      "file": "cleanup_backup\\core\\state_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\state_validation_router.py": {
      "file": "cleanup_backup\\core\\state_validation_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\strange_loop_detector.py": {
      "file": "cleanup_backup\\core\\strange_loop_detector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\strategic_dormancy.py": {
      "file": "cleanup_backup\\core\\strategic_dormancy.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\strategy_config.py": {
      "file": "cleanup_backup\\core\\strategy_config.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\strategy_entropy_switcher.py": {
      "file": "cleanup_backup\\core\\strategy_entropy_switcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\strategy_execution_mapper.py": {
      "file": "cleanup_backup\\core\\strategy_execution_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\strategy_loader.py": {
      "file": "cleanup_backup\\core\\strategy_loader.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return {}",
        "placeholder"
      ],
      "error_indicators": [
        "ImportError",
        "SyntaxError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy",
        "pandas"
      ]
    },
    "cleanup_backup\\core\\strategy_logic.py": {
      "file": "cleanup_backup\\core\\strategy_logic.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\strategy_loop_executor.py": {
      "file": "cleanup_backup\\core\\strategy_loop_executor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\strategy_mapper.py": {
      "file": "cleanup_backup\\core\\strategy_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\strategy_sustainment_validator.py": {
      "file": "cleanup_backup\\core\\strategy_sustainment_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\sustainment_gan_integration_demo.py": {
      "file": "cleanup_backup\\core\\sustainment_gan_integration_demo.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\sustainment_integration_hooks.py": {
      "file": "cleanup_backup\\core\\sustainment_integration_hooks.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\sustainment_principles.py": {
      "file": "cleanup_backup\\core\\sustainment_principles.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\sustainment_underlay_controller.py": {
      "file": "cleanup_backup\\core\\sustainment_underlay_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\system_clock_sequencer.py": {
      "file": "cleanup_backup\\core\\system_clock_sequencer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\system_constants.py": {
      "file": "cleanup_backup\\core\\system_constants.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\system_constants_example.py": {
      "file": "cleanup_backup\\core\\system_constants_example.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\system_integration_orchestrator.py": {
      "file": "cleanup_backup\\core\\system_integration_orchestrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests"
      ]
    },
    "cleanup_backup\\core\\system_monitor.py": {
      "file": "cleanup_backup\\core\\system_monitor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return []",
        "return {}",
        "placeholder"
      ],
      "error_indicators": [
        "AttributeError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\system_orchestrator.py": {
      "file": "cleanup_backup\\core\\system_orchestrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\temporal_execution_correction_layer.py": {
      "file": "cleanup_backup\\core\\temporal_execution_correction_layer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tensor_harness_matrix.py": {
      "file": "cleanup_backup\\core\\tensor_harness_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests"
      ]
    },
    "cleanup_backup\\core\\tensor_matcher.py": {
      "file": "cleanup_backup\\core\\tensor_matcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\tensor_path_router.py": {
      "file": "cleanup_backup\\core\\tensor_path_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests"
      ]
    },
    "cleanup_backup\\core\\tensor_router.py": {
      "file": "cleanup_backup\\core\\tensor_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tensor_score_utils.py": {
      "file": "cleanup_backup\\core\\tensor_score_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\tensor_visualization_controller.py": {
      "file": "cleanup_backup\\core\\tensor_visualization_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tesseract_processor.py": {
      "file": "cleanup_backup\\core\\tesseract_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tesseract_visualizer.py": {
      "file": "cleanup_backup\\core\\tesseract_visualizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\test_complete_system_functionality.py": {
      "file": "cleanup_backup\\core\\test_complete_system_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\test_distributed_system.py": {
      "file": "cleanup_backup\\core\\test_distributed_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "flask",
        "requests",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\test_enhanced_fractal_functionality.py": {
      "file": "cleanup_backup\\core\\test_enhanced_fractal_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\test_enhanced_systems_functionality.py": {
      "file": "cleanup_backup\\core\\test_enhanced_systems_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\test_integration.py": {
      "file": "cleanup_backup\\core\\test_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\test_recursive_profit_engine_functionality.py": {
      "file": "cleanup_backup\\core\\test_recursive_profit_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\test_simple_enhanced_functionality.py": {
      "file": "cleanup_backup\\core\\test_simple_enhanced_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\thermal_boundary_manager.py": {
      "file": "cleanup_backup\\core\\thermal_boundary_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\thermal_integration_demo.py": {
      "file": "cleanup_backup\\core\\thermal_integration_demo.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\thermal_map_allocator.py": {
      "file": "cleanup_backup\\core\\thermal_map_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\thermal_performance_tracker.py": {
      "file": "cleanup_backup\\core\\thermal_performance_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\thermal_shift.py": {
      "file": "cleanup_backup\\core\\thermal_shift.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\thermal_system_integration.py": {
      "file": "cleanup_backup\\core\\thermal_system_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\thermal_visual_integration.py": {
      "file": "cleanup_backup\\core\\thermal_visual_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\thermal_zone_manager.py": {
      "file": "cleanup_backup\\core\\thermal_zone_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\thermal_zone_manager_mock.py": {
      "file": "cleanup_backup\\core\\thermal_zone_manager_mock.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tick_backlog_router.py": {
      "file": "cleanup_backup\\core\\tick_backlog_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\tick_cycle_validator.py": {
      "file": "cleanup_backup\\core\\tick_cycle_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\tick_feed_harness.py": {
      "file": "cleanup_backup\\core\\tick_feed_harness.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "return 0",
        "return []",
        "return {}",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "ccxt"
      ]
    },
    "cleanup_backup\\core\\tick_hash_interpreter.py": {
      "file": "cleanup_backup\\core\\tick_hash_interpreter.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\tick_hash_processor.py": {
      "file": "cleanup_backup\\core\\tick_hash_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tick_management_system.py": {
      "file": "cleanup_backup\\core\\tick_management_system.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tick_processor.py": {
      "file": "cleanup_backup\\core\\tick_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\tick_resonance_engine.py": {
      "file": "cleanup_backup\\core\\tick_resonance_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\time_entropy_edge_case.py": {
      "file": "cleanup_backup\\core\\time_entropy_edge_case.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\timing_manager.py": {
      "file": "cleanup_backup\\core\\timing_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\todo_validation_fixes.py": {
      "file": "cleanup_backup\\core\\todo_validation_fixes.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:",
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\trade_tensor_router.py": {
      "file": "cleanup_backup\\core\\trade_tensor_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\trajectory_sphere.py": {
      "file": "cleanup_backup\\core\\trajectory_sphere.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\triplet_matcher.py": {
      "file": "cleanup_backup\\core\\triplet_matcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\type_defs.py": {
      "file": "cleanup_backup\\core\\type_defs.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\type_enforcer.py": {
      "file": "cleanup_backup\\core\\type_enforcer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\type_patterns.py": {
      "file": "cleanup_backup\\core\\type_patterns.py",
      "status": "empty",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": []
    },
    "cleanup_backup\\core\\typing_schemas.py": {
      "file": "cleanup_backup\\core\\typing_schemas.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\ufs_echo_logger.py": {
      "file": "cleanup_backup\\core\\ufs_echo_logger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\ufs_registry.py": {
      "file": "cleanup_backup\\core\\ufs_registry.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\ui_integration_bridge.py": {
      "file": "cleanup_backup\\core\\ui_integration_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\ui_state_bridge.py": {
      "file": "cleanup_backup\\core\\ui_state_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\ump_pipeline.py": {
      "file": "cleanup_backup\\core\\ump_pipeline.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\unified_api_coordinator.py": {
      "file": "cleanup_backup\\core\\unified_api_coordinator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests"
      ]
    },
    "cleanup_backup\\core\\unified_confidence_matrix.py": {
      "file": "cleanup_backup\\core\\unified_confidence_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\unified_integration_layer.py": {
      "file": "cleanup_backup\\core\\unified_integration_layer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\unified_mathematical_trading_controller.py": {
      "file": "cleanup_backup\\core\\unified_mathematical_trading_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\unified_mathematics_config.py": {
      "file": "cleanup_backup\\core\\unified_mathematics_config.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\unified_observability_tensor.py": {
      "file": "cleanup_backup\\core\\unified_observability_tensor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\unified_schwabot_integration.py": {
      "file": "cleanup_backup\\core\\unified_schwabot_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\unified_signal_metrics.py": {
      "file": "cleanup_backup\\core\\unified_signal_metrics.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\unified_visual_controller.py": {
      "file": "cleanup_backup\\core\\unified_visual_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\unified_visual_synthesis_controller.py": {
      "file": "cleanup_backup\\core\\unified_visual_synthesis_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\universal_schwabot_client.py": {
      "file": "cleanup_backup\\core\\universal_schwabot_client.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\usdc_position_manager.py": {
      "file": "cleanup_backup\\core\\usdc_position_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\validation_manager.py": {
      "file": "cleanup_backup\\core\\validation_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\vault_balance_regulator.py": {
      "file": "cleanup_backup\\core\\vault_balance_regulator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\vault_router.py": {
      "file": "cleanup_backup\\core\\vault_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\vector_matcher.py": {
      "file": "cleanup_backup\\core\\vector_matcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\vector_state_mapper.py": {
      "file": "cleanup_backup\\core\\vector_state_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\vector_validator.py": {
      "file": "cleanup_backup\\core\\vector_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\vecu_core.py": {
      "file": "cleanup_backup\\core\\vecu_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\visual_integration_bridge.py": {
      "file": "cleanup_backup\\core\\visual_integration_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\voltage_lane_mapper.py": {
      "file": "cleanup_backup\\core\\voltage_lane_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests"
      ]
    },
    "cleanup_backup\\core\\volume_tick_router.py": {
      "file": "cleanup_backup\\core\\volume_tick_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\wallet_echo_monitor.py": {
      "file": "cleanup_backup\\core\\wallet_echo_monitor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return 0",
        "return []",
        "return {}",
        "placeholder"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "requests"
      ]
    },
    "cleanup_backup\\core\\wall_builder_anomaly_handler.py": {
      "file": "cleanup_backup\\core\\wall_builder_anomaly_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\zbe_position_tracker.py": {
      "file": "cleanup_backup\\core\\zbe_position_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\zpe_core.py": {
      "file": "cleanup_backup\\core\\zpe_core.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\zpe_core_matrix.py": {
      "file": "cleanup_backup\\core\\zpe_core_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\zpe_hybrid_mode_selector.py": {
      "file": "cleanup_backup\\core\\zpe_hybrid_mode_selector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\zpe_integration.py": {
      "file": "cleanup_backup\\core\\zpe_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\zpe_rotational_engine.py": {
      "file": "cleanup_backup\\core\\zpe_rotational_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\__init__.py": {
      "file": "cleanup_backup\\core\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\antipole\\tesseract_bridge.py": {
      "file": "cleanup_backup\\core\\antipole\\tesseract_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\antipole\\vector.py": {
      "file": "cleanup_backup\\core\\antipole\\vector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\antipole\\zbe_controller.py": {
      "file": "cleanup_backup\\core\\antipole\\zbe_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\antipole\\__init__.py": {
      "file": "cleanup_backup\\core\\antipole\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\config\\defaults.py": {
      "file": "cleanup_backup\\core\\config\\defaults.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\config\\logging_config.py": {
      "file": "cleanup_backup\\core\\config\\logging_config.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\config\\manager.py": {
      "file": "cleanup_backup\\core\\config\\manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\config\\unifier.py": {
      "file": "cleanup_backup\\core\\config\\unifier.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\config\\validator.py": {
      "file": "cleanup_backup\\core\\config\\validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\config\\__init__.py": {
      "file": "cleanup_backup\\core\\config\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\data\\data_provider.py": {
      "file": "cleanup_backup\\core\\data\\data_provider.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\data\\provider.py": {
      "file": "cleanup_backup\\core\\data\\provider.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\exchange_apis\\base_api.py": {
      "file": "cleanup_backup\\core\\exchange_apis\\base_api.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "requests"
      ]
    },
    "cleanup_backup\\core\\exchange_apis\\coinbase_api.py": {
      "file": "cleanup_backup\\core\\exchange_apis\\coinbase_api.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\exchange_apis\\__init__.py": {
      "file": "cleanup_backup\\core\\exchange_apis\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "cleanup_backup\\core\\ghost\\ghost_conditionals.py": {
      "file": "cleanup_backup\\core\\ghost\\ghost_conditionals.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ghost\\ghost_news_vectorizer.py": {
      "file": "cleanup_backup\\core\\ghost\\ghost_news_vectorizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ghost\\ghost_phase_integrator.py": {
      "file": "cleanup_backup\\core\\ghost\\ghost_phase_integrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\ghost\\__init__.py": {
      "file": "cleanup_backup\\core\\ghost\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "cleanup_backup\\core\\glyph\\conditional_feedback_loop.py": {
      "file": "cleanup_backup\\core\\glyph\\conditional_feedback_loop.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\glyph\\recursive_glyph_mapper.py": {
      "file": "cleanup_backup\\core\\glyph\\recursive_glyph_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\glyph\\__init__.py": {
      "file": "cleanup_backup\\core\\glyph\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "cleanup_backup\\core\\lantern\\lexicon_engine.py": {
      "file": "cleanup_backup\\core\\lantern\\lexicon_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\lantern\\profit_story_engine.py": {
      "file": "cleanup_backup\\core\\lantern\\profit_story_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\lantern\\story_parser.py": {
      "file": "cleanup_backup\\core\\lantern\\story_parser.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\lantern\\trigger.py": {
      "file": "cleanup_backup\\core\\lantern\\trigger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\lantern\\vector_memory.py": {
      "file": "cleanup_backup\\core\\lantern\\vector_memory.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\lantern\\word_fitness_tracker.py": {
      "file": "cleanup_backup\\core\\lantern\\word_fitness_tracker.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\lantern\\__init__.py": {
      "file": "cleanup_backup\\core\\lantern\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "cleanup_backup\\core\\logic\\swap_decision.py": {
      "file": "cleanup_backup\\core\\logic\\swap_decision.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\math\\complete_system_integration_validator.py": {
      "file": "cleanup_backup\\core\\math\\complete_system_integration_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\math\\integration_validator.py": {
      "file": "cleanup_backup\\core\\math\\integration_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\math\\tensor_algebra.py": {
      "file": "cleanup_backup\\core\\math\\tensor_algebra.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\matrix\\fault_resolver.py": {
      "file": "cleanup_backup\\core\\matrix\\fault_resolver.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from "
      ]
    },
    "cleanup_backup\\core\\matrix\\strategy_matrix.py": {
      "file": "cleanup_backup\\core\\matrix\\strategy_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\matrix\\__init__.py": {
      "file": "cleanup_backup\\core\\matrix\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "cleanup_backup\\core\\memory_stack\\ai_command_sequencer.py": {
      "file": "cleanup_backup\\core\\memory_stack\\ai_command_sequencer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\memory_stack\\command_density_analyzer.py": {
      "file": "cleanup_backup\\core\\memory_stack\\command_density_analyzer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\memory_stack\\execution_validator.py": {
      "file": "cleanup_backup\\core\\memory_stack\\execution_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "placeholder"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\memory_stack\\memory_hash_rotator.py": {
      "file": "cleanup_backup\\core\\memory_stack\\memory_hash_rotator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\memory_stack\\memory_key_allocator.py": {
      "file": "cleanup_backup\\core\\memory_stack\\memory_key_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\memory_stack\\trust_feedback_updater.py": {
      "file": "cleanup_backup\\core\\memory_stack\\trust_feedback_updater.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return []"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\phantom\\entry_logic.py": {
      "file": "cleanup_backup\\core\\phantom\\entry_logic.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\phantom\\exit_logic.py": {
      "file": "cleanup_backup\\core\\phantom\\exit_logic.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\phantom\\price_vector_synchronizer.py": {
      "file": "cleanup_backup\\core\\phantom\\price_vector_synchronizer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\phantom\\__init__.py": {
      "file": "cleanup_backup\\core\\phantom\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "cleanup_backup\\core\\phase_engine\\basket_phase_map.py": {
      "file": "cleanup_backup\\core\\phase_engine\\basket_phase_map.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\phase_engine\\basket_phase_map_backup.py": {
      "file": "cleanup_backup\\core\\phase_engine\\basket_phase_map_backup.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\phase_engine\\data_provider.py": {
      "file": "cleanup_backup\\core\\phase_engine\\data_provider.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\phase_engine\\phase_loader.py": {
      "file": "cleanup_backup\\core\\phase_engine\\phase_loader.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()",
        "pandas"
      ]
    },
    "cleanup_backup\\core\\phase_engine\\phase_logger.py": {
      "file": "cleanup_backup\\core\\phase_engine\\phase_logger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\phase_engine\\phase_map.py": {
      "file": "cleanup_backup\\core\\phase_engine\\phase_map.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\phase_engine\\phase_metrics_engine.py": {
      "file": "cleanup_backup\\core\\phase_engine\\phase_metrics_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return 0",
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\phase_engine\\sha_mapper.py": {
      "file": "cleanup_backup\\core\\phase_engine\\sha_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\phase_engine\\swap_controller.py": {
      "file": "cleanup_backup\\core\\phase_engine\\swap_controller.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\phase_engine\\__init__.py": {
      "file": "cleanup_backup\\core\\phase_engine\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\profit\\cycle_allocator.py": {
      "file": "cleanup_backup\\core\\profit\\cycle_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\profit\\__init__.py": {
      "file": "cleanup_backup\\core\\profit\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "cleanup_backup\\core\\recursive_engine\\integrator.py": {
      "file": "cleanup_backup\\core\\recursive_engine\\integrator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\recursive_engine\\math_functions.py": {
      "file": "cleanup_backup\\core\\recursive_engine\\math_functions.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\recursive_engine\\primary_loop.py": {
      "file": "cleanup_backup\\core\\recursive_engine\\primary_loop.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\recursive_engine\\profit_memory_vault.py": {
      "file": "cleanup_backup\\core\\recursive_engine\\profit_memory_vault.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\recursive_engine\\recursive_strategy_handler.py": {
      "file": "cleanup_backup\\core\\recursive_engine\\recursive_strategy_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\recursive_engine\\signal_processor.py": {
      "file": "cleanup_backup\\core\\recursive_engine\\signal_processor.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\recursive_engine\\vault_reentry_pipeline.py": {
      "file": "cleanup_backup\\core\\recursive_engine\\vault_reentry_pipeline.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\recursive_engine\\__init__.py": {
      "file": "cleanup_backup\\core\\recursive_engine\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\secr\\adaptive_icap.py": {
      "file": "cleanup_backup\\core\\secr\\adaptive_icap.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\secr\\allocator.py": {
      "file": "cleanup_backup\\core\\secr\\allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\secr\\coordinator.py": {
      "file": "cleanup_backup\\core\\secr\\coordinator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\secr\\failure_logger.py": {
      "file": "cleanup_backup\\core\\secr\\failure_logger.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\secr\\injector.py": {
      "file": "cleanup_backup\\core\\secr\\injector.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\secr\\resolver_matrix.py": {
      "file": "cleanup_backup\\core\\secr\\resolver_matrix.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\secr\\watchdog.py": {
      "file": "cleanup_backup\\core\\secr\\watchdog.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\secr\\__init__.py": {
      "file": "cleanup_backup\\core\\secr\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tests\\test_antipole_integration.py": {
      "file": "cleanup_backup\\core\\tests\\test_antipole_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tests\\test_apcf_functionality.py": {
      "file": "cleanup_backup\\core\\tests\\test_apcf_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tests\\test_config_functionality.py": {
      "file": "cleanup_backup\\core\\tests\\test_config_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tests\\test_config_loading_functionality.py": {
      "file": "cleanup_backup\\core\\tests\\test_config_loading_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tests\\test_enhanced_tesseract_processor_functionality.py": {
      "file": "cleanup_backup\\core\\tests\\test_enhanced_tesseract_processor_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tests\\test_gpu_offload_functionality.py": {
      "file": "cleanup_backup\\core\\tests\\test_gpu_offload_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tests\\test_mathlib_functionality.py": {
      "file": "cleanup_backup\\core\\tests\\test_mathlib_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tests\\test_schwafit_core_functionality.py": {
      "file": "cleanup_backup\\core\\tests\\test_schwafit_core_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tests\\test_strategy_loader_functionality.py": {
      "file": "cleanup_backup\\core\\tests\\test_strategy_loader_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tests\\test_zygote_propagation_engine_functionality.py": {
      "file": "cleanup_backup\\core\\tests\\test_zygote_propagation_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\tests\\test_zygot_shell_functionality.py": {
      "file": "cleanup_backup\\core\\tests\\test_zygot_shell_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\core\\trading_models\\containers.py": {
      "file": "cleanup_backup\\core\\trading_models\\containers.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "class ",
        "import ",
        "from ",
        "requests"
      ]
    },
    "cleanup_backup\\core\\trading_models\\enums.py": {
      "file": "cleanup_backup\\core\\trading_models\\enums.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "class ",
        "import ",
        "from "
      ]
    },
    "cleanup_backup\\core\\trading_models\\__init__.py": {
      "file": "cleanup_backup\\core\\trading_models\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "cleanup_backup\\core\\utils\\cli_handler.py": {
      "file": "cleanup_backup\\core\\utils\\cli_handler.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\core\\utils\\math_utils.py": {
      "file": "cleanup_backup\\core\\utils\\math_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None",
        "return 0"
      ],
      "error_indicators": [
        "TypeError"
      ],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return ",
        "numpy"
      ]
    },
    "cleanup_backup\\core\\utils\\rate_limiter.py": {
      "file": "cleanup_backup\\core\\utils\\rate_limiter.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "requests"
      ]
    },
    "cleanup_backup\\core\\utils\\windows_cli_compatibility.py": {
      "file": "cleanup_backup\\core\\utils\\windows_cli_compatibility.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return None"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\utils\\yaml_config_loader.py": {
      "file": "cleanup_backup\\core\\utils\\yaml_config_loader.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\core\\utils\\__init__.py": {
      "file": "cleanup_backup\\core\\utils\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "import ",
        "from "
      ]
    },
    "cleanup_backup\\core\\config\\tesseract\\config_loader.py": {
      "file": "cleanup_backup\\core\\config\\tesseract\\config_loader.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\bit_phase_engine.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\bit_phase_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\bit_resolution_engine.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\bit_resolution_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\dlt_waveform_engine.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\dlt_waveform_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\entropy_validator.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\entropy_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ModuleNotFoundError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\fallback_logic_router.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\fallback_logic_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [
        "ImportError",
        "ModuleNotFoundError",
        "AttributeError",
        "TypeError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\hash_registry.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\hash_registry.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\hash_registry_manager.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\hash_registry_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\matrix_mapper.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\matrix_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\meta_layer_ghost_bridge.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\meta_layer_ghost_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\phantom_lag_model.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\phantom_lag_model.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\profit_cycle_allocator.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\profit_cycle_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\profit_routing_engine.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\profit_routing_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\tensor_matcher.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\tensor_matcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\tensor_score_utils.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\tensor_score_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "numpy"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\mathlib\\matrix_fault_resolver.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\mathlib\\matrix_fault_resolver.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\mathlib\\memkey_sync.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\mathlib\\memkey_sync.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\mathlib\\persistent_homology.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\mathlib\\persistent_homology.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\mathlib\\quantum_strategy.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\mathlib\\quantum_strategy.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_dcc_sync_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_dcc_sync_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_gpu_flash_engine_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_gpu_flash_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_hash_intelligence_debug_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_hash_intelligence_debug_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_matrix_fault_resolver_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_matrix_fault_resolver_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_memkey_sync_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_memkey_sync_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\mathlib\\__init__.py": {
      "status": "syntax_error",
      "file": "cleanup_backup\\critical_math_20250624_222404\\mathlib\\__init__.py",
      "error": "Syntax error - cannot parse"
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\math\\complete_system_integration_validator.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\math\\complete_system_integration_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\math\\integration_validator.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\math\\integration_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222404\\core\\math\\tensor_algebra.py": {
      "file": "cleanup_backup\\critical_math_20250624_222404\\core\\math\\tensor_algebra.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\bit_phase_engine.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\bit_phase_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\bit_resolution_engine.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\bit_resolution_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\dlt_waveform_engine.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\dlt_waveform_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\entropy_validator.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\entropy_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ModuleNotFoundError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\fallback_logic_router.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\fallback_logic_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [
        "ImportError",
        "ModuleNotFoundError",
        "AttributeError",
        "TypeError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\hash_registry.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\hash_registry.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\hash_registry_manager.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\hash_registry_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\matrix_mapper.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\matrix_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\meta_layer_ghost_bridge.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\meta_layer_ghost_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\phantom_lag_model.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\phantom_lag_model.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\profit_cycle_allocator.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\profit_cycle_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\profit_routing_engine.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\profit_routing_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\tensor_matcher.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\tensor_matcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\tensor_score_utils.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\tensor_score_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "numpy"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\mathlib\\matrix_fault_resolver.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\mathlib\\matrix_fault_resolver.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\mathlib\\memkey_sync.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\mathlib\\memkey_sync.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\mathlib\\persistent_homology.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\mathlib\\persistent_homology.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\mathlib\\quantum_strategy.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\mathlib\\quantum_strategy.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_dcc_sync_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_dcc_sync_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_gpu_flash_engine_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_gpu_flash_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_hash_intelligence_debug_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_hash_intelligence_debug_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_matrix_fault_resolver_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_matrix_fault_resolver_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_memkey_sync_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_memkey_sync_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\mathlib\\__init__.py": {
      "status": "syntax_error",
      "file": "cleanup_backup\\critical_math_20250624_222415\\mathlib\\__init__.py",
      "error": "Syntax error - cannot parse"
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\math\\complete_system_integration_validator.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\math\\complete_system_integration_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\math\\integration_validator.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\math\\integration_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222415\\core\\math\\tensor_algebra.py": {
      "file": "cleanup_backup\\critical_math_20250624_222415\\core\\math\\tensor_algebra.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\bit_phase_engine.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\bit_phase_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\bit_resolution_engine.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\bit_resolution_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\dlt_waveform_engine.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\dlt_waveform_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\entropy_validator.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\entropy_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [
        "ModuleNotFoundError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\fallback_logic_router.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\fallback_logic_router.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [
        "ImportError",
        "ModuleNotFoundError",
        "AttributeError",
        "TypeError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\hash_registry.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\hash_registry.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0",
        "return {}"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\hash_registry_manager.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\hash_registry_manager.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\matrix_mapper.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\matrix_mapper.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\meta_layer_ghost_bridge.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\meta_layer_ghost_bridge.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0",
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\phantom_lag_model.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\phantom_lag_model.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\profit_cycle_allocator.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\profit_cycle_allocator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\profit_routing_engine.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\profit_routing_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\tensor_matcher.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\tensor_matcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\tensor_score_utils.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\tensor_score_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return None",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "numpy"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\mathlib\\matrix_fault_resolver.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\mathlib\\matrix_fault_resolver.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\mathlib\\memkey_sync.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\mathlib\\memkey_sync.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\mathlib\\persistent_homology.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\mathlib\\persistent_homology.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return []",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\mathlib\\quantum_strategy.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\mathlib\\quantum_strategy.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_dcc_sync_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_dcc_sync_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_gpu_flash_engine_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_gpu_flash_engine_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_hash_intelligence_debug_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_hash_intelligence_debug_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_matrix_fault_resolver_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_matrix_fault_resolver_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_memkey_sync_functionality.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_memkey_sync_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\mathlib\\__init__.py": {
      "status": "syntax_error",
      "file": "cleanup_backup\\critical_math_20250624_222447\\mathlib\\__init__.py",
      "error": "Syntax error - cannot parse"
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\math\\complete_system_integration_validator.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\math\\complete_system_integration_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\math\\integration_validator.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\math\\integration_validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass",
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "cleanup_backup\\critical_math_20250624_222447\\core\\math\\tensor_algebra.py": {
      "file": "cleanup_backup\\critical_math_20250624_222447\\core\\math\\tensor_algebra.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return {}"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "demo\\demo_launcher.py": {
      "file": "demo\\demo_launcher.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "demo\\demo_logic_flow.py": {
      "file": "demo\\demo_logic_flow.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "demo\\demo_trade_sequence.py": {
      "file": "demo\\demo_trade_sequence.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__"
      ]
    },
    "engine\\strategy_logic.py": {
      "file": "engine\\strategy_logic.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "engine\\__init__.py": {
      "file": "engine\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "examples\\btc_mining_analysis_demo.py": {
      "file": "examples\\btc_mining_analysis_demo.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "examples\\btc_processor_control_demo.py": {
      "file": "examples\\btc_processor_control_demo.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "examples\\ccxt_trading_demo.py": {
      "status": "syntax_error",
      "file": "examples\\ccxt_trading_demo.py",
      "error": "Syntax error - cannot parse"
    },
    "examples\\enhanced_hooks_usage.py": {
      "status": "syntax_error",
      "file": "examples\\enhanced_hooks_usage.py",
      "error": "Syntax error - cannot parse"
    },
    "examples\\enhanced_system_demo.py": {
      "status": "syntax_error",
      "file": "examples\\enhanced_system_demo.py",
      "error": "Syntax error - cannot parse"
    },
    "examples\\hash_recollection_demo.py": {
      "status": "syntax_error",
      "file": "examples\\hash_recollection_demo.py",
      "error": "Syntax error - cannot parse"
    },
    "examples\\integrated_system_demo.py": {
      "status": "syntax_error",
      "file": "examples\\integrated_system_demo.py",
      "error": "Syntax error - cannot parse"
    },
    "examples\\lantern_news_integration_demo.py": {
      "status": "syntax_error",
      "file": "examples\\lantern_news_integration_demo.py",
      "error": "Syntax error - cannot parse"
    },
    "examples\\mathlib_demo.py": {
      "status": "syntax_error",
      "file": "examples\\mathlib_demo.py",
      "error": "Syntax error - cannot parse"
    },
    "examples\\quantum_btc_intelligence_demo.py": {
      "status": "syntax_error",
      "file": "examples\\quantum_btc_intelligence_demo.py",
      "error": "Syntax error - cannot parse"
    },
    "examples\\tesseract_visualization_example.py": {
      "status": "syntax_error",
      "file": "examples\\tesseract_visualization_example.py",
      "error": "Syntax error - cannot parse"
    },
    "examples\\unified_visual_demo.py": {
      "file": "examples\\unified_visual_demo.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "examples\\unified_visual_synthesis_demo.py": {
      "file": "examples\\unified_visual_synthesis_demo.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "init\\__init__.py": {
      "file": "init\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "models\\enums.py": {
      "file": "models\\enums.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "models\\schemas.py": {
      "file": "models\\schemas.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "ncco_core\\harmony_memory.py": {
      "file": "ncco_core\\harmony_memory.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "ncco_core\\ncco_scorer.py": {
      "file": "ncco_core\\ncco_scorer.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "ncco_core\\__init__.py": {
      "file": "ncco_core\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "TODO:"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return "
      ]
    },
    "ncco_core\\tests\\test_ferris_rde_functionality.py": {
      "file": "ncco_core\\tests\\test_ferris_rde_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "ncco_core\\tests\\test_rde_core_functionality.py": {
      "file": "ncco_core\\tests\\test_rde_core_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "ncco_core\\tests\\test_rde_visuals_functionality.py": {
      "file": "ncco_core\\tests\\test_rde_visuals_functionality.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "if __name__",
        "main()"
      ]
    },
    "newmath\\entropy_calc.py": {
      "file": "newmath\\entropy_calc.py",
      "status": "empty",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": []
    },
    "newmath\\hash_vectors.py": {
      "file": "newmath\\hash_vectors.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0",
        "return []"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "newmath\\matrix_utils.py": {
      "file": "newmath\\matrix_utils.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "newmath\\profit_math.py": {
      "file": "newmath\\profit_math.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "newmath\\render_engine.py": {
      "file": "newmath\\render_engine.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "newmath\\tensor_ops.py": {
      "file": "newmath\\tensor_ops.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "return 0"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "newmath\\validation.py": {
      "file": "newmath\\validation.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "newmath\\__init__.py": {
      "file": "newmath\\__init__.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [],
      "functionality_indicators": [
        "def ",
        "import ",
        "from ",
        "return "
      ]
    },
    "runtime\\validator.py": {
      "file": "runtime\\validator.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError",
        "SyntaxError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "tools\\comprehensive_mathematical_integration.py": {
      "file": "tools\\comprehensive_mathematical_integration.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "tools\\consciousness_fusion_test.py": {
      "file": "tools\\consciousness_fusion_test.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [
        "pass"
      ],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "return ",
        "if __name__",
        "main()"
      ]
    },
    "tools\\uros_v1_integration_test.py": {
      "file": "tools\\uros_v1_integration_test.py",
      "status": "working",
      "has_imports": false,
      "has_functions": false,
      "has_classes": false,
      "has_docstrings": false,
      "stub_indicators": [],
      "error_indicators": [
        "ImportError"
      ],
      "functionality_indicators": [
        "def ",
        "class ",
        "import ",
        "from ",
        "if __name__",
        "main()",
        "requests"
      ]
    }
  },
  "categorized_files": {
    "working": [
      "analyze_and_fix_e999_errors.py",
      "analyze_missing_imports.py",
      "architecture_analysis.py",
      "check_syntax.py",
      "comprehensive_fix.py",
      "comprehensive_stub_fixer.py",
      "comprehensive_syntax_cleanup.py",
      "comprehensive_syntax_fixer.py",
      "core\\analysis_engine.py",
      "core\\bare_except_handling_fixes.py",
      "core\\basket_entropy_allocator.py",
      "core\\basket_log_controller.py",
      "core\\basket_swapper.py",
      "core\\basket_swap_logic.py",
      "core\\basket_swap_overlay_router.py",
      "core\\basket_tensor_feedback.py",
      "core\\behavior_pattern_tracker.py",
      "core\\btc_processor_ui.py",
      "core\\btc_tick_matrix_initializer.py",
      "core\\compute_ghost_route.py",
      "core\\config_utils.py",
      "core\\cooldown_manager.py",
      "core\\critical_error_handler.py",
      "core\\cursor_engine.py",
      "core\\cyclic_core.py",
      "core\\drift_exit_detector.py",
      "core\\enhanced_btc_integration_bridge.py",
      "core\\enhanced_gpu_hash_processor.py",
      "core\\enhanced_hooks.py",
      "core\\enhanced_tesseract_processor.py",
      "core\\enhanced_thermal_aware_btc_processor.py",
      "core\\entropy_tracker.py",
      "core\\genesis_core.py",
      "core\\ghost_conditionals.py",
      "core\\ghost_data_recovery.py",
      "core\\ghost_decay.py",
      "core\\ghost_hash_decoder.py",
      "core\\ghost_meta_layer_engine.py",
      "core\\ghost_shadow_tracker.py",
      "core\\gpu_metrics.py",
      "core\\hash_affinity_vault.py",
      "core\\hash_profit_matrix.py",
      "core\\high_frequency_btc_trading_processor.py",
      "core\\historical_ledger_manager.py",
      "core\\hooks.py",
      "core\\hybrid_optimization_manager.py",
      "core\\integrated_pathway_test_suite.py",
      "core\\integrated_profit_correlation_system.py",
      "core\\klein_bottle_integrator.py",
      "core\\lantern_trigger.py",
      "core\\lockout_matrix.py",
      "core\\magic_number_optimization_engine.py",
      "core\\matrix_overlay.py",
      "core\\matrix_overlay_backup.py",
      "core\\matrix_overlay_engine.py",
      "core\\memory_agent.py",
      "core\\memory_map.py",
      "core\\memory_timing_orchestrator.py",
      "core\\news_api_endpoints.py",
      "core\\news_intelligence_engine.py",
      "core\\news_lantern_integration_api.py",
      "core\\news_lantern_mathematical_integration.py",
      "core\\news_profit_api_endpoints.py",
      "core\\news_profit_mathematical_bridge.py",
      "core\\optimized_constants_wrapper.py",
      "core\\orbital_profit_navigator.py",
      "core\\pattern_match_display.py",
      "core\\pattern_utils.py",
      "core\\performance_monitor.py",
      "core\\phase_gate_controller.py",
      "core\\phase_handler.py",
      "core\\pipeline_management_system.py",
      "core\\plot_sign_engine.py",
      "core\\pod_management.py",
      "core\\practical_visual_controller.py",
      "core\\profit_navigator.py",
      "core\\profit_projection.py",
      "core\\profit_protection.py",
      "core\\profit_sweep_allocator.py",
      "core\\profit_tensor.py",
      "core\\profit_trajectory_coprocessor.py",
      "core\\psi_cache.py",
      "core\\quantization_profile.py",
      "core\\quantum_antipole_engine.py",
      "core\\quantum_cellular_risk_monitor.py",
      "core\\quantum_mathematical_pathway_validator.py",
      "core\\react_dashboard_integration.py",
      "core\\recursive_profit.py",
      "core\\render_math_utils.py",
      "core\\resource_sequencer.py",
      "core\\risk_engine.py",
      "core\\risk_indexer.py",
      "core\\schwabot_dashboard.py",
      "core\\schwafit_core.py",
      "core\\sequencer_engine.py",
      "core\\sfsss_router.py",
      "core\\sfsss_strategy_bundler.py",
      "core\\shell_memory_evolution_fixes.py",
      "core\\shell_portal_mapper.py",
      "core\\shift_profit_engine.py",
      "core\\simplified_api.py",
      "core\\snapshot_logger.py",
      "core\\spectral_state.py",
      "core\\strange_loop_detector.py",
      "core\\strategic_dormancy.py",
      "core\\strategy_config.py",
      "core\\strategy_execution_mapper.py",
      "core\\strategy_loop_executor.py",
      "core\\strategy_sustainment_validator.py",
      "core\\sustainment_gan_integration_demo.py",
      "core\\sustainment_integration_hooks.py",
      "core\\sustainment_principles.py",
      "core\\sustainment_underlay_controller.py",
      "core\\system_clock_sequencer.py",
      "core\\system_constants.py",
      "core\\system_constants_example.py",
      "core\\system_orchestrator.py",
      "core\\tensor_visualization_controller.py",
      "core\\tesseract_processor.py",
      "core\\tesseract_visualizer.py",
      "core\\test_complete_system_functionality.py",
      "core\\test_enhanced_fractal_functionality.py",
      "core\\test_enhanced_systems_functionality.py",
      "core\\test_recursive_profit_engine_functionality.py",
      "core\\test_simple_enhanced_functionality.py",
      "core\\thermal_integration_demo.py",
      "core\\thermal_performance_tracker.py",
      "core\\thermal_system_integration.py",
      "core\\thermal_visual_integration.py",
      "core\\thermal_zone_manager_mock.py",
      "core\\tick_management_system.py",
      "core\\time_entropy_edge_case.py",
      "core\\timing_manager.py",
      "core\\trade_tensor_router.py",
      "core\\ufs_echo_logger.py",
      "core\\ufs_registry.py",
      "core\\ump_pipeline.py",
      "core\\unified_observability_tensor.py",
      "core\\unified_visual_controller.py",
      "core\\unified_visual_synthesis_controller.py",
      "core\\validation_manager.py",
      "core\\vault_router.py",
      "core\\vector_matcher.py",
      "core\\__init__.py",
      "core\\antipole\\tesseract_bridge.py",
      "core\\antipole\\vector.py",
      "core\\antipole\\zbe_controller.py",
      "core\\antipole\\__init__.py",
      "core\\config\\defaults.py",
      "core\\config\\logging_config.py",
      "core\\config\\manager.py",
      "core\\config\\unifier.py",
      "core\\config\\validator.py",
      "core\\config\\__init__.py",
      "core\\data\\data_provider.py",
      "core\\data\\provider.py",
      "core\\exchange_apis\\__init__.py",
      "core\\ghost\\__init__.py",
      "core\\glyph\\conditional_feedback_loop.py",
      "core\\glyph\\__init__.py",
      "core\\lantern\\lexicon_engine.py",
      "core\\lantern\\profit_story_engine.py",
      "core\\lantern\\story_parser.py",
      "core\\lantern\\trigger.py",
      "core\\lantern\\word_fitness_tracker.py",
      "core\\lantern\\__init__.py",
      "core\\logic\\swap_decision.py",
      "core\\matrix\\__init__.py",
      "core\\phantom\\__init__.py",
      "core\\phase_engine\\basket_phase_map_backup.py",
      "core\\phase_engine\\data_provider.py",
      "core\\profit\\__init__.py",
      "core\\recursive_engine\\integrator.py",
      "core\\recursive_engine\\math_functions.py",
      "core\\recursive_engine\\primary_loop.py",
      "core\\recursive_engine\\profit_memory_vault.py",
      "core\\recursive_engine\\recursive_strategy_handler.py",
      "core\\recursive_engine\\signal_processor.py",
      "core\\recursive_engine\\vault_reentry_pipeline.py",
      "core\\recursive_engine\\__init__.py",
      "core\\secr\\adaptive_icap.py",
      "core\\secr\\allocator.py",
      "core\\secr\\coordinator.py",
      "core\\secr\\failure_logger.py",
      "core\\secr\\injector.py",
      "core\\secr\\resolver_matrix.py",
      "core\\secr\\watchdog.py",
      "core\\secr\\__init__.py",
      "core\\tests\\test_antipole_integration.py",
      "core\\tests\\test_apcf_functionality.py",
      "core\\tests\\test_config_functionality.py",
      "core\\tests\\test_config_loading_functionality.py",
      "core\\tests\\test_enhanced_tesseract_processor_functionality.py",
      "core\\tests\\test_gpu_offload_functionality.py",
      "core\\tests\\test_mathlib_functionality.py",
      "core\\tests\\test_schwafit_core_functionality.py",
      "core\\tests\\test_strategy_loader_functionality.py",
      "core\\tests\\test_zygote_propagation_engine_functionality.py",
      "core\\tests\\test_zygot_shell_functionality.py",
      "core\\trading_models\\enums.py",
      "core\\trading_models\\__init__.py",
      "core\\config\\tesseract\\config_loader.py",
      "debug_imports.py",
      "demo_cli_compatibility.py",
      "enhanced_fitness_oracle.py",
      "enhanced_phase_risk_manager.py",
      "filter_real_errors.py",
      "fix_all_stub_syntax_errors.py",
      "fix_common_errors.py",
      "fix_core_e999_errors.py",
      "fix_core_final_syntax.py",
      "fix_core_indentation_final.py",
      "fix_core_init_comprehensive.py",
      "fix_core_syntax_errors.py",
      "fix_critical_errors.py",
      "fix_e128_precise.py",
      "fix_e305_blank_lines.py",
      "fix_e999_critical_syntax.py",
      "fix_e999_final.py",
      "fix_e999_line_by_line.py",
      "fix_e999_precise.py",
      "fix_f811_redefinitions.py",
      "fix_f821_undefined_names.py",
      "fix_final_tools_errors.py",
      "fix_hash_vectors.py",
      "fix_import_after_try_pattern.py",
      "fix_import_paths.py",
      "fix_indentation.py",
      "fix_remaining_critical_errors.py",
      "fix_remaining_e999_errors.py",
      "fix_remaining_syntax_errors.py",
      "fix_systematic_errors.py",
      "fix_tools_errors.py",
      "fix_uros_indentation.py",
      "fractal_command_dispatcher.py",
      "fractal_containment_lock.py",
      "ghost_strategy_integration_demo.py",
      "hash_trigger_system_summary.py",
      "integrate_enhanced_phase_risk.py",
      "launch_comprehensive_architecture_fix.py",
      "master_syntax_fixer.py",
      "pipeline_integration_manager.py",
      "quantum_drift_shell_engine.py",
      "refactor_cli_output.py",
      "run_schwabot.py",
      "run_type_enforcer.py",
      "schwabot\\instruction_listener.py",
      "schwabot\\ufs_app.py",
      "schwabot\\ai_oracles\\fitness_oracle.py",
      "schwabot\\ai_oracles\\reigime_oracle.py",
      "schwabot\\core\\access_controller.py",
      "schwabot\\core\\access_validator.py",
      "schwabot\\core\\action_selector.py",
      "schwabot\\core\\adapter_manager.py",
      "schwabot\\core\\aleph_unitizer.py",
      "schwabot\\core\\alert_dispatcher.py",
      "schwabot\\core\\alert_manager.py",
      "schwabot\\core\\algorithm_optimizer.py",
      "schwabot\\core\\api_documenter.py",
      "schwabot\\core\\api_integrator.py",
      "schwabot\\core\\archive_creator.py",
      "schwabot\\core\\archive_extractor.py",
      "schwabot\\core\\archive_manager.py",
      "schwabot\\core\\archive_validator.py",
      "schwabot\\core\\audit_logger.py",
      "schwabot\\core\\audit_manager.py",
      "schwabot\\core\\audit_reporter.py",
      "schwabot\\core\\audit_trail.py",
      "schwabot\\core\\authorization_manager.py",
      "schwabot\\core\\backup_creator.py",
      "schwabot\\core\\backup_restorer.py",
      "schwabot\\core\\bootstrap.py",
      "schwabot\\core\\cache_invalidator.py",
      "schwabot\\core\\cache_manager.py",
      "schwabot\\core\\cache_optimizer.py",
      "schwabot\\core\\choice_optimizer.py",
      "schwabot\\core\\chunk_mapper.py",
      "schwabot\\core\\chunk_router.py",
      "schwabot\\core\\cleanup_handler.py",
      "schwabot\\core\\communication_handler.py",
      "schwabot\\core\\complexity_analyzer.py",
      "schwabot\\core\\complex_number_handler.py",
      "schwabot\\core\\compliance_monitor.py",
      "schwabot\\core\\component_connector.py",
      "schwabot\\core\\connection_manager.py",
      "schwabot\\core\\connection_pool.py",
      "schwabot\\core\\consistency_checker.py",
      "schwabot\\core\\context_retriever.py",
      "schwabot\\core\\convergence_analyzer.py",
      "schwabot\\core\\correlation_finder.py",
      "schwabot\\core\\cron_handler.py",
      "schwabot\\core\\data_aggregator.py",
      "schwabot\\core\\data_exporter.py",
      "schwabot\\core\\data_importer.py",
      "schwabot\\core\\data_migrator.py",
      "schwabot\\core\\data_transformer.py",
      "schwabot\\core\\data_validator.py",
      "schwabot\\core\\diagnostics_manager.py",
      "schwabot\\core\\disaster_recovery.py",
      "schwabot\\core\\doc_generator.py",
      "schwabot\\core\\drem_controller.py",
      "schwabot\\core\\drem_router.py",
      "schwabot\\core\\drem_strategy.py",
      "schwabot\\core\\edos_processor.py",
      "schwabot\\core\\efficiency_calculator.py",
      "schwabot\\core\\email_sender.py",
      "schwabot\\core\\empty.py",
      "schwabot\\core\\encryption_handler.py",
      "schwabot\\core\\enhanced_tesseract_processor.py",
      "schwabot\\core\\entropy_calculator.py",
      "schwabot\\core\\environment_setup.py",
      "schwabot\\core\\event_logger.py",
      "schwabot\\core\\example_creator.py",
      "schwabot\\core\\experience_storer.py",
      "schwabot\\core\\experimental.py",
      "schwabot\\core\\export_manager.py",
      "schwabot\\core\\extension_interface.py",
      "schwabot\\core\\extension_loader.py",
      "schwabot\\core\\extension_manager.py",
      "schwabot\\core\\extension_registry.py",
      "schwabot\\core\\external_handler.py",
      "schwabot\\core\\feedback_processor.py",
      "schwabot\\core\\flow_director.py",
      "schwabot\\core\\forecast_generator.py",
      "schwabot\\core\\format_adapter.py",
      "schwabot\\core\\fractal_generator.py",
      "schwabot\\core\\gpu_offload_manager.py",
      "schwabot\\core\\grant_handler.py",
      "schwabot\\core\\health_checker.py",
      "schwabot\\core\\http_handler.py",
      "schwabot\\core\\import_manager.py",
      "schwabot\\core\\improvement_analyzer.py",
      "schwabot\\core\\initializer.py",
      "schwabot\\core\\integral_calculator.py",
      "schwabot\\core\\integration_manager.py",
      "schwabot\\core\\integrity_verifier.py",
      "schwabot\\core\\interface_adapter.py",
      "schwabot\\core\\interface_manager.py",
      "schwabot\\core\\job_controller.py",
      "schwabot\\core\\job_scheduler.py",
      "schwabot\\core\\knowledge_accumulator.py",
      "schwabot\\core\\launcher.py",
      "schwabot\\core\\learning_engine.py",
      "schwabot\\core\\legacy_support.py",
      "schwabot\\core\\log_manager.py",
      "schwabot\\core\\maintenance_manager.py",
      "schwabot\\core\\mathlib.py",
      "schwabot\\core\\matrix_synthesizer.py",
      "schwabot\\core\\memory_manager.py",
      "schwabot\\core\\message_dispatcher.py",
      "schwabot\\core\\message_processor.py",
      "schwabot\\core\\migration_manager.py",
      "schwabot\\core\\migration_validator.py",
      "schwabot\\core\\module_coordinator.py",
      "schwabot\\core\\monitoring_agent.py",
      "schwabot\\core\\nonlinear_optimizer.py",
      "schwabot\\core\\notification_manager.py",
      "schwabot\\core\\optimization_runner.py",
      "schwabot\\core\\outcome_estimator.py",
      "schwabot\\core\\parameter_loader.py",
      "schwabot\\core\\pattern_recognizer.py",
      "schwabot\\core\\permission_checker.py",
      "schwabot\\core\\permission_validator.py",
      "schwabot\\core\\pipeline_manager.py",
      "schwabot\\core\\placeholder.py",
      "schwabot\\core\\plugin_interface.py",
      "schwabot\\core\\plugin_loader.py",
      "schwabot\\core\\plugin_manager.py",
      "schwabot\\core\\plugin_registry.py",
      "schwabot\\core\\prediction_engine.py",
      "schwabot\\core\\process_supervisor.py",
      "schwabot\\core\\protocol_adapter.py",
      "schwabot\\core\\protocol_handler.py",
      "schwabot\\core\\protocol_manager.py",
      "schwabot\\core\\quality_assessor.py",
      "schwabot\\core\\quantum_entangler.py",
      "schwabot\\core\\quantum_mathlib.py",
      "schwabot\\core\\query_executor.py",
      "schwabot\\core\\qutrit_processor.py",
      "schwabot\\core\\recall_optimizer.py",
      "schwabot\\core\\recovery_manager.py",
      "schwabot\\core\\recursive_market_oracle.py",
      "schwabot\\core\\report_manager.py",
      "schwabot\\core\\request_processor.py",
      "schwabot\\core\\response_builder.py",
      "schwabot\\core\\response_evaluator.py",
      "schwabot\\core\\rights_manager.py",
      "schwabot\\core\\role_manager.py",
      "schwabot\\core\\scalar_laws.py",
      "schwabot\\core\\scheduler_manager.py",
      "schwabot\\core\\schema_migrator.py",
      "schwabot\\core\\schwafit_core.py",
      "schwabot\\core\\security_manager.py",
      "schwabot\\core\\sequence_manager.py",
      "schwabot\\core\\service_connector.py",
      "schwabot\\core\\session_manager.py",
      "schwabot\\core\\settings_handler.py",
      "schwabot\\core\\signal_router.py",
      "schwabot\\core\\skill_developer.py",
      "schwabot\\core\\socket_handler.py",
      "schwabot\\core\\stage_executor.py",
      "schwabot\\core\\state_recovery.py",
      "schwabot\\core\\statistical_analyzer.py",
      "schwabot\\core\\statistics_collector.py",
      "schwabot\\core\\strategy_config.py",
      "schwabot\\core\\strategy_executor.py",
      "schwabot\\core\\summary_generator.py",
      "schwabot\\core\\system_analyzer.py",
      "schwabot\\core\\system_integrator.py",
      "schwabot\\core\\system_restorer.py",
      "schwabot\\core\\task_dispatcher.py",
      "schwabot\\core\\task_scheduler.py",
      "schwabot\\core\\tensor_manipulator.py",
      "schwabot\\core\\test_fixtures.py",
      "schwabot\\core\\test_runner.py",
      "schwabot\\core\\test_suite.py",
      "schwabot\\core\\test_utilities.py",
      "schwabot\\core\\token_handler.py",
      "schwabot\\core\\topology_analyzer.py",
      "schwabot\\core\\trend_analyzer.py",
      "schwabot\\core\\tutorial_builder.py",
      "schwabot\\core\\user_authenticator.py",
      "schwabot\\core\\validation_engine.py",
      "schwabot\\core\\vector_space_analyzer.py",
      "schwabot\\core\\visualization.py",
      "schwabot\\core\\visual_reporter.py",
      "schwabot\\core\\web_server.py",
      "schwabot\\core\\__init__.py",
      "schwabot\\core\\config\\defaults.py",
      "schwabot\\core\\config\\__init__.py",
      "schwabot\\core\\tests\\test_schwafit_core_functionality.py",
      "schwabot\\init\\omni_shell\\lotus_omni_mesh.py",
      "schwabot\\init\\omni_shell\\lotus_tick_hash_feed.py",
      "schwabot\\init\\omni_shell\\main_event_loop.py",
      "schwabot\\init\\omni_shell\\mesh_to_shell_sync.py",
      "schwabot_integration.py",
      "schwabot_system_init.py",
      "schwabot_unified_system.py",
      "selective_syntax_fixer.py",
      "setup.py",
      "simple_cli_refactor.py",
      "simple_stub_fixer.py",
      "system_validation.py",
      "system_validation_comprehensive.py",
      "targeted_stub_fixer.py",
      "time_lattice_fork.py",
      "validate_components.py",
      "visual_fallbacks.py",
      "execute_mathematical_cleanup.py",
      "fix_mathlib_syntax.py",
      "mathlib\\matrix_fault_resolver.py",
      "mathlib\\memkey_sync.py",
      "mathlib\\persistent_homology.py",
      "mathlib\\quantum_strategy.py",
      "mathlib\\test_dcc_sync_functionality.py",
      "mathlib\\test_gpu_flash_engine_functionality.py",
      "mathlib\\test_hash_intelligence_debug_functionality.py",
      "mathlib\\test_matrix_fault_resolver_functionality.py",
      "mathlib\\test_memkey_sync_functionality.py",
      "mathlib\\__init__.py",
      "refactor_math_logic.py",
      "schwabot_unified_math.py",
      "test_mathematical_integration.py",
      "test_mathematical_trading_system_integration.py",
      "test_multi_bit_btc_processor.py",
      "test_simple_multi_bit_btc.py",
      "build_packages.py",
      "ui\\schwabot_dashboard.py",
      "utils\\file_integrity_checker.py",
      "utils\\fractal_injection.py",
      "utils\\hash_validator.py",
      "utils\\logging_setup.py",
      "utils\\safe_print.py",
      "comprehensive_system_test.py",
      "simple_test.py",
      "system_integration_test.py",
      "tests\\recursive_awareness_benchmark.py",
      "tests\\run_missing_definitions_validation.py",
      "tests\\test_antipole_state_export_validation_verification.py",
      "tests\\test_api_price_entry_feedback.py",
      "tests\\test_backlog_test_loop_validator.py",
      "tests\\test_basket_phase_map_functionality.py",
      "tests\\test_btc_processor_functionality.py",
      "tests\\test_ccxt_integration.py",
      "tests\\test_cluster_mapper_functionality.py",
      "tests\\test_config_loader_cwd_functionality.py",
      "tests\\test_config_loading_functionality.py",
      "tests\\test_cooldown_manager_functionality.py",
      "tests\\test_core_engines.py",
      "tests\\test_dashboard_integration.py",
      "tests\\test_dlt_waveform_module_function_validation_verification.py",
      "tests\\test_drift_shell_engine_functionality.py",
      "tests\\test_enhanced_fractal_functionality.py",
      "tests\\test_enhanced_hooks_functionality.py",
      "tests\\test_enhanced_sustainment_framework_functionality.py",
      "tests\\test_entry_exit_sequence_integrity.py",
      "tests\\test_fallback_trade_controller.py",
      "tests\\test_fault_bus_functionality.py",
      "tests\\test_fractal_config_functionality.py",
      "tests\\test_fractal_integration.py",
      "tests\\test_fractal_sync.py",
      "tests\\test_future_corridor_engine_functionality.py",
      "tests\\test_gpu_flash_engine_functionality.py",
      "tests\\test_gpu_sustainment_operations_validation_verification.py",
      "tests\\test_hash_recollection_functionality.py",
      "tests\\test_hash_recollection_system_functionality.py",
      "tests\\test_legacy_backlog_hydrator.py",
      "tests\\test_lexicon_engine_functionality.py",
      "tests\\test_mathematical_implementation_completeness_functionality.py",
      "tests\\test_mathematical_integration.py",
      "tests\\test_mathlib_functionality.py",
      "tests\\test_matrix_mapping_validation.py",
      "tests\\test_news_intelligence_system_functionality.py",
      "tests\\test_phase_map_entry_and_transition_functionality.py",
      "tests\\test_phase_metrics_engine_functionality.py",
      "tests\\test_plot_sign_engine_functionality.py",
      "tests\\test_production_readiness_functionality.py",
      "tests\\test_profit_cycle_navigator_functionality.py",
      "tests\\test_profit_routing_engine.py",
      "tests\\test_profit_vector_calibration.py",
      "tests\\test_quantum_visualizer_functionality.py",
      "tests\\test_recursive_profit_functionality.py",
      "tests\\test_registry.py",
      "tests\\test_resource_sequencer_functionality.py",
      "tests\\test_risk_manager_functionality.py",
      "tests\\test_schwabot_integration.py",
      "tests\\test_secr_system_functionality.py",
      "tests\\test_sfsss_strategy_bundler_functionality.py",
      "tests\\test_sfs_trigger_positioning.py",
      "tests\\test_shift_profit_engine_functionality.py",
      "tests\\test_strategy_sustainment_validator_functionality.py",
      "tests\\test_sustainment_principles_functionality.py",
      "tests\\test_system_validation_framework_verification.py",
      "tests\\test_tesseract_visualizer_functionality.py",
      "tests\\test_tick_hold_logic.py",
      "tests\\test_timing_manager_functionality.py",
      "tests\\test_trade_chain_timeline_replay.py",
      "tests\\test_ufs_echo_logger_functionality.py",
      "tests\\test_validate_config_cli_functionality.py",
      "tests\\test_vault_router_functionality.py",
      "tests\\test_visualization_functionality.py",
      "tests\\test_visual_core_integration.py",
      "tests\\test_word_fitness_tracker_functionality.py",
      "tests\\__init__.py",
      "test_bulletproof_cli_compatibility.py",
      "test_comprehensive_integration.py",
      "test_dlt_matrix_profit_integration.py",
      "test_enhanced_system.py",
      "test_ghost_standalone.py",
      "test_hash_registry_integration.py",
      "test_hash_trigger_integration.py",
      "test_low_risk_integration.py",
      "test_medium_risk_phase2.py",
      "test_real_integration.py",
      "test_simple.py",
      "config\\config_utils.py",
      "config\\cooldown_config.py",
      "config\\io_utils.py",
      "config\\mathematical_framework_config.py",
      "config\\matrix_response_schema.py",
      "config\\risk_config.py",
      "config\\schwabot_config.py",
      "config\\__init__.py",
      "config\\schemas\\quantization.py",
      "config\\schemas\\__init__.py",
      "settings\\demo_integration_system.py",
      "settings\\launch_demo_system.py",
      "settings\\matrix_allocator.py",
      "settings\\settings_controller.py",
      "settings\\vector_validator.py",
      "agents\\llm_agent.py",
      "aleph_core\\batch_integration.py",
      "aleph_core\\detonation_sequencer.py",
      "aleph_core\\entropy_analyzer.py",
      "aleph_core\\paradox_visualizer.py",
      "aleph_core\\pattern_matcher.py",
      "aleph_core\\smart_money_analyzer.py",
      "aleph_core\\strategy_replayer.py",
      "aleph_core\\strategy_replayer_upgraded.py",
      "aleph_core\\tesseract.py",
      "aleph_core\\Test_Pattern_Hook.py",
      "aleph_core\\unitizer.py",
      "aleph_core\\__init__.py",
      "cleanup_backup\\bit_phase_engine.py",
      "cleanup_backup\\dlt_waveform_engine.py",
      "cleanup_backup\\fallback_logic_router.py",
      "cleanup_backup\\gpu_offload_manager.py",
      "cleanup_backup\\hash_registry_manager.py",
      "cleanup_backup\\matrix_mapper.py",
      "cleanup_backup\\meta_layer_ghost_bridge.py",
      "cleanup_backup\\phantom_lag_model.py",
      "cleanup_backup\\phase_entropy_matcher.py",
      "cleanup_backup\\profit_cycle_allocator.py",
      "cleanup_backup\\run_schwabot.py",
      "cleanup_backup\\system_validation.py",
      "cleanup_backup\\tensor_harness_matrix.py",
      "cleanup_backup\\tensor_router.py",
      "cleanup_backup\\validate_components.py",
      "cleanup_backup\\voltage_lane_mapper.py",
      "cleanup_backup\\core\\advanced_drift_shell_integration.py",
      "cleanup_backup\\core\\advanced_mathematical_core.py",
      "cleanup_backup\\core\\advanced_test_harness.py",
      "cleanup_backup\\core\\ai_integration_bridge.py",
      "cleanup_backup\\core\\altitude_adjustment_math.py",
      "cleanup_backup\\core\\altitude_generator.py",
      "cleanup_backup\\core\\anomaly_filter_comprehensive.py",
      "cleanup_backup\\core\\api_bridge_manager.py",
      "cleanup_backup\\core\\api_endpoints.py",
      "cleanup_backup\\core\\api_gateway.py",
      "cleanup_backup\\core\\asset_substitution_matrix.py",
      "cleanup_backup\\core\\auto_scaler.py",
      "cleanup_backup\\core\\backtest_injector.py",
      "cleanup_backup\\core\\bare_except_handling_fixes.py",
      "cleanup_backup\\core\\basket_entropy_allocator.py",
      "cleanup_backup\\core\\basket_log_controller.py",
      "cleanup_backup\\core\\basket_swapper.py",
      "cleanup_backup\\core\\basket_swap_logic.py",
      "cleanup_backup\\core\\basket_swap_overlay_router.py",
      "cleanup_backup\\core\\basket_tensor_feedback.py",
      "cleanup_backup\\core\\behavior_pattern_tracker.py",
      "cleanup_backup\\core\\best_practices_enforcer.py",
      "cleanup_backup\\core\\bitcoin_mining_analyzer.py",
      "cleanup_backup\\core\\bitmap_engine.py",
      "cleanup_backup\\core\\bit_operations.py",
      "cleanup_backup\\core\\bit_phase_engine.py",
      "cleanup_backup\\core\\bit_resolution_engine.py",
      "cleanup_backup\\core\\bit_sequencer.py",
      "cleanup_backup\\core\\block_wave_transform.py",
      "cleanup_backup\\core\\braid_fractal.py",
      "cleanup_backup\\core\\braid_pattern_engine.py",
      "cleanup_backup\\core\\btc_data_processor.py",
      "cleanup_backup\\core\\btc_investment_ratio_controller.py",
      "cleanup_backup\\core\\btc_processor_controller.py",
      "cleanup_backup\\core\\btc_processor_ui.py",
      "cleanup_backup\\core\\btc_usdc_router_relay.py",
      "cleanup_backup\\core\\btc_vector_aggregator.py",
      "cleanup_backup\\core\\bus_core.py",
      "cleanup_backup\\core\\bus_events.py",
      "cleanup_backup\\core\\capital_controls.py",
      "cleanup_backup\\core\\ccxt_execution_manager.py",
      "cleanup_backup\\core\\ccxt_profit_vectorizer.py",
      "cleanup_backup\\core\\checksum_verifier.py",
      "cleanup_backup\\core\\cluster_mapper.py",
      "cleanup_backup\\core\\coldbase_bridge.py",
      "cleanup_backup\\core\\collapse_confidence.py",
      "cleanup_backup\\core\\collapse_engine.py",
      "cleanup_backup\\core\\compute_ghost_route.py",
      "cleanup_backup\\core\\conditional_glyph_feedback_loop.py",
      "cleanup_backup\\core\\config.py",
      "cleanup_backup\\core\\config_utils.py",
      "cleanup_backup\\core\\constants.py",
      "cleanup_backup\\core\\cooldown_manager.py",
      "cleanup_backup\\core\\core_loop_manager.py",
      "cleanup_backup\\core\\critical_error_handler.py",
      "cleanup_backup\\core\\cursor_engine.py",
      "cleanup_backup\\core\\cursor_math_integration.py",
      "cleanup_backup\\core\\cyclic_core.py",
      "cleanup_backup\\core\\dashboard_integration.py",
      "cleanup_backup\\core\\data_integration_layer.py",
      "cleanup_backup\\core\\data_provider.py",
      "cleanup_backup\\core\\demo_backtest_runner.py",
      "cleanup_backup\\core\\demo_entry_simulator.py",
      "cleanup_backup\\core\\demo_integration_system.py",
      "cleanup_backup\\core\\demo_memory_core.py",
      "cleanup_backup\\core\\demo_runner.py",
      "cleanup_backup\\core\\demo_state_injector.py",
      "cleanup_backup\\core\\demo_trading_system.py",
      "cleanup_backup\\core\\deterministic_value_engine.py",
      "cleanup_backup\\core\\dlt_waveform_engine.py",
      "cleanup_backup\\core\\dormant_engine.py",
      "cleanup_backup\\core\\drift_compensator.py",
      "cleanup_backup\\core\\drift_exit_detector.py",
      "cleanup_backup\\core\\drift_phase_monitor.py",
      "cleanup_backup\\core\\drift_shell_engine.py",
      "cleanup_backup\\core\\dual_state_tracker.py",
      "cleanup_backup\\core\\echo_snapshot.py",
      "cleanup_backup\\core\\edge_vector_field.py",
      "cleanup_backup\\core\\enhanced_btc_integration_bridge.py",
      "cleanup_backup\\core\\enhanced_fractal_core.py",
      "cleanup_backup\\core\\enhanced_gpu_hash_processor.py",
      "cleanup_backup\\core\\enhanced_hooks.py",
      "cleanup_backup\\core\\enhanced_risk_manager.py",
      "cleanup_backup\\core\\enhanced_tesseract_processor.py",
      "cleanup_backup\\core\\enhanced_thermal_aware_btc_processor.py",
      "cleanup_backup\\core\\enhanced_thermal_hash_processor.py",
      "cleanup_backup\\core\\enhanced_windows_cli_compatibility.py",
      "cleanup_backup\\core\\entropy_api_layer.py",
      "cleanup_backup\\core\\entropy_bridge.py",
      "cleanup_backup\\core\\entropy_engine.py",
      "cleanup_backup\\core\\entropy_flattener.py",
      "cleanup_backup\\core\\entropy_tracker.py",
      "cleanup_backup\\core\\entropy_validator.py",
      "cleanup_backup\\core\\entry_exit_vector.py",
      "cleanup_backup\\core\\entry_exit_vector_analyzer.py",
      "cleanup_backup\\core\\entry_gate.py",
      "cleanup_backup\\core\\environment_manager.py",
      "cleanup_backup\\core\\error_handler.py",
      "cleanup_backup\\core\\error_handling_pipeline.py",
      "cleanup_backup\\core\\error_sanitizer.py",
      "cleanup_backup\\core\\event_impact_mapper.py",
      "cleanup_backup\\core\\event_matrix_integration_bridge.py",
      "cleanup_backup\\core\\evolution_engine.py",
      "cleanup_backup\\core\\exchange_plumbing.py",
      "cleanup_backup\\core\\exec_packet.py",
      "cleanup_backup\\core\\export_vector_snapshot.py",
      "cleanup_backup\\core\\fallback_logic_router.py",
      "cleanup_backup\\core\\fault_bus.py",
      "cleanup_backup\\core\\ferris_rde_core.py",
      "cleanup_backup\\core\\ferris_wheel_scheduler.py",
      "cleanup_backup\\core\\filters.py",
      "cleanup_backup\\core\\flask_network_coordinator.py",
      "cleanup_backup\\core\\flux_compensator.py",
      "cleanup_backup\\core\\fractal_core.py",
      "cleanup_backup\\core\\future_corridor_engine.py",
      "cleanup_backup\\core\\future_hooks.py",
      "cleanup_backup\\core\\gan_anomaly_filter.py",
      "cleanup_backup\\core\\gan_filter.py",
      "cleanup_backup\\core\\genesis_core.py",
      "cleanup_backup\\core\\ghost_architecture_btc_profit_handoff.py",
      "cleanup_backup\\core\\ghost_conditionals.py",
      "cleanup_backup\\core\\ghost_data_recovery.py",
      "cleanup_backup\\core\\ghost_decay.py",
      "cleanup_backup\\core\\ghost_hash_decoder.py",
      "cleanup_backup\\core\\ghost_memory_router.py",
      "cleanup_backup\\core\\ghost_meta_layer_engine.py",
      "cleanup_backup\\core\\ghost_news_glyph_map.py",
      "cleanup_backup\\core\\ghost_news_vectorizer.py",
      "cleanup_backup\\core\\ghost_phase_integrator.py",
      "cleanup_backup\\core\\ghost_pipeline.py",
      "cleanup_backup\\core\\ghost_router.py",
      "cleanup_backup\\core\\ghost_shadow_tracker.py",
      "cleanup_backup\\core\\ghost_strategy_handler.py",
      "cleanup_backup\\core\\ghost_strategy_integrator.py",
      "cleanup_backup\\core\\ghost_strategy_matrix.py",
      "cleanup_backup\\core\\ghost_swap_vector.py",
      "cleanup_backup\\core\\ghost_trigger.py",
      "cleanup_backup\\core\\glyph_hysteresis.py",
      "cleanup_backup\\core\\glyph_math_core.py",
      "cleanup_backup\\core\\glyph_phase_anchor.py",
      "cleanup_backup\\core\\glyph_vector_executor.py",
      "cleanup_backup\\core\\gpt_command_layer.py",
      "cleanup_backup\\core\\gpt_command_layer_simple.py",
      "cleanup_backup\\core\\gpu_flash_engine.py",
      "cleanup_backup\\core\\gpu_metrics.py",
      "cleanup_backup\\core\\gpu_offload_manager.py",
      "cleanup_backup\\core\\hardware_self_identifier.py",
      "cleanup_backup\\core\\hash_affinity_vault.py",
      "cleanup_backup\\core\\hash_confidence_evaluator.py",
      "cleanup_backup\\core\\hash_phase_switch.py",
      "cleanup_backup\\core\\hash_profit_matrix.py",
      "cleanup_backup\\core\\hash_recollection.py",
      "cleanup_backup\\core\\hash_registry.py",
      "cleanup_backup\\core\\hash_registry_manager.py",
      "cleanup_backup\\core\\hash_repair_engine.py",
      "cleanup_backup\\core\\hash_tick_synchronizer.py",
      "cleanup_backup\\core\\hash_trigger_engine.py",
      "cleanup_backup\\core\\high_frequency_btc_trading_processor.py",
      "cleanup_backup\\core\\historical_ledger_manager.py",
      "cleanup_backup\\core\\hooks.py",
      "cleanup_backup\\core\\hybrid_optimization_manager.py",
      "cleanup_backup\\core\\import_resolver.py",
      "cleanup_backup\\core\\inject_demo_ledger.py",
      "cleanup_backup\\core\\integrated_alif_aleph_system.py",
      "cleanup_backup\\core\\integrated_pathway_test_suite.py",
      "cleanup_backup\\core\\integrated_profit_correlation_system.py",
      "cleanup_backup\\core\\integration_orchestrator.py",
      "cleanup_backup\\core\\integration_test.py",
      "cleanup_backup\\core\\klein_bottle_integrator.py",
      "cleanup_backup\\core\\lantern_hash_echo.py",
      "cleanup_backup\\core\\lantern_news_intelligence_bridge.py",
      "cleanup_backup\\core\\lantern_trigger.py",
      "cleanup_backup\\core\\lantern_trigger_validator.py",
      "cleanup_backup\\core\\lantern_vector_memory.py",
      "cleanup_backup\\core\\lattice_wave_math.py",
      "cleanup_backup\\core\\line_render_engine.py",
      "cleanup_backup\\core\\lockout_matrix.py",
      "cleanup_backup\\core\\long_horizon_simulation.py",
      "cleanup_backup\\core\\magic_number_optimization_engine.py",
      "cleanup_backup\\core\\main.py",
      "cleanup_backup\\core\\main_orcestrator.py",
      "cleanup_backup\\core\\master_orchestrator.py",
      "cleanup_backup\\core\\mathematical_integration_validator.py",
      "cleanup_backup\\core\\mathematical_optimization_bridge.py",
      "cleanup_backup\\core\\mathematical_pipeline_validator.py",
      "cleanup_backup\\core\\mathematical_pipeline_validator_simple.py",
      "cleanup_backup\\core\\mathlib.py",
      "cleanup_backup\\core\\mathlib_v2.py",
      "cleanup_backup\\core\\math_core.py",
      "cleanup_backup\\core\\matrix_allocator.py",
      "cleanup_backup\\core\\matrix_basket_loader.py",
      "cleanup_backup\\core\\matrix_fault_resolver.py",
      "cleanup_backup\\core\\matrix_mapper.py",
      "cleanup_backup\\core\\matrix_overlay.py",
      "cleanup_backup\\core\\matrix_overlay_backup.py",
      "cleanup_backup\\core\\matrix_overlay_engine.py",
      "cleanup_backup\\core\\memory_agent.py",
      "cleanup_backup\\core\\memory_agent_ghost_meta_engine.py",
      "cleanup_backup\\core\\memory_allocation_manager.py",
      "cleanup_backup\\core\\memory_drift_corrector.py",
      "cleanup_backup\\core\\memory_map.py",
      "cleanup_backup\\core\\memory_timing_orchestrator.py",
      "cleanup_backup\\core\\meta_layer_ghost_bridge.py",
      "cleanup_backup\\core\\mode_manager.py",
      "cleanup_backup\\core\\multi_bit_btc_processor.py",
      "cleanup_backup\\core\\ncco_manager.py",
      "cleanup_backup\\core\\news_api_endpoints.py",
      "cleanup_backup\\core\\news_intelligence_engine.py",
      "cleanup_backup\\core\\news_lantern_integration_api.py",
      "cleanup_backup\\core\\news_lantern_mathematical_integration.py",
      "cleanup_backup\\core\\news_profit_api_endpoints.py",
      "cleanup_backup\\core\\news_profit_mathematical_bridge.py",
      "cleanup_backup\\core\\news_quant_field.py",
      "cleanup_backup\\core\\news_sentiment_interpreter.py",
      "cleanup_backup\\core\\optimization_engine.py",
      "cleanup_backup\\core\\optimized_constants_wrapper.py",
      "cleanup_backup\\core\\orbital_profit_navigator.py",
      "cleanup_backup\\core\\oscillator_fallback.py",
      "cleanup_backup\\core\\pattern_match_display.py",
      "cleanup_backup\\core\\pattern_utils.py",
      "cleanup_backup\\core\\persistent_state_manager.py",
      "cleanup_backup\\core\\phantom_entry_logic.py",
      "cleanup_backup\\core\\phantom_exit_logic.py",
      "cleanup_backup\\core\\phantom_lag_model.py",
      "cleanup_backup\\core\\phantom_memory.py",
      "cleanup_backup\\core\\phantom_price_vector_synchronizer.py",
      "cleanup_backup\\core\\phantom_profit_tracker.py",
      "cleanup_backup\\core\\phase_entropy_matcher.py",
      "cleanup_backup\\core\\phase_gate_controller.py",
      "cleanup_backup\\core\\phase_handler.py",
      "cleanup_backup\\core\\pipeline_management_system.py",
      "cleanup_backup\\core\\plot_sign_engine.py",
      "cleanup_backup\\core\\pod_management.py",
      "cleanup_backup\\core\\pool_volume_translator.py",
      "cleanup_backup\\core\\portfolio_router.py",
      "cleanup_backup\\core\\portfolio_substitution_matrix.py",
      "cleanup_backup\\core\\post_failure_recovery_intelligence_loop.py",
      "cleanup_backup\\core\\practical_visual_controller.py",
      "cleanup_backup\\core\\precision_performance.py",
      "cleanup_backup\\core\\profit_cycle_allocator.py",
      "cleanup_backup\\core\\profit_echo_velocity_driver.py",
      "cleanup_backup\\core\\profit_feedback_loop.py",
      "cleanup_backup\\core\\profit_navigator.py",
      "cleanup_backup\\core\\profit_projection.py",
      "cleanup_backup\\core\\profit_protection.py",
      "cleanup_backup\\core\\profit_router.py",
      "cleanup_backup\\core\\profit_routing_engine.py",
      "cleanup_backup\\core\\profit_sweep_allocator.py",
      "cleanup_backup\\core\\profit_tensor.py",
      "cleanup_backup\\core\\profit_trajectory_coprocessor.py",
      "cleanup_backup\\core\\profit_vector_reconciler.py",
      "cleanup_backup\\core\\prophet_connector.py",
      "cleanup_backup\\core\\psi_cache.py",
      "cleanup_backup\\core\\quantization_profile.py",
      "cleanup_backup\\core\\quantum_antipole_engine.py",
      "cleanup_backup\\core\\quantum_btc_intelligence_core.py",
      "cleanup_backup\\core\\quantum_cellular_risk_monitor.py",
      "cleanup_backup\\core\\quantum_drift_shell_engine.py",
      "cleanup_backup\\core\\quantum_mathematical_pathway_validator.py",
      "cleanup_backup\\core\\react_dashboard_integration.py",
      "cleanup_backup\\core\\recursive_profit.py",
      "cleanup_backup\\core\\recursive_strategy_router.py",
      "cleanup_backup\\core\\regulatory_compliance.py",
      "cleanup_backup\\core\\render_math_utils.py",
      "cleanup_backup\\core\\resonance_gate_logic.py",
      "cleanup_backup\\core\\resource_sequencer.py",
      "cleanup_backup\\core\\riddle_gemm.py",
      "cleanup_backup\\core\\risk_engine.py",
      "cleanup_backup\\core\\risk_guard.py",
      "cleanup_backup\\core\\risk_indexer.py",
      "cleanup_backup\\core\\risk_manager.py",
      "cleanup_backup\\core\\risk_monitor.py",
      "cleanup_backup\\core\\rittle_gemm.py",
      "cleanup_backup\\core\\route_verification_classifier.py",
      "cleanup_backup\\core\\schwabot_dashboard.py",
      "cleanup_backup\\core\\schwabot_integration_orchestrator.py",
      "cleanup_backup\\core\\schwabot_unified_interface_system.py",
      "cleanup_backup\\core\\schwafit_core.py",
      "cleanup_backup\\core\\secure_api_manager.py",
      "cleanup_backup\\core\\sequencer_engine.py",
      "cleanup_backup\\core\\settings_controller.py",
      "cleanup_backup\\core\\settings_manager.py",
      "cleanup_backup\\core\\sfsss_router.py",
      "cleanup_backup\\core\\sfsss_strategy_bundler.py",
      "cleanup_backup\\core\\shell_memory_evolution_fixes.py",
      "cleanup_backup\\core\\shell_portal_mapper.py",
      "cleanup_backup\\core\\shift_profit_engine.py",
      "cleanup_backup\\core\\simplified_api.py",
      "cleanup_backup\\core\\simplified_btc_integration.py",
      "cleanup_backup\\core\\simulate_trade.py",
      "cleanup_backup\\core\\snapshot_logger.py",
      "cleanup_backup\\core\\spectral_state.py",
      "cleanup_backup\\core\\spectral_transform.py",
      "cleanup_backup\\core\\state_tracker.py",
      "cleanup_backup\\core\\state_validation_router.py",
      "cleanup_backup\\core\\strange_loop_detector.py",
      "cleanup_backup\\core\\strategic_dormancy.py",
      "cleanup_backup\\core\\strategy_config.py",
      "cleanup_backup\\core\\strategy_entropy_switcher.py",
      "cleanup_backup\\core\\strategy_execution_mapper.py",
      "cleanup_backup\\core\\strategy_loader.py",
      "cleanup_backup\\core\\strategy_logic.py",
      "cleanup_backup\\core\\strategy_loop_executor.py",
      "cleanup_backup\\core\\strategy_mapper.py",
      "cleanup_backup\\core\\strategy_sustainment_validator.py",
      "cleanup_backup\\core\\sustainment_gan_integration_demo.py",
      "cleanup_backup\\core\\sustainment_integration_hooks.py",
      "cleanup_backup\\core\\sustainment_principles.py",
      "cleanup_backup\\core\\sustainment_underlay_controller.py",
      "cleanup_backup\\core\\system_clock_sequencer.py",
      "cleanup_backup\\core\\system_constants.py",
      "cleanup_backup\\core\\system_constants_example.py",
      "cleanup_backup\\core\\system_integration_orchestrator.py",
      "cleanup_backup\\core\\system_monitor.py",
      "cleanup_backup\\core\\system_orchestrator.py",
      "cleanup_backup\\core\\temporal_execution_correction_layer.py",
      "cleanup_backup\\core\\tensor_harness_matrix.py",
      "cleanup_backup\\core\\tensor_matcher.py",
      "cleanup_backup\\core\\tensor_path_router.py",
      "cleanup_backup\\core\\tensor_router.py",
      "cleanup_backup\\core\\tensor_score_utils.py",
      "cleanup_backup\\core\\tensor_visualization_controller.py",
      "cleanup_backup\\core\\tesseract_processor.py",
      "cleanup_backup\\core\\tesseract_visualizer.py",
      "cleanup_backup\\core\\test_complete_system_functionality.py",
      "cleanup_backup\\core\\test_distributed_system.py",
      "cleanup_backup\\core\\test_enhanced_fractal_functionality.py",
      "cleanup_backup\\core\\test_enhanced_systems_functionality.py",
      "cleanup_backup\\core\\test_integration.py",
      "cleanup_backup\\core\\test_recursive_profit_engine_functionality.py",
      "cleanup_backup\\core\\test_simple_enhanced_functionality.py",
      "cleanup_backup\\core\\thermal_boundary_manager.py",
      "cleanup_backup\\core\\thermal_integration_demo.py",
      "cleanup_backup\\core\\thermal_map_allocator.py",
      "cleanup_backup\\core\\thermal_performance_tracker.py",
      "cleanup_backup\\core\\thermal_shift.py",
      "cleanup_backup\\core\\thermal_system_integration.py",
      "cleanup_backup\\core\\thermal_visual_integration.py",
      "cleanup_backup\\core\\thermal_zone_manager.py",
      "cleanup_backup\\core\\thermal_zone_manager_mock.py",
      "cleanup_backup\\core\\tick_backlog_router.py",
      "cleanup_backup\\core\\tick_cycle_validator.py",
      "cleanup_backup\\core\\tick_feed_harness.py",
      "cleanup_backup\\core\\tick_hash_interpreter.py",
      "cleanup_backup\\core\\tick_hash_processor.py",
      "cleanup_backup\\core\\tick_management_system.py",
      "cleanup_backup\\core\\tick_processor.py",
      "cleanup_backup\\core\\tick_resonance_engine.py",
      "cleanup_backup\\core\\time_entropy_edge_case.py",
      "cleanup_backup\\core\\timing_manager.py",
      "cleanup_backup\\core\\todo_validation_fixes.py",
      "cleanup_backup\\core\\trade_tensor_router.py",
      "cleanup_backup\\core\\trajectory_sphere.py",
      "cleanup_backup\\core\\triplet_matcher.py",
      "cleanup_backup\\core\\type_defs.py",
      "cleanup_backup\\core\\type_enforcer.py",
      "cleanup_backup\\core\\typing_schemas.py",
      "cleanup_backup\\core\\ufs_echo_logger.py",
      "cleanup_backup\\core\\ufs_registry.py",
      "cleanup_backup\\core\\ui_integration_bridge.py",
      "cleanup_backup\\core\\ui_state_bridge.py",
      "cleanup_backup\\core\\ump_pipeline.py",
      "cleanup_backup\\core\\unified_api_coordinator.py",
      "cleanup_backup\\core\\unified_confidence_matrix.py",
      "cleanup_backup\\core\\unified_integration_layer.py",
      "cleanup_backup\\core\\unified_mathematical_trading_controller.py",
      "cleanup_backup\\core\\unified_mathematics_config.py",
      "cleanup_backup\\core\\unified_observability_tensor.py",
      "cleanup_backup\\core\\unified_schwabot_integration.py",
      "cleanup_backup\\core\\unified_signal_metrics.py",
      "cleanup_backup\\core\\unified_visual_controller.py",
      "cleanup_backup\\core\\unified_visual_synthesis_controller.py",
      "cleanup_backup\\core\\universal_schwabot_client.py",
      "cleanup_backup\\core\\usdc_position_manager.py",
      "cleanup_backup\\core\\validation_manager.py",
      "cleanup_backup\\core\\vault_balance_regulator.py",
      "cleanup_backup\\core\\vault_router.py",
      "cleanup_backup\\core\\vector_matcher.py",
      "cleanup_backup\\core\\vector_state_mapper.py",
      "cleanup_backup\\core\\vector_validator.py",
      "cleanup_backup\\core\\vecu_core.py",
      "cleanup_backup\\core\\visual_integration_bridge.py",
      "cleanup_backup\\core\\voltage_lane_mapper.py",
      "cleanup_backup\\core\\volume_tick_router.py",
      "cleanup_backup\\core\\wallet_echo_monitor.py",
      "cleanup_backup\\core\\wall_builder_anomaly_handler.py",
      "cleanup_backup\\core\\zbe_position_tracker.py",
      "cleanup_backup\\core\\zpe_core.py",
      "cleanup_backup\\core\\zpe_core_matrix.py",
      "cleanup_backup\\core\\zpe_hybrid_mode_selector.py",
      "cleanup_backup\\core\\zpe_integration.py",
      "cleanup_backup\\core\\zpe_rotational_engine.py",
      "cleanup_backup\\core\\__init__.py",
      "cleanup_backup\\core\\antipole\\tesseract_bridge.py",
      "cleanup_backup\\core\\antipole\\vector.py",
      "cleanup_backup\\core\\antipole\\zbe_controller.py",
      "cleanup_backup\\core\\antipole\\__init__.py",
      "cleanup_backup\\core\\config\\defaults.py",
      "cleanup_backup\\core\\config\\logging_config.py",
      "cleanup_backup\\core\\config\\manager.py",
      "cleanup_backup\\core\\config\\unifier.py",
      "cleanup_backup\\core\\config\\validator.py",
      "cleanup_backup\\core\\config\\__init__.py",
      "cleanup_backup\\core\\data\\data_provider.py",
      "cleanup_backup\\core\\data\\provider.py",
      "cleanup_backup\\core\\exchange_apis\\base_api.py",
      "cleanup_backup\\core\\exchange_apis\\coinbase_api.py",
      "cleanup_backup\\core\\exchange_apis\\__init__.py",
      "cleanup_backup\\core\\ghost\\ghost_conditionals.py",
      "cleanup_backup\\core\\ghost\\ghost_news_vectorizer.py",
      "cleanup_backup\\core\\ghost\\ghost_phase_integrator.py",
      "cleanup_backup\\core\\ghost\\__init__.py",
      "cleanup_backup\\core\\glyph\\conditional_feedback_loop.py",
      "cleanup_backup\\core\\glyph\\recursive_glyph_mapper.py",
      "cleanup_backup\\core\\glyph\\__init__.py",
      "cleanup_backup\\core\\lantern\\lexicon_engine.py",
      "cleanup_backup\\core\\lantern\\profit_story_engine.py",
      "cleanup_backup\\core\\lantern\\story_parser.py",
      "cleanup_backup\\core\\lantern\\trigger.py",
      "cleanup_backup\\core\\lantern\\vector_memory.py",
      "cleanup_backup\\core\\lantern\\word_fitness_tracker.py",
      "cleanup_backup\\core\\lantern\\__init__.py",
      "cleanup_backup\\core\\logic\\swap_decision.py",
      "cleanup_backup\\core\\math\\complete_system_integration_validator.py",
      "cleanup_backup\\core\\math\\integration_validator.py",
      "cleanup_backup\\core\\math\\tensor_algebra.py",
      "cleanup_backup\\core\\matrix\\fault_resolver.py",
      "cleanup_backup\\core\\matrix\\strategy_matrix.py",
      "cleanup_backup\\core\\matrix\\__init__.py",
      "cleanup_backup\\core\\memory_stack\\ai_command_sequencer.py",
      "cleanup_backup\\core\\memory_stack\\command_density_analyzer.py",
      "cleanup_backup\\core\\memory_stack\\execution_validator.py",
      "cleanup_backup\\core\\memory_stack\\memory_hash_rotator.py",
      "cleanup_backup\\core\\memory_stack\\memory_key_allocator.py",
      "cleanup_backup\\core\\memory_stack\\trust_feedback_updater.py",
      "cleanup_backup\\core\\phantom\\entry_logic.py",
      "cleanup_backup\\core\\phantom\\exit_logic.py",
      "cleanup_backup\\core\\phantom\\price_vector_synchronizer.py",
      "cleanup_backup\\core\\phantom\\__init__.py",
      "cleanup_backup\\core\\phase_engine\\basket_phase_map.py",
      "cleanup_backup\\core\\phase_engine\\basket_phase_map_backup.py",
      "cleanup_backup\\core\\phase_engine\\data_provider.py",
      "cleanup_backup\\core\\phase_engine\\phase_loader.py",
      "cleanup_backup\\core\\phase_engine\\phase_logger.py",
      "cleanup_backup\\core\\phase_engine\\phase_map.py",
      "cleanup_backup\\core\\phase_engine\\phase_metrics_engine.py",
      "cleanup_backup\\core\\phase_engine\\sha_mapper.py",
      "cleanup_backup\\core\\phase_engine\\swap_controller.py",
      "cleanup_backup\\core\\phase_engine\\__init__.py",
      "cleanup_backup\\core\\profit\\cycle_allocator.py",
      "cleanup_backup\\core\\profit\\__init__.py",
      "cleanup_backup\\core\\recursive_engine\\integrator.py",
      "cleanup_backup\\core\\recursive_engine\\math_functions.py",
      "cleanup_backup\\core\\recursive_engine\\primary_loop.py",
      "cleanup_backup\\core\\recursive_engine\\profit_memory_vault.py",
      "cleanup_backup\\core\\recursive_engine\\recursive_strategy_handler.py",
      "cleanup_backup\\core\\recursive_engine\\signal_processor.py",
      "cleanup_backup\\core\\recursive_engine\\vault_reentry_pipeline.py",
      "cleanup_backup\\core\\recursive_engine\\__init__.py",
      "cleanup_backup\\core\\secr\\adaptive_icap.py",
      "cleanup_backup\\core\\secr\\allocator.py",
      "cleanup_backup\\core\\secr\\coordinator.py",
      "cleanup_backup\\core\\secr\\failure_logger.py",
      "cleanup_backup\\core\\secr\\injector.py",
      "cleanup_backup\\core\\secr\\resolver_matrix.py",
      "cleanup_backup\\core\\secr\\watchdog.py",
      "cleanup_backup\\core\\secr\\__init__.py",
      "cleanup_backup\\core\\tests\\test_antipole_integration.py",
      "cleanup_backup\\core\\tests\\test_apcf_functionality.py",
      "cleanup_backup\\core\\tests\\test_config_functionality.py",
      "cleanup_backup\\core\\tests\\test_config_loading_functionality.py",
      "cleanup_backup\\core\\tests\\test_enhanced_tesseract_processor_functionality.py",
      "cleanup_backup\\core\\tests\\test_gpu_offload_functionality.py",
      "cleanup_backup\\core\\tests\\test_mathlib_functionality.py",
      "cleanup_backup\\core\\tests\\test_schwafit_core_functionality.py",
      "cleanup_backup\\core\\tests\\test_strategy_loader_functionality.py",
      "cleanup_backup\\core\\tests\\test_zygote_propagation_engine_functionality.py",
      "cleanup_backup\\core\\tests\\test_zygot_shell_functionality.py",
      "cleanup_backup\\core\\trading_models\\containers.py",
      "cleanup_backup\\core\\trading_models\\enums.py",
      "cleanup_backup\\core\\trading_models\\__init__.py",
      "cleanup_backup\\core\\utils\\cli_handler.py",
      "cleanup_backup\\core\\utils\\math_utils.py",
      "cleanup_backup\\core\\utils\\rate_limiter.py",
      "cleanup_backup\\core\\utils\\windows_cli_compatibility.py",
      "cleanup_backup\\core\\utils\\yaml_config_loader.py",
      "cleanup_backup\\core\\utils\\__init__.py",
      "cleanup_backup\\core\\config\\tesseract\\config_loader.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\bit_phase_engine.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\bit_resolution_engine.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\dlt_waveform_engine.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\entropy_validator.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\fallback_logic_router.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\hash_registry.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\hash_registry_manager.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\matrix_mapper.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\meta_layer_ghost_bridge.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\phantom_lag_model.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\profit_cycle_allocator.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\profit_routing_engine.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\tensor_matcher.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\tensor_score_utils.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\matrix_fault_resolver.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\memkey_sync.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\persistent_homology.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\quantum_strategy.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_dcc_sync_functionality.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_gpu_flash_engine_functionality.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_hash_intelligence_debug_functionality.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_matrix_fault_resolver_functionality.py",
      "cleanup_backup\\critical_math_20250624_222404\\mathlib\\test_memkey_sync_functionality.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\math\\complete_system_integration_validator.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\math\\integration_validator.py",
      "cleanup_backup\\critical_math_20250624_222404\\core\\math\\tensor_algebra.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\bit_phase_engine.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\bit_resolution_engine.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\dlt_waveform_engine.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\entropy_validator.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\fallback_logic_router.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\hash_registry.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\hash_registry_manager.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\matrix_mapper.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\meta_layer_ghost_bridge.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\phantom_lag_model.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\profit_cycle_allocator.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\profit_routing_engine.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\tensor_matcher.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\tensor_score_utils.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\matrix_fault_resolver.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\memkey_sync.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\persistent_homology.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\quantum_strategy.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_dcc_sync_functionality.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_gpu_flash_engine_functionality.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_hash_intelligence_debug_functionality.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_matrix_fault_resolver_functionality.py",
      "cleanup_backup\\critical_math_20250624_222415\\mathlib\\test_memkey_sync_functionality.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\math\\complete_system_integration_validator.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\math\\integration_validator.py",
      "cleanup_backup\\critical_math_20250624_222415\\core\\math\\tensor_algebra.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\bit_phase_engine.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\bit_resolution_engine.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\dlt_waveform_engine.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\entropy_validator.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\fallback_logic_router.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\hash_registry.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\hash_registry_manager.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\matrix_mapper.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\meta_layer_ghost_bridge.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\phantom_lag_model.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\profit_cycle_allocator.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\profit_routing_engine.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\tensor_matcher.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\tensor_score_utils.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\matrix_fault_resolver.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\memkey_sync.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\persistent_homology.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\quantum_strategy.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_dcc_sync_functionality.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_gpu_flash_engine_functionality.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_hash_intelligence_debug_functionality.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_matrix_fault_resolver_functionality.py",
      "cleanup_backup\\critical_math_20250624_222447\\mathlib\\test_memkey_sync_functionality.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\math\\complete_system_integration_validator.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\math\\integration_validator.py",
      "cleanup_backup\\critical_math_20250624_222447\\core\\math\\tensor_algebra.py",
      "demo\\demo_launcher.py",
      "demo\\demo_logic_flow.py",
      "demo\\demo_trade_sequence.py",
      "engine\\strategy_logic.py",
      "engine\\__init__.py",
      "examples\\btc_mining_analysis_demo.py",
      "examples\\btc_processor_control_demo.py",
      "examples\\unified_visual_demo.py",
      "examples\\unified_visual_synthesis_demo.py",
      "init\\__init__.py",
      "models\\enums.py",
      "models\\schemas.py",
      "ncco_core\\harmony_memory.py",
      "ncco_core\\ncco_scorer.py",
      "ncco_core\\__init__.py",
      "ncco_core\\tests\\test_ferris_rde_functionality.py",
      "ncco_core\\tests\\test_rde_core_functionality.py",
      "ncco_core\\tests\\test_rde_visuals_functionality.py",
      "newmath\\hash_vectors.py",
      "newmath\\matrix_utils.py",
      "newmath\\profit_math.py",
      "newmath\\render_engine.py",
      "newmath\\tensor_ops.py",
      "newmath\\validation.py",
      "newmath\\__init__.py",
      "runtime\\validator.py",
      "tools\\comprehensive_mathematical_integration.py",
      "tools\\consciousness_fusion_test.py",
      "tools\\uros_v1_integration_test.py"
    ],
    "stubs": [
      "core\\function_patterns.py",
      "cleanup_backup\\core\\function_patterns.py"
    ],
    "broken": [],
    "empty": [
      "core\\glyph_news_parser.py",
      "core\\type_patterns.py",
      "schwabot\\core\\backup_validator.py",
      "cleanup_backup\\core\\glyph_news_parser.py",
      "cleanup_backup\\core\\type_patterns.py",
      "newmath\\entropy_calc.py"
    ]
  },
  "missing_critical_components": {
    "flask_api": [
      "api/",
      "gateway/",
      "flask_app.py"
    ],
    "gpu_cpu_engine": [
      "mathlib/",
      "calculations/",
      "engine/",
      "processor/",
      "cpu_",
      "calculation_"
    ],
    "cross_platform": [
      "cli/",
      "client/",
      "desktop/",
      "gui/",
      "ui/",
      "mac_",
      "linux_"
    ],
    "ccxt_integration": [
      "order_",
      "exchange/"
    ],
    "btc_hashing": [
      "crypto_",
      "blockchain_"
    ],
    "external_apis": [
      "whale_",
      "market_data_"
    ]
  },
  "recommendations": {
    "immediate_fixes": [],
    "stub_implementations": [
      "Implement functionality in core\\function_patterns.py",
      "Implement functionality in cleanup_backup\\core\\function_patterns.py"
    ],
    "missing_components": [
      "Create flask_api components: api/, gateway/, flask_app.py",
      "Create gpu_cpu_engine components: mathlib/, calculations/, engine/, processor/, cpu_, calculation_",
      "Create cross_platform components: cli/, client/, desktop/, gui/, ui/, mac_, linux_",
      "Create ccxt_integration components: order_, exchange/",
      "Create btc_hashing components: crypto_, blockchain_",
      "Create external_apis components: whale_, market_data_"
    ],
    "cleanup_tasks": []
  }
}