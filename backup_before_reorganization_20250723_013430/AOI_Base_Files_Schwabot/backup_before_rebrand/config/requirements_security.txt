# 🔐 Schwabot Multi-Layered Security System Dependencies
# =====================================================
#
# Developed by Maxamillion M.A.A. DeLeon screen/pen name TheSchwa1337 ("The Schwa") & Nexus AI
# – Recursive Systems Architects | Authors of Ω-B-Γ Logic & Alpha Encryption Protocol
#
# This file contains all dependencies required for the multi-layered security system:
# 1. Fernet Encryption (Military-grade symmetric encryption)
# 2. Alpha Encryption (Ω-B-Γ Logic with recursive mathematical operations)
# 3. VMSP Integration (Vortex Math Security Protocol)
# 4. Mathematical Hash Verification
# 5. Temporal Security Validation

# Core Security Dependencies
cryptography>=41.0.0          # Fernet encryption and cryptographic primitives
scipy>=1.11.0                 # Scientific computing for Alpha Encryption FFT and entropy
numpy>=1.24.0                 # Numerical computing for mathematical operations

# Mathematical Computing
scipy>=1.11.0                 # FFT, entropy calculations, statistical functions
numpy>=1.24.0                 # Array operations, mathematical functions

# Optional GPU Acceleration (if available)
# cupy>=12.0.0                # GPU-accelerated NumPy (optional - will fallback to CPU)

# Development and Testing
pytest>=7.4.0                 # Testing framework
pytest-asyncio>=0.21.0        # Async testing support
pytest-cov>=4.1.0             # Coverage reporting

# Logging and Monitoring
colorlog>=6.7.0               # Colored logging output
structlog>=23.1.0             # Structured logging

# Configuration and Environment
python-dotenv>=1.0.0          # Environment variable management
pyyaml>=6.0                   # YAML configuration files

# Performance and Optimization
psutil>=5.9.0                 # System and process utilities
memory-profiler>=0.61.0       # Memory usage profiling

# Security Analysis Tools
bandit>=1.7.5                 # Security linting
safety>=2.3.0                 # Dependency vulnerability scanning

# Documentation
sphinx>=7.1.0                 # Documentation generation
sphinx-rtd-theme>=1.3.0       # Read the Docs theme

# Development Tools
black>=23.7.0                 # Code formatting
flake8>=6.0.0                 # Code linting
mypy>=1.5.0                   # Type checking
isort>=5.12.0                 # Import sorting

# Optional: Advanced Mathematical Libraries
# sympy>=1.12.0               # Symbolic mathematics (optional)
# mpmath>=1.3.0               # Arbitrary-precision arithmetic (optional)

# Optional: Quantum Computing Simulation
# qiskit>=0.44.0              # Quantum computing framework (optional)

# Optional: Machine Learning for Security Analysis
# scikit-learn>=1.3.0         # Machine learning algorithms (optional)
# tensorflow>=2.13.0          # Deep learning framework (optional)

# System-specific Dependencies
# Windows
# pywin32>=306; sys_platform == "win32"  # Windows API access

# Linux
# psutil>=5.9.0; sys_platform == "linux"  # Linux system utilities

# macOS
# psutil>=5.9.0; sys_platform == "darwin"  # macOS system utilities

# Security Notes:
# - All cryptographic dependencies are from trusted sources
# - Regular security updates are recommended
# - Use virtual environments for isolation
# - Monitor for security advisories
# - Keep dependencies updated regularly

# Installation Instructions:
# 1. Create virtual environment: python -m venv schwabot_security_env
# 2. Activate environment: 
#    - Windows: schwabot_security_env\Scripts\activate
#    - Linux/macOS: source schwabot_security_env/bin/activate
# 3. Install dependencies: pip install -r requirements_security.txt
# 4. Verify installation: python -c "import cryptography, scipy, numpy; print('✅ Security dependencies installed')"

# Security Best Practices:
# - Use strong, unique passwords for all services
# - Enable two-factor authentication where available
# - Regularly rotate API keys
# - Monitor system logs for suspicious activity
# - Keep all software and dependencies updated
# - Use secure communication channels
# - Implement proper access controls
# - Regular security audits and penetration testing 