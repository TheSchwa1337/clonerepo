[tox]
# =============================================================================
# TOX CONFIGURATION FOR SCHWABOT
# =============================================================================
# Multi-environment testing configuration
# =============================================================================

# Tox environments
envlist = 
    py39,
    py310,
    py311,
    py312,
    lint,
    security,
    docs,
    coverage

# Minimum tox version
minversion = 3.24.0

# Isolated build
isolated_build = True

# Test dependencies
deps = 
    pytest>=7.0.0
    pytest-cov>=4.0.0
    pytest-mock>=3.10.0
    pytest-asyncio>=0.21.0
    pytest-xdist>=3.0.0
    pytest-html>=3.1.0
    pytest-json-report>=1.5.0
    coverage>=7.0.0
    flake8>=6.0.0
    black>=23.0.0
    mypy>=1.0.0
    bandit>=1.7.0
    safety>=2.3.0
    sphinx>=6.0.0
    sphinx-rtd-theme>=1.2.0

# Commands to run for each environment
[testenv]
# Base commands for all Python environments
commands = 
    pytest {posargs:tests}
    coverage report

# Python 3.9 environment
[testenv:py39]
basepython = python3.9
deps = 
    {[testenv]deps}
    -r requirements.txt

# Python 3.10 environment
[testenv:py310]
basepython = python3.10
deps = 
    {[testenv]deps}
    -r requirements.txt

# Python 3.11 environment
[testenv:py311]
basepython = python3.11
deps = 
    {[testenv]deps}
    -r requirements.txt

# Python 3.12 environment
[testenv:py312]
basepython = python3.12
deps = 
    {[testenv]deps}
    -r requirements.txt

# Linting environment
[testenv:lint]
basepython = python3.11
deps = 
    flake8>=6.0.0
    black>=23.0.0
    mypy>=1.0.0
    isort>=5.12.0
commands = 
    flake8 core utils tests --max-line-length=100 --ignore=E203,W503
    black --check --diff core utils tests
    mypy core utils
    isort --check-only --diff core utils tests

# Security testing environment
[testenv:security]
basepython = python3.11
deps = 
    bandit>=1.7.0
    safety>=2.3.0
commands = 
    bandit -r core/ -f json -o bandit-report.json
    safety check --json --output safety-report.json

# Documentation environment
[testenv:docs]
basepython = python3.11
deps = 
    sphinx>=6.0.0
    sphinx-rtd-theme>=1.2.0
    sphinx-autodoc-typehints>=1.23.0
commands = 
    sphinx-build -b html docs/ docs/_build/html
    sphinx-build -b linkcheck docs/ docs/_build/linkcheck

# Coverage environment
[testenv:coverage]
basepython = python3.11
deps = 
    {[testenv]deps}
    -r requirements.txt
commands = 
    coverage run --source=core,utils -m pytest tests/
    coverage report --show-missing
    coverage html
    coverage xml

# Development environment
[testenv:dev]
basepython = python3.11
deps = 
    {[testenv]deps}
    -r requirements.txt
    -r requirements-dev.txt
commands = 
    pytest tests/ -v --cov=core --cov=utils --cov-report=html
    flake8 core utils tests
    black --check core utils tests
    mypy core utils

# Performance testing environment
[testenv:perf]
basepython = python3.11
deps = 
    {[testenv]deps}
    -r requirements.txt
    pytest-benchmark>=4.0.0
commands = 
    pytest tests/ -m performance --benchmark-only

# Integration testing environment
[testenv:integration]
basepython = python3.11
deps = 
    {[testenv]deps}
    -r requirements.txt
commands = 
    pytest tests/ -m integration -v

# End-to-end testing environment
[testenv:e2e]
basepython = python3.11
deps = 
    {[testenv]deps}
    -r requirements.txt
    selenium>=4.0.0
    webdriver-manager>=3.8.0
commands = 
    pytest tests/ -m e2e -v

# Docker testing environment
[testenv:docker]
basepython = python3.11
deps = 
    {[testenv]deps}
    -r requirements.txt
    docker>=6.0.0
commands = 
    pytest tests/ -m docker -v

# Environment variables for testing
[testenv:passenv]
# Pass through environment variables
HOME
USER
USERNAME
PATH
PYTHONPATH
SCHWABOT_*
BINANCE_*
COINBASE_*
KRAKEN_*
KUCOIN_*
OKX_*

# Test configuration
[testenv:setenv]
# Set environment variables for testing
SCHWABOT_ENVIRONMENT = test
SCHWABOT_TRADING_MODE = sandbox
SCHWABOT_LIVE_TRADING_ENABLED = false
SCHWABOT_LOG_LEVEL = DEBUG
SCHWABOT_API_HOST = localhost
SCHWABOT_API_PORT = 5001
SCHWABOT_DB_NAME = schwabot_test
SCHWABOT_REDIS_DB = 1

# Coverage configuration
[coverage:run]
source = core, utils
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */.venv/*
    */.env/*
    */migrations/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Minimum coverage thresholds
fail_under = 70
show_missing = True
precision = 2

# HTML coverage report
html_dir = htmlcov
html_title = Schwabot Test Coverage Report

# XML coverage report
xml_output = coverage.xml 